{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-this-all-about","title":"What is this all about?","text":"<p>This is a site for my personal notes on computer science, competitive programming, and other tech related things. I have divided this site into many sections. Also there is a search feature, if you are looking for something just search the term. If you like these notes bookmark it and share it with your friends, and if you find something wrong open a pull request or an issue.</p>"},{"location":"#why-should-you-also-make-something-like-this","title":"Why should you also make something like this?","text":"<p>You have to make your own condensed notes. You learn from MAKING them. A lot of thinking goes into deciding what to include and exclude. You develop your own system of abbreviations and memory methods for the information. Also you will be contributing to open knowledge in this way.</p>"},{"location":"#resources","title":"Resources","text":"<ul> <li>Algorithms and Data Structure notes</li> <li>Math Formulas</li> </ul>"},{"location":"operating-systems/","title":"Operating Systems","text":"<p>Every electronic device (which is somewhat complex) you use will have some operating system. If you know the operating system better, you can customize it to your liking and reduce time figuring stuff out.</p> <ul> <li>linux</li> <li>windows</li> <li>android</li> </ul>"},{"location":"operating-systems/booting/","title":"Booting and Firmware","text":"<ul> <li>https://en.wikipedia.org/wiki/Booting</li> <li>https://en.wikipedia.org/wiki/Booting_process_of_Linux</li> <li>https://en.wikipedia.org/wiki/Template:Firmware_and_booting</li> </ul>"},{"location":"operating-systems/booting/#bootimg-firmware","title":"Bootimg Firmware","text":""},{"location":"operating-systems/booting/#types","title":"Types","text":"<ul> <li>Porperitaty</li> <li>Open source</li> <li>Custom</li> </ul>"},{"location":"operating-systems/booting/#interfaces","title":"Interfaces","text":"<ul> <li>https://en.wikipedia.org/wiki/UEFI</li> <li>https://en.wikipedia.org/wiki/ACPI</li> </ul>"},{"location":"operating-systems/booting/#implementations","title":"Implementations","text":"<ul> <li>https://en.wikipedia.org/wiki/American_Megatrends</li> </ul>"},{"location":"operating-systems/booting/#bootloaders","title":"Bootloaders","text":""},{"location":"operating-systems/booting/#implementations_1","title":"Implementations","text":"<ul> <li>https://en.wikipedia.org/wiki/GNU_GRUB</li> </ul>"},{"location":"operating-systems/booting/#partition-layouts","title":"Partition Layouts","text":"<ul> <li>https://en.wikipedia.org/wiki/GUID_Partition_Table</li> <li>https://en.wikipedia.org/wiki/Master_boot_record</li> <li>https://en.wikipedia.org/wiki/Apple_Partition_Map</li> </ul>"},{"location":"operating-systems/booting/#partition","title":"Partition","text":"<ul> <li>https://en.wikipedia.org/wiki/EFI_system_partition</li> <li>https://en.wikipedia.org/wiki/BIOS_boot_partition</li> <li>https://en.wikipedia.org/wiki//boot/</li> </ul>"},{"location":"operating-systems/booting/#repairing-bootloaders","title":"Repairing Bootloaders","text":"<ul> <li>https://www.supergrubdisk.org/</li> <li>https://www.supergrubdisk.org/</li> </ul>"},{"location":"operating-systems/filesystems/","title":"Filesystem","text":"<ul> <li>https://en.wikipedia.org/wiki/File_system</li> </ul>"},{"location":"operating-systems/filesystems/#list","title":"List","text":"<ul> <li>https://en.wikipedia.org/wiki/Comparison_of_file_systems</li> </ul>"},{"location":"operating-systems/filesystems/#commonly-used-for-personal-computers","title":"Commonly Used for Personal Computers","text":"<ul> <li>FAT - https://en.wikipedia.org/wiki/File_Allocation_Table</li> <li>NTFS - https://en.wikipedia.org/wiki/NTFS</li> </ul>"},{"location":"operating-systems/filesystems/#other","title":"Other","text":"<ul> <li>ESP - EFI system patition - https://en.wikipedia.org/wiki/EFI_system_partition</li> </ul>"},{"location":"operating-systems/android/","title":"Android","text":"<p>Android is a mobile operating system based on a modified version of the Linux kernel and other open-source software, designed primarily for touchscreen mobile devices such as smartphones and tablets.</p>"},{"location":"operating-systems/android/#resources","title":"Resources","text":"<ul> <li>https://en.wikipedia.org/wiki/Android_(operating_system)</li> </ul>"},{"location":"operating-systems/android/recommendations/","title":"Recommended Apps","text":""},{"location":"operating-systems/android/recommendations/#app-stores","title":"App stores","text":"<ul> <li>Play Store - by google</li> <li>AuroraOSS - https://gitlab.com/AuroraOSS/AuroraStore</li> <li>fdroid - https://f-droid.org/en/ - contains open source apps</li> </ul>"},{"location":"operating-systems/android/recommendations/#repositories","title":"Repositories","text":"<ul> <li>https://guardianproject.info/fdroid/</li> <li>https://apt.izzysoft.de/fdroid/</li> </ul>"},{"location":"operating-systems/android/recommendations/#utilities","title":"Utilities","text":"<ul> <li>sms</li> <li>camera</li> <li>gallery</li> <li>file manager</li> <li>floccus</li> <li>metro</li> <li>musify</li> <li>nunti - rss reader</li> <li>TC - trackers control</li> <li>vlc</li> <li>Callobora Office</li> <li>Obsidian</li> <li>extRact</li> <li>Tor Borwser</li> <li>Orbot</li> <li>Firefox</li> </ul>"},{"location":"operating-systems/android/recommendations/#remote-control","title":"Remote Control","text":"<ul> <li>termux<ul> <li>https://wiki.termux.com/wiki/Termux-services<ul> <li>ssh</li> </ul> </li> <li>https://wiki.termux.com/wiki/Remote_Access</li> <li>https://wiki.termux.com/wiki/Termux-setup-storage</li> <li>https://android.stackexchange.com/questions/214463/how-to-ssh-into-android-which-is-a-hotspot</li> <li>https://android.stackexchange.com/questions/208972/can-any-computer-connect-to-a-ssh-server-running-on-an-android-phone-connected-t</li> <li>https://www.youtube.com/watch?v=nltk2GuvEBY</li> <li>https://wiki.termux.com/wiki/Termux:API</li> </ul> </li> <li>ssh<ul> <li>https://unix.stackexchange.com/questions/148956/how-do-i-work-out-which-port-to-log-in-on-with-ssh</li> </ul> </li> </ul>"},{"location":"operating-systems/linux/","title":"Linux","text":""},{"location":"operating-systems/linux/#outline","title":"Outline","text":"<ul> <li>Components of a Linux Operating System</li> <li>Manual</li> <li>Commands</li> <li>Display Servers</li> <li>Shells</li> <li>Package Managers</li> <li>Ricing</li> </ul>"},{"location":"operating-systems/linux/#resources","title":"Resources","text":"<ul> <li>List</li> </ul>"},{"location":"operating-systems/linux/booting/","title":"Booting","text":"<p>How Linux boots up</p> <ul> <li>https://www.freecodecamp.org/news/the-linux-booting-process-6-steps-described-in-detail/</li> </ul> <p>Here is how linux starts:</p> <ul> <li>bios</li> <li>mbr</li> <li>grub</li> <li>kernel</li> <li>init</li> <li>runlevel programs</li> </ul>"},{"location":"operating-systems/linux/booting/#bios-basic-input-output-system","title":"bios - basic input output system","text":"<ul> <li>bios first perform some integrity check on sdd or hdd</li> <li>bios then loads mbr master boot record boot loader</li> <li>you can set up where the mbr is form the boot menu<ul> <li>you can set it to pendrive or a cd rom</li> </ul> </li> <li>once the boot loader program is detected it's loaded into memory and the   bios give control of the system to it</li> </ul>"},{"location":"operating-systems/linux/booting/#mbr-master-boot-record","title":"mbr - master boot record","text":"<ul> <li>responsible for loading and executing the grub boot loader</li> <li>the mbr is located ar the 1st sector of the bootable disk which is typically   <code>/dev/hsa</code> <code>/dev/sda</code> depending on your hardware.</li> </ul>"},{"location":"operating-systems/linux/booting/#grub","title":"grub","text":"<ul> <li>grub is bootloader and lets you to select the os you want to run</li> <li>configuration file in, <code>/etc/grub.conf</code> or <code>/boot/grub/grub.conf</code></li> <li>on ubuntu it is in <code>/etc/default/grub</code>, you change this file   and then you run the utility command provided by ubuntu <code>update-grub</code>   which verifies if this configuration is valid or not, and then make   necessary updates. This extra layer is provided so user won't damage the   system.</li> </ul>"},{"location":"operating-systems/linux/booting/#kernel","title":"kernel","text":"<ul> <li>now the kernel linux is loaded if you have selected some linux distribution</li> <li>now the root file system is mounted, which was specified in the grub configuration</li> <li>then <code>/sbin/init</code> is executed, it have pid one therefore</li> <li>the kernel then establishes a temporary root file system using initial ram disk <code>initrd</code>   until the real file system is mounted.</li> </ul>"},{"location":"operating-systems/linux/booting/#init","title":"init","text":"<ul> <li>older systems - <code>/etc/inittab</code></li> <li>modern systems - <code>systemd</code> is used</li> </ul>"},{"location":"operating-systems/linux/booting/#runlevel-programs","title":"runlevel programs","text":"<ul> <li>now run level programs are executed,</li> <li>there is a directory for each level of programs</li> <li>Run Level 0 - <code>/etc/rc0.d/</code></li> <li>...</li> <li> <p>Run Level 6 - <code>/etc/rc6.d/</code></p> </li> <li> <p>Inside each directory there are applications,   the one starting with <code>S</code> (start) are executed on startup,   and the one starting with <code>K</code> (kill) are executed on shutdown.</p> </li> <li> <p>each of the runlevel defines specific tasks</p> <ul> <li>0 - <code>poweroff.target</code></li> <li>1 - <code>rescue.target</code></li> <li>2 -</li> <li>3 - <code>multi-user.target</code></li> <li>4 -</li> <li>5 - <code>graphical.target</code></li> <li>6 - <code>reboot.target</code></li> <li><code>emergency.target</code></li> </ul> </li> <li> <p>https://www.tecmint.com/change-runlevels-targets-in-systemd/</p> </li> </ul>"},{"location":"operating-systems/linux/booting/#now-display-manager-specific-programs-will-load","title":"now display manager specific programs will load","text":"<ul> <li>take for example <code>sddm</code> display manager</li> <li><code>/usr/share/sddm/scripts</code> here are scripts which sddm loads before starting</li> <li> <p>so you can put some scripts here too</p> </li> <li> <p>other display managers will have different place for startup scripts</p> </li> </ul>"},{"location":"operating-systems/linux/booting/#now-desktop-specific-user-programs-will-load","title":"now desktop specific user programs will load","text":"<ul> <li>like in <code>i3</code> you can have startup programs in config file</li> <li>also you can add specific program to startup in other desktop environments</li> </ul>"},{"location":"operating-systems/linux/components/","title":"Components","text":"<p>Components of a GNU Linux Operating System</p>"},{"location":"operating-systems/linux/components/#bootloader","title":"Bootloader","text":"<ul> <li>bootloader is the software which loads your os into the main memory</li> <li>grub and refind are examples of some popular bootloaders</li> </ul>"},{"location":"operating-systems/linux/components/#kernel","title":"Kernel","text":"<ul> <li>main core of the operating system</li> </ul>"},{"location":"operating-systems/linux/components/#init-system","title":"init system","text":"<ul> <li>how the processes are started on startup, etc controls that</li> <li><code>systemd</code></li> <li><code>init</code></li> </ul>"},{"location":"operating-systems/linux/components/#shell","title":"shell","text":"<ul> <li>where you enter commands it is the shell, different shells have different features<ul> <li>bash</li> <li>zsh</li> <li>fish</li> <li>csh</li> </ul> </li> </ul>"},{"location":"operating-systems/linux/components/#display-server","title":"Display Server","text":"<ul> <li>so to run graphical interface on linux, you will need some software   which will display those components and windows</li> <li><code>x</code> and <code>wayland</code> are the popular choice of these</li> <li><code>x</code> is old but has more software support</li> <li><code>wayland</code> is new and better but not all types of software is   available for it.</li> </ul>"},{"location":"operating-systems/linux/components/#display-manger","title":"Display Manger","text":"<ul> <li>when you login the login screen is the display manager, it manages sessions</li> <li>different de have different display managers, you can change them</li> <li><code>lightdm</code>, <code>sddm</code>, <code>gdm</code> are some common display managers</li> </ul>"},{"location":"operating-systems/linux/components/#desktop-environment","title":"Desktop Environment","text":"<ul> <li>so desktop environment is how your interface looks and its default programs.</li> <li>desktop environment controls these things<ul> <li>default applications</li> <li>your application launcher</li> <li>notifications</li> <li>keyboard shortcuts</li> <li>how windows are displayed</li> <li>icons and themes</li> </ul> </li> <li>gnome, kde, xfce, lxde, mate some common desktop environment</li> <li>there are so many of them because everyone have their own preferences so use the one that   works for you</li> </ul>"},{"location":"operating-systems/linux/components/#window-managers","title":"Window managers","text":"<ul> <li>when you install a desktop environment, it installs which power users don't need</li> <li>like a text editor, a terminal, calculator, music player, etc</li> <li>so to have more control you can just install window manager</li> <li>i3, bspwm, awesome, openbox, dwm, xmonad are common wm</li> </ul>"},{"location":"operating-systems/linux/components/#widget-toolkit","title":"Widget toolkit","text":"<ul> <li>ui toolkit used to make an application<ul> <li>gtk and qt are the popular one used</li> <li>kde use qt, gnome use gtk, two major desktop environment</li> </ul> </li> <li>https://en.wikipedia.org/wiki/D-Bus - for process communication</li> </ul>"},{"location":"operating-systems/linux/distros/","title":"Distros","text":"<p>So what are linux distros (distributions)?</p> <ul> <li>when linux started, other people started making their own customizations   and putting their software on top (software of their preference)</li> <li>every distro is different usually in the way it install software</li> <li>there are some distro which are rolling release, i.e. you install it once   and then keep updating it, you will never have to upgrade to a new   distribution (like windows 10 to windows 11 as a analogy).</li> <li>then there are distributions which release major version then some minor   and you will have to upgrade to them, you will most like use a   LTS (long term support) version of such distro.</li> </ul>"},{"location":"operating-systems/linux/distros/#debian","title":"debian","text":"<ul> <li>very old, it use package manger <code>dpkg</code></li> <li>ubuntu and mint are based on debian</li> </ul>"},{"location":"operating-systems/linux/distros/#arch","title":"arch","text":"<ul> <li>rolling release distribution</li> <li>arco is based on arch</li> </ul>"},{"location":"operating-systems/linux/distros/#redhat","title":"redhat","text":"<ul> <li>commercial distribution</li> <li>fedora is based on redhat, first redhat tests its releases through fedora   then it is released for redhat</li> </ul>"},{"location":"operating-systems/linux/distros/#opensuse","title":"opensuse","text":"<ul> <li>rolling released</li> <li>maintained by community</li> </ul>"},{"location":"operating-systems/linux/distros/#gentoo","title":"gentoo","text":"<ul> <li>for advance users</li> <li>here you compile software if you want to install it</li> </ul>"},{"location":"operating-systems/linux/distros/#void","title":"void","text":"<ul> <li>uses runit init system instead of systemd</li> </ul>"},{"location":"operating-systems/linux/resources/","title":"Resources","text":"<p>There are many resources available for learning about linux, but many of them don't come under search results.</p>"},{"location":"operating-systems/linux/resources/#learning-resources","title":"Learning Resources","text":"<ul> <li>https://wiki.linuxquestions.org/ linux wiki</li> <li>https://cmdchallenge.com interactive shell game</li> <li>https://www.kernel.org/doc/man-pages/ library c functions gnu</li> <li>https://www.explainshell.com enter a command and get's its explanation</li> <li>https://wiki.archlinux.org/</li> <li>https://linuxjourney.com/</li> <li>https://linux.die.net/</li> <li>https://tldp.org/</li> <li>http://bash.cyberciti.biz/guide/Main_Page</li> <li>https://en.wikipedia.org/wiki/Linux.conf.au - lau videos</li> <li>https://en.wikipedia.org/wiki/Open_Source_Developers%27_Conference</li> <li>https://en.wikipedia.org/wiki/Category:Linux_conferences</li> <li>https://github.com/makelinux/linux_kernel_map</li> <li>https://github.com/inputsh/awesome-linux</li> <li>https://github.com/bpearson/Awesome-Ubuntu-Linux</li> <li>https://github.com/luong-komorebi/Awesome-Linux-Software</li> <li>https://github.com/madbob/awesome-linux-dev</li> <li>https://github.com/manjunath5496/Linux-Books</li> <li>https://github.com/manjunath5496/Important-Linux-Commands-You-Should-Know</li> <li>https://github.com/manjunath5496/What-is-Linux-and-why-is-it-so-popular</li> <li>https://github.com/alebcay/awesome-shell</li> <li>https://github.com/awesome-lists/awesome-bash</li> <li>https://github.com/agarrharr/awesome-cli-apps</li> </ul>"},{"location":"operating-systems/linux/resources/#desktop-environments-and-window-managers","title":"Desktop Environments and Window Managers","text":"<p>Must read the one you use, and it will make your life easy.</p> <ul> <li>https://github.com/myugan/awesome-linux-customization</li> <li>https://github.com/francoism90/awesome-kde</li> <li>https://github.com/Kazhnuz/awesome-gnome</li> <li>make qt and gtk apps look same</li> </ul>"},{"location":"operating-systems/linux/resources/#discord","title":"Discord","text":"<ul> <li>Linux Hub</li> <li>Linux Caf\u00e9</li> <li>Linux For All</li> <li>Linux &amp; Technology Kingdom</li> <li>The Tech Community</li> <li>*nix nest</li> <li>r/unixporn</li> <li>Mint</li> <li>openSUSE</li> <li>Manjaro</li> <li>Void</li> <li>Fedora</li> <li>Arch</li> <li>r/LinuxGaming</li> <li>Linux_Gamers_Group</li> <li>Lutris</li> <li>ProtonDB</li> <li>VKx</li> <li>Minetest</li> </ul>"},{"location":"operating-systems/linux/resources/#reddit","title":"Reddit","text":"<ul> <li>list maintained by r/linux</li> <li>Distro subreddits list maintained by r/linux</li> </ul>"},{"location":"operating-systems/linux/resources/#rtfm","title":"RTFM","text":"<ul> <li><code>man</code> command</li> <li><code>tldr</code> command</li> <li>archwiki</li> <li>askubuntu</li> </ul>"},{"location":"operating-systems/linux/security/","title":"Security","text":""},{"location":"operating-systems/linux/security/#usb-guard","title":"Usb Guard","text":"<p>Protect yourself from physical usb attacks and executing malware/backdoors, this can work by making usb's read only, unless you explicitly whitelist it.</p> <ul> <li><code>sudo ln -s /dev/null /etc/systemd/system/usbguard.service</code> in order for unmask to work</li> <li>Ubuntu based: <code>sudo apt install usbguard</code></li> <li>Arch based: <code>sudo pamac install usbguard</code></li> </ul>"},{"location":"operating-systems/linux/security/#configuring-usbguard","title":"Configuring USBGuard","text":"<p>After installation run:</p> <ol> <li><code>usbguard generate-policy</code> steps 1-2 whitelists already connected devices, e.g your current mouse/keyboard/storage</li> <li><code>usbguard generate-policy &gt; /etc/usbguard/rules.conf</code></li> <li><code>systemctl unmask usbguard.service systemctl</code></li> <li><code>start usbguard.service</code></li> <li><code>systemctl enable usbguard.service</code></li> </ol> <p>To allow a usb device permanently simply run:</p> <ul> <li><code>usbguard list-devices</code></li> <li><code>usbguard allow-device EnterTheIdHere -p</code></li> </ul>"},{"location":"operating-systems/linux/security/#ssh","title":"SSH","text":"<p>If this is enabled and you don't use it, it's best to disable it.</p> <ul> <li>ubuntu based: <code>sudo systemctl disable ssh.service</code></li> <li>Arch based (manjaro, Garuda, etc): <code>sudo systemctl disable sshd</code></li> </ul>"},{"location":"operating-systems/linux/security/#fai2ban","title":"Fai2ban","text":"<ul> <li> <p>deters brute force attacks**</p> </li> <li> <p>Ubuntu/debian based: <code>sudo apt install fail2ban</code></p> </li> <li>Arch based: <code>sudo pamac install fail2ban-client</code></li> </ul>"},{"location":"operating-systems/linux/security/#configuring-fail2ban","title":"Configuring fail2ban","text":"<ul> <li><code>cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local</code></li> <li> <p><code>sudo nano /etc/fail2ban/jail.local</code></p> </li> <li> <p>\"Ban time\" = how long attackers are banned,</p> </li> <li>\"find time\" = if an attacker enter a password incorrectly, how long do you have to wait before the incorrect password counter resets,</li> <li>\"maxretry\" = the max amount of incorrect passwords before the ban,</li> <li>\"ignore ip\" = you may want to whitelist your own ip.</li> </ul>"},{"location":"operating-systems/linux/security/#network-firewall","title":"Network firewall","text":"<ul> <li>Only allow internet access to applications which need it.</li> </ul> <p>This can mitigate spyware/trojans, which are rare on linux anyways, and stopping apps from collecting unnecessary info.</p> <p>Opensnitch does a decent job at this, has a gui which prompts you once when an app wants to use the internet. Although installing this is a bit of a pain since it's not on any repos, so you'll have to manually install it.Ubuntu based:</p> <ol> <li>Getting the dependencies</li> <li><code>sudo apt-get install protobuf-compiler libpcap-dev libnetfilter-queue-dev python3-pip</code></li> <li><code>go get</code> https://github.com/golang/protobuf/protoc-gen-go</li> <li><code>go get -u</code> https://github.com/golang/dep/cmd/dep</li> <li><code>python3 -m pip install --user grpcio-tools</code></li> <li>Getting opensnitch and building it</li> <li><code>go get github.com/evilsocket/opensnitch</code></li> <li><code>cd $GOPATH/src/github.com/evilsocket/opensnitch</code></li> <li>If command 8 didn't work, just cd into the downloaded opensnitch folder</li> <li><code>make</code></li> <li><code>sudo make install</code></li> <li>Enabling the service</li> <li><code>sudo systemctl enable opensnitchd</code></li> <li><code>sudo service opensnitchd start</code></li> <li><code>opensnitch-ui</code></li> </ol> <p>Arch based: Someone made an aur, which saves you so much time:</p> <ol> <li><code>pamac install opensnitch-git</code></li> <li><code>sudo systemctl start opensnitchd</code></li> </ol>"},{"location":"operating-systems/linux/security/#malwarerootkit-scanner","title":"Malware/rootkit scanner","text":"<p>I wouldn't really say this is necessary, but if you think you have malware then you can run a scan:</p> <ul> <li>Ubuntu based: <code>sudo apt-get install clamav clamav-daemon</code></li> <li>Arch based: <code>sudo pamac install clamav</code></li> </ul>"},{"location":"operating-systems/linux/security/#file-permissions","title":"File permissions","text":"<p>You may want to get familiar with chmod, and chown, to change file permissions. For e.g, if you store important files somewhere you may want to make it require root access in order to read/write: in which case you'd run:</p> <ul> <li><code>sudo chown root:root /path/to/application</code></li> <li><code>sudo chmod 700 /path/to/application</code></li> </ul>"},{"location":"operating-systems/linux/security/#sandboxing","title":"Sandboxing","text":"<p>I'd suggest learning firejail, or bubblewrap (more advanced), to sandbox and isolate apps.</p> <p>However, if that sounds too complicated, then downloading apps as flatpaks is a great way to have some security, whilst not a silver bullet, its extremely easy to use and permissions can be managed through it's gui app: flatseal, or just cli.</p>"},{"location":"operating-systems/linux/security/#dns","title":"DNS","text":"<p>By default, ur using plain text dns, it's vulnerable to mitm attacks, your isp can log all traffic, etc. By doing this, you'd also have the ability to block ads/trackers/malware/and malicious ip's reported for ssh attacks</p> <p>You'll be selfhosting adguard home (only takes 1 command), and can even use this on other devices, but if you don't want to leave your computer on 24/7, then you can use it solely on your own device.</p> <ul> <li><code>curl -s -S -L https://raw.githubusercontent.com/AdguardTeam/AdGuardHome/master/scripts/install.sh | sh -s -- -v</code></li> </ul> <p>That's it, then go to http://localhost:3000, to access its web gui. (It might not be port 3000, as I did this ages ago, but it says in the terminal, change the ports to anything else within the web gui if planning on selfhosting the apps below)</p> <p>It's best to setup https for its web interface, but feel free to skip this step:</p> <p><code>openssl req -newkey rsa:4096 -x509 -sha256 -days 365 -nodes -out adguard1234g.crt -keyout adguard1234g.key</code></p> <p>Go to <code>settings &gt; encryption settings &gt; enable https</code>, force https, and quite simply copy and paste adguard1234g.crt into the certificate field, and adguard1234g.key into the key field. That's it. You can access it through https not http now. https://localhost</p>"},{"location":"operating-systems/linux/security/#adguard-home-recommended-settings","title":"Adguard Home recommended settings","text":"<p>Configuring adguard home should be common sense since it has an easy to use gui.</p> <p>But here's my recommendations:</p> <ul> <li> <p><code>Settings &gt; dns &gt; in the first box enter any dns provider</code>.   I'd recommend using quad9 as its recent move to switzerland, and change in privacy policy, makes it the best dns provider in terms of privacy imo. Its also one of the fastest.</p> </li> <li> <p>Quad9's Dnscrypt: 2.dnscrypt-cert.quad9.net</p> </li> <li> <p>Quad9's dns over tls: tls://dns.quad9.net</p> </li> <li> <p><code>Filters &gt; Blocklist</code></p> <ul> <li>I'd recommend using oisd.nl's blocklist for ad/tracker/malware/crypto/etc blocking without false positives, or if you're brave use energised unified/ultimate but be willing to whitelist a lot of stuff.</li> </ul> </li> <li> <p>Why not pihole? Because by default it doesn't support, dns over tls, dnscrypt, or https for its web interface, etc.</p> </li> <li>dont use dns-over-https as it's useless in terms of privacy. Why? The SNI, and OCSP fields aren't encrypted, which allow seeing the ip address of all queries.</li> </ul>"},{"location":"operating-systems/linux/security/#secure-cloud-storage","title":"Secure cloud storage","text":"<p>Use cryptomator to auto encrypt files when uploading files to cloud. Use veracrypt for a more secure, but manual option, or just GnuPg which is included by default in most distros, however gnupg doesn't support folder encryption.</p> <p>Or selfhost nextcloud on a device which is on 24/7 for your own cloud storage. It's incredibly easy to setup (with https), and requires 2 commands.</p> <ul> <li><code>sudo snap install nextcloud</code></li> <li><code>sudo nextcloud.enable-https self-signed</code></li> </ul> <p>https://localhost</p>"},{"location":"operating-systems/linux/security/#password-manager","title":"Password manager","text":"<p>Use bitwarden for a free hosted option, keepassxc for an offline/local option, or vaultwarden for a selfhosted option.</p>"},{"location":"operating-systems/linux/security/#ssh-keys","title":"ssh keys","text":"<p>ssh keys are a great way to secure ssh logins, as it'll be unique to you and can even be combined with a passphrase. Bare in mind, this causes issues with a lot of ssh clients, filezilla (sftp file transfer)'s ssh key implementation isnt compatible with openssl, most mobile clients lack this feature.</p> <ul> <li><code>ssh-keygen</code></li> <li><code>ssh-copy-id username@remote_host</code> - change to ssh key for login.</li> <li>If ssh-copy-id doesnt work, you'll need to manually copy the key to your authorised keys.</li> <li>Now, the server has your public key, and you ssh via your private key.</li> </ul>"},{"location":"operating-systems/linux/security/#lynis","title":"lynis","text":"<ul> <li> <p>for system audit, and overview of security risks</p> </li> <li> <p><code>git clone https://github.com/CISOfy/lynis</code></p> </li> <li><code>cd lynis</code></li> <li><code>lynis audit system</code></li> </ul>"},{"location":"operating-systems/linux/commands/glossary/","title":"Commands Glossary","text":"Command Description accept Accept or Reject jobs to a destination, such as a printer. access Check a user's RWX permission for a file. aclocal GNU autoconf too aconnect ALSA sequencer connection manager. acpi Show information about the Advanced Configuration and Power Interface. acpi_available Check if ACPI functionality exists on the system. acpid Informs user-space programs about ACPI events. addr2line Used to convert addresses into file names and line numbers. addresses Formats for internet mail addresses. agetty An alternative Linux Getty alias Create an alias for Linux commands alsactl Access advanced controls for ALSA soundcard driver. amidi Perform read/write operation for ALSA RawMIDI ports. amixer Access CLI-based mixer for ALSA soundcard driver. anacron Used to run commands periodically. aplay Sound recorder and player for CLI. aplaymidi CLI utility used to play MIDI files. apm Show Advanced Power Management (APM) hardware info on older systems. apmd Used to handle events reported by APM BIOS drivers. apropos Shows the list of all man pages containing a specific keyword apt Advanced Package Tool, a package management system for Debian and derivatives. apt-get Command-line utility to install/remove/update packages based on APT system. aptitude Another utility to add/remove/upgrade packages based on the APT system. ar A utility to create/modify/extract from archives. arch Display print machine hardware name. arecord Just like aplay, it's a sound recorder and player for ALSA soundcard driver. arecordmidi Record standard MIDI files. arp Used to make changes to the system's ARP cache as A portable GNU assembler. aspell An interactive spell checker utility. at Used to schedule command execution at specified date &amp; time, reading commands from an input file. atd Used to execute jobs queued by the at command. atq List a user's pending jobs for the at command. atrm Delete jobs queued by the at command. audiosend Used to send an audio recording as an email. aumix An audio mixer utility. autoconf Generate configuration scripts from a TEMPLATE-FILE and send the output to standard output. autoheader Create a template header for configure. automake Creates GNU standards-compliant Makefiles from template files autoreconf Update generated configuration files. autoscan Generate a preliminary configure.in autoupdate Update a configure.in file to newer autoconf. awk Used to find and replace text in a file(s). badblocks Search a disk partition for bad sectors. banner Used to print characters as a poster. basename Used to display filenames with directoy or suffix. bash GNU Bourne-Again Shell. batch Used to run commands entered on a standard input. bc Access the GNU bc calculator utility. bg Send processes to the background. biff Notify about incoming mail and sender's name on a system running comsat server. bind Used to attach a name to a socket. bison A GNU parser generator, compatible with yacc. break Used to exit from a loop (eg: for, while, select). builtin Used to run shell builtin commands, make custom functions for commands extending their functionality. bzcmp Used to call the cmp program for bzip2 compressed files. bzdiff Used to call the diff program for bzip2 compressed files. bzgrep Used to call grep for bzip2 compressed files. bzip2 A block-sorting file compressor used to shrink given files. bzless Used to apply 'less' (show info one page at a time) to bzip2 compressed files. bzmore Used to apply 'more' (an inferior version of less) to bzip2 compressed files. cal Show calendar. cardctl Used to control PCMCIA sockets and select configuration schemes. cardmgr Keeps an eye on the added/removes sockets for PCMCIA devices. case Execute a command conditionally by matching a pattern. cat Used to concatenate files and print them on the screen. cc GNU C and C++ compiler. cd Used to change directory. cdda2wav Used to rip a CD-ROM and make WAV file. cdparanoia Record audio from CD more reliably using data-verification algorithms. cdrdao Used to write all the content specified to a file to a CD all at once. cdrecord Used to record data or audio compact discs. cfdisk Show or change the disk partition table. chage Used to change user password information. chattr Used to change file attributes. chdir Used to change active working directory. chfn Used to change real user name and information. chgrp Used to change group ownership for file. chkconfig Manage execution of runlevel services. chmod Change access permission for a file(s). chown Change the owner or group for a file. chpasswd Update password in a batch. chroot Run a command with root privileges. chrt Alter process attributed in real-time. chsh Switch login shell. chvt Change foreground virtual terminal. cksum Perform a CRC checksum for files. clear Used to clear the terminal window. cmp Compare two files (byte by byte). col Filter reverse (and half-reverse) line feeds from the input. colcrt Filter nroff output for CRT previewing. colrm Remove columns from the lines of a file. column A utility that formats its input into columns. comm Used to compare two sorted files line by line. command Used to execute a command with arguments ignoring shell function named command. compress Used to compress one or more file(s) and replacing the originals ones. continue Resume the next iteration of a loop. cp Copy contents of one file to another. cpio Copy files from and to archives. cpp GNU C language processor. cron A daemon to execute scheduled commands. crond Same work as cron. crontab Manage crontab files (containing schedules commands) for users. csplit Split a file into sections on the basis of context lines. ctags Make a list of functions and macro names defined in a programming source file. cupsd A scheduler for CUPS. curl Used to transfer data from or to a server using supported protocols. cut Used to remove sections from each line of a file(s). cvs Concurrent Versions System. Used to track file versions, allow storage/retrieval of previous versions, and enables multiple users to work on the same file. date Show system date and time. dc Desk calculator utility. dd Used to convert and copy a file, create disk clone, write disk headers, etc. ddrescue Used to recover data from a crashed partition. deallocvt Deallocates kernel memory for unused virtual consoles. debugfs File system debugger for ext2/ext3/ext4 declare Used to declare variables and assign attributes. depmod Generate modules.dep and map files. devdump Interactively displays the contents of device or file system ISO. df Show disk usage. diff Used to compare files line by line. diff3 Compare three files line by line. dig Domain Information Groper, a DNS lookup utility. dir List the contents of a directory. dircolors Set colors for 'ls' by altering the LS_COLORS environment variable. dirname Display pathname after removing the last slash and characters thereafter. dirs Show the list of remembered directories. disable Restrict access to a printer. dlpsh Interactive Desktop Link Protocol (DLP) shell for PalmOS. dmesg Examine and control the kernel ring buffer. dnsdomainname Show the DNS domain name of the system. dnssec-keygen Generate encrypted Secure DNS keys for a given domain name. dnssec-makekeyset Produce domain key set from one or more DNS security keys generated by dnssec-keygen. dnssec-signkey Sign a secure DNS keyset with key signatures specified in the list of key-identifiers. dnssec-signzone Sign a secure DNS zonefile with the signatures in the specified list of key-identifiers. doexec Used to run an executable with an arbitrary argv list provided. domainname Show or set the name of current NIS (Network Information Services) domain. dosfsck Check and repair MS-DOS file systems. du Show disk usage summary for a file(s). dump Backup utility for ext2/ext3 file systems. dumpe2fs Dump ext2/ext3/ext4 file systems. dumpkeys Show information about the keyboard driver's current translation tables. e2fsck Used to check ext2/ext3/ext4 file systems. e2image Store important ext2/ext3/ext4 filesystem metadata to a file. e2label Show or change the label on an ext2/ext3/ext4 filesystem. echo Send input string(s) to standard output i.e. display text on the screen. ed GNU Ed - a line-oriented text editor. edquota Used to edit filesystem quotas using a text editor, such as vi. egrep Search and display text matching a pattern. eject Eject removable media. elvtune Used to set latency in the elevator algorithm used to schedule I/O activities for specified block devices. emacs Emacs text editor command line utility. enable Used to enable/disable shell builtin commands. env Run a command in a modified environment. Show/set/delete environment variables. envsubst Substitute environment variable values in shell format strings. esd Start the Enlightenment Sound Daemon (EsounD or esd). Enables multiple applications to access the same audio device simultaneously. esd-config Manage EsounD configuration. esdcat Use EsounD to send audio data from a specified file. esdctl EsounD control program. esddsp Used to reroute non-esd audio data to esd and control all the audio using esd. esdmon Used to copy the sound being sent to a device. Also, send it to a secondary device. esdplay Use EsounD system to play a file. esdrec Use EsounD to record audio to a specified file. esdsample Sample audio using esd. etags Used to create a list of functions and macros from a programming source file. These etags are used by emacs. For vi, use ctags. ethtool Used to query and control network driver and hardware settings. eval Used to evaluate multiple commands or arguments are once. ex Interactive command exec An interactive line-based text editor. exit Exit from the terminal. expand Convert tabs into spaces in a given file and show the output. expect An extension to the Tcl script, it's used to automate interaction with other applications based on their expected output. export Used to set an environment variable. expr Evaluate expressions and display them on standard output. factor Display prime factors of specified integer numbers. false Do nothing, unsuccessfully. Exit with a status code indicating failure. fc-cache Make font information cache after scanning the directories. fc-list Show the list of available fonts. fdformat Do a low-level format on a floppy disk. fdisk Make changes to the disk partition table. fetchmail Fetch mail from mail servers and forward it to the local mail delivery system. fg Used to send a job to the foreground. fgconsole Display the number of the current virtual console. fgrep Display lines from a file(s) that match a specified string. A variant of grep. file Determine file type for a file. find Do a file search in a directory hierarchy. finger Display user data including the information listed in <code>.plan</code> and <code>.project</code> in each user's home directory. fingerd Provides a network interface for the finger program. flex Generate programs that perform pattern-matching on text. fmt Used to convert text to a specified width by filling lines and removing new lines, displaying the output. fold Wrap input line to fit in a specified width. for Expand words and run commands for each one in the resultant list. formail Used to filter standard input into mailbox format. format Used to format disks. free Show free and used system memory. fsck Check and repair a Linux file system ftp File transfer protocol user interface. ftpd FTP server process. function Used to define function macros. fuser Find and kill a process accessing a file. g++ Run the g++ compiler. gawk Used for pattern scanning and language processing. A GNU implementation of AWK language. gcc A C and C++ compiler by GNU. gdb A utility to debug programs and know about where it crashes. getent Shows entries from Name Service Switch Libraries for specified keys. getkeycodes Displays the kernel scancode-to-keycode mapping table. getopts A utility to parse positional parameters. gpasswd Allows an administrator to change group passwords. gpg Enables encryption and signing services as per the OpenPGP standard. gpgsplit Used to split an OpenPGP message into packets. gpgv Used to verify OpenPGP signatures. gpm It enables cut and paste functionality and a mouse server for the Linux console. gprof Shows call graph profile data. grep Searches input files for a given pattern and displays the relevant lines. groff Serves as the front-end of the groff document formatting system. groffer Displays groff files and man pages. groupadd Used to add a new user group. groupdel Used to remove a user group. groupmod Used to modify a group definition. groups Show the group(s) to which a user belongs. grpck Verifies the integrity of group files. grpconv Creates a gshadow file from a group or an already existing gshadow. gs Invokes Ghostscript, and interpreter and previewer for Adobe's PostScript and PDF languages. gunzip A utility to compress/expand files. gzexe Used compress executable files in place and have them automatically uncompress and run at a later stage. gzip Same as gzip. halt Command used to half the machine. hash Shows the path for the commands executed in the shell. hdparm Show/configure parameters for SATA/IDE devices. head Shows first 10 lines from each specified file. help Display's help for a built-in command. hexdump Shows specified file output in hexadecimal, octal, decimal, or ASCII format. history Shows the command history. host A utility to perform DNS lookups. hostid Shows host's numeric ID in hexadecimal format. hostname Display/set the hostname of the system. htdigest Manage the user authentication file used by the Apache web server. htop An interactive process viewer for the command line. hwclock Show or configure the system's hardware clock. iconv Convert text file from one encoding to another. id Show user and group information for a specified user. if Execute a command conditionally. ifconfig Used to configure network interfaces. ifdown Stops a network interface. ifup Starts a network interface. imapd An IMAP (Interactive Mail Access Protocol) server daemon. import Capture an X server screen and saves it as an image. inetd Extended internet services daemon, it starts the programs that provide internet services. info Used to read the documentation in Info format. init Systemd system and service manager. insmod A program that inserts a module into the Linux kernel. install Used to copy files to specified locations and set attributions during the install process. iostat Shows statistics for CPU, I/O devices, partitions, network filesystems. ip Display/manipulate routing, devices, policy, routing and tunnels. ipcrm Used to remove System V interprocess communication (IPC) objects and associated data structures. ipcs Show information on IPC facilities for which calling process has read access. iptables Administration tool for IPv4 packet filtering and NAT. iptables-restore Used to restore IP tables from data specified in the input or a file. iptables-save Used to dump IP table contents to standard output. isodump A utility that shows the content iso9660 images to verify the integrity of directory contents. isoinfo A utility to perform directory like listings of iso9660 images. isosize Show the length of an iso9660 filesystem contained in a specified file. isovfy Verifies the integrity of an iso9660 image. ispell A CLI-based spell-check utility. jobs Show the list of active jobs and their status. join For each pair of input lines, join them using a command field and display on standard output. kbd_mode Set a keyboard mode. Without arguments, shows the current keyboard mode. kbdrate Reset keyboard repeat rate and delay time. kill Send a kill (termination) signal to one more processes. killall Kills a process(es) running a specified command. killall5 A SystemV killall command. Kills all the processes excluding the ones which it depends on. klogd Control and prioritize the kernel messages to be displayed on the console, and log them through syslogd. kudzu Used to detect new and enhanced hardware by comparing it with existing database. Only for RHEL and derivates. last Shows a list of recent logins on the system by fetching data from <code>/var/log/wtmp</code> file. lastb Shows the list of bad login attempts by fetching data from <code>/var/log/btmp</code> file. lastlog Displays information about the most recent login of all users or a specified user. ld The Unix linker, it combines archives and object files. It then puts them into one output file, resolving external references. ldconfig Configure dynamic linker run-time bindings. ldd Shows shared object dependencies. less Displays contents of a file one page at a time. It's advanced than <code>more</code> command. lesskey Used to specify key bindings for less command. let Used to perform integer artithmetic on shell variables. lftp An FTP utility with extra features. lftpget Uses lftop to retrieve HTTP, FTP, and other protocol URLs supported by lftp. link Create links between two files. Similar to ln command. ln Create links between files. Links can be hard (two names for the same file) or soft (a shortcut of the first file). loadkeys Load keyboard translation tables. local Used to create function variables. locale Shows information about current or all locales. locate Used to find files by their name. lockfile Create semaphore file(s) which can be used to limit access to a file. logger Make entries in the system log. login Create a new session on the system. logname Shows the login name of the current user. logout Performs the logout operation by making changes to the utmp and wtmp files. logrotate Used for automatic rotation, compression, removal, and mailing of system log files. look Shows any lines in a file containing a given string in the beginning. losetup Set up and control loop devices. lpadmin Used to configure printer and class queues provided by CUPS (Common UNIX Printing System). lpc Line printer control program, it provides limited control over CUPS printer and class queues. lpinfo Shows the list of avaiable devices and drivers known to the CUPS server. lpmove Move on or more printing jobs to a new destination. lpq Shows current print queue status for a specified printer. lpr Used to submit files for printing. lprint Used to print a file. lprintd Used to abort a print job. lprintq List the print queue. lprm Cancel print jobs. lpstat Displays status information about current classes, jobs, and printers. ls Shows the list of files in the current directory. lsattr Shows file attributes on a Linux ext2 file system. lsblk Lists information about all available or the specified block devices. lsmod Show the status of modules in the Linux kernel. lsof List open files. lspci List all PCI devices. lsusb List USB devices. m4 Macro processor. mail Utility to compose, receive, send, forward, and reply to emails. mailq Shows to list all emails queued for delivery (sendmail queue). mailstats Shows current mail statistics. mailto Used to send mail with multimedia content in MIME format. make Utility to maintain groups of programs, recompile them if needed. makedbm Creates an NIS (Network Information Services) database map. makemap Creates database maps used by the keyed map lookups in sendmail. man Shows manual pages for Linux commands. manpath Determine search path for manual pages. mattrib Used to change MS-DOS file attribute flags. mbadblocks Checks MD-DOS filesystems for bad blocks. mcat Dump raw disk image. mcd Used to change MS-DOS directory. mcopy Used to copy MS-DOS files from or to Unix. md5sum Used to check MD5 checksum for a file. mdel, mdeltree Used to delete MS-DOS file. mdeltree recursively deletes MS-DOS directory and its contents. mdir Used to display an MS-DOS directory. mdu Used to display the amount of space occupied by an MS-DOS directory. merge Three-way file merge. Includes all changes from file2 and file3 to file1. mesg Allow/disallow osends to sedn write messages to your terminal. metamail For sending and showing rich text or multimedia email using MIME typing metadata. metasend An interface for sending non-text mail. mformat Used to add an MS-DOS filesystem to a low-level formatted floppy disk. mimencode Translate to/from MIME multimedia mail encoding formats. minfo Display parameters of an MS-DOS filesystem. mkdir Used to create directories. mkdosfs Used to create an MS-DOS filesystem under Linux. mke2fs Used create an ext2/ext3/ext4 filesystem. mkfifo Used to create named pipes (FIFOs) with the given names. mkfs Used to build a Linux filesystem on a hard disk partition. mkfs.ext3 Same as mke2fs, create an ext3 Linux filesystem. mkisofs Used to create an ISO9660/JOLIET/HFS hybrid filesystem. mklost+found Create a lost+found directory on a mounted ext2 filesystem. mkmanifest Makes a list of file names and their DOS 8.3 equivalent. mknod Create a FIFO, block (buffered) special file, character (unbuffered) special file with the specified name. mkraid Used to setup RAID device arrays. mkswap Set up a Linux swap area. mktemp Create a temporary file or directory. mlabel Make an MD-DOS volume label. mmd Make an MS-DOS subdirectory. mmount Mount an MS-DOS disk. mmove Move or rename an MS-DOS file or subdirectory. mmv Mass move and rename files. modinfo Show information about a Linux kernel module. modprobe Add or remove modules from the Linux kernel. more Display content of a file page-by-page. most Browse or page through a text file. mount Mount a filesystem. mountd NFS mount daemon. mpartition Partition an MS-DOS disk. mpg123 Command-line mp3 player. mpg321 Similar to mpg123. mrd Remove an MS-DOS subdirectory. mren Rename an existing MS-DOS file. mshowfat Show FTA clusters allocated to a file. mt Control magnetic tape drive operation. mtools Utilities to access MS-DOS disks. mtoolstest Tests and displays the mtools configuration files. mtr A network diagnostic tool. mtype Display contents of an MS-DOS file. mv Move/rename files or directories. mzip Change protection mode and eject disk on Zip/Jaz drive. named Internet domain name server. namei Follow a pathname until a terminal point is found. nameif Name network interfaces based on MAC addresses. nc Netcat utility. Arbitrary TCP and UDP connections and listens. netstat Show network information. newaliases Rebuilds mail alias database. newgrp Log-in to a new group. newusers Update/create new users in batch. nfsd Special filesystem for controlling Linux NFS server. nfsstat List NFS statistics. nice Run a program with modified scheduling priority. nl Show numbered line while displaying the contents of a file. nm List symbols from object files. nohup Run a command immune to hangups. notify-send A program to send desktop notifications. nslookup Used performs DNS queries. Read this article for more info. nsupdate Dynamic DNS update utility. objcopy Copy and translate object files. objdump Display information from object files. od Dump files in octal and other formats. op Operator access, allows system administrators to grant users access to certain root operations that require superuser privileges. open Open a file using its default application. openvt Start a program on a new virtual terminal (VT). passwd Change user password. paste Merge lines of files. Write to standard output, TAB-separated lines consisting of sqentially correspnding lines from each file. patch Apply a patchfile (containing differences listing by diff program) to an original file. pathchk Check if file names are valid or portable. perl Perl 5 language interpreter. pgrep List process IDs matching the specified criteria among all the running processes. pidof Find process ID of a running program. ping Send ICMP ECHO_REQUEST to network hosts. pinky Lightweight finger. pkill Send kill signal to processes based on name and other attributes. pmap Report memory map of a process. popd Removes directory on the head of the directory stack and takes you to the new directory on the head. portmap Converts RPC program numbers to IP port numbers. poweroff Shuts down the machine. pppd Point-to-point protocol daemon. pr Convert (column or paginate) text files for printing. praliases Prints the current system mail aliases. printcap Printer capability database. printenv Show values of all or specified environment variables. printf Show arguments formatted according to a specified format. ps Report a snapshot of the current processes. ptx Produce a permuted index of file contents. pushd Appends a given directory name to the head of the stack and then cd to the given directory. pv Monitor progress of data through a pipe. pwck Verify integrity of password files. pwconv Creates shadow from passwd and an optionally existing shadow. pwd Show current directory. python quota Shows disk usage, and space limits for a user or group. Without arguments, only shows user quotas. quotacheck Used to scan a file system for disk usage. quotactl Make changes to disk quotas. quotaoff Enable enforcement of filesystem quotas. quotaon Disable enforcement of filesystem quotas. quotastats Shows the report of quota system statistics gathered from the kernel. raidstart Start/stop RAID devices. ram RAM disk device used to access the RAM disk in raw mode. ramsize Show usage information for the RAM disk. ranlib Generate index to the contents of an archive and store it in the archive. rar Create and manage RAR file in Linux. rarpd Respond to Reverse Address Resoultion Protocol (RARP) requests. rcp Remote copy command to copy files between remote computers. rdate Set system date and time by fetching information from a remote machine. rdev Set or query RAM disk size, image root device, or video mode. rdist Remote file distribution client, maintains identical file copies over multiple hosts. rdistd Start the rdist server. read Read from a file descriptor. readarray Read lines from a file into an array variable. readcd Read/write compact disks. readelf Shows information about ELF (Executable and Linkable fomrat) files. readlink Display value of a symbolic link or canonical file name. readonly Mark functions and variables as read-only. reboot Restart the machine. reject Accept/reject print jobs sent to a specified destination. remsync Synchronize remote files over email. rename Rename one or more files. renice Change priority of active processes. repquota Report disk usage and quotas for a specified filesystem. reset Reinitialize the terminal. resize2fs Used to resize ext2/ext3/ext4 file systems. restore Restore files from a backup created using dump. return Exit a shell function. rev Show contents of a file, reversing the order of characters in every line. rexec Remote execution client for exec server. rexecd Remote execution server. richtext View \"richtext\" on an ACSII terminal. rlogin Used to connect a local host system with a remote host. rlogind Acts as the server for rlogin. It facilitates remote login, and authentication based on privileged port numbers from trusted hosts. rm Removes specified files and directories (not by default). rmail Handle remote mail received via uucp. rmdir Used to remove empty directories. rmmod A program to remove modules from Linux kernel. rndc Name server control utility. Send command to a BIND DNS server over a TCP connection. rootflags Show/set flags for the kernel image. route Show/change IP routing table. routed A daemon, invoked at boot time, to manage internet routing tables. rpcgen An RPC protocol compiler. Parse a file written in the RPC language. rpcinfo Shows RPC information. Makes an RPC call to an RPC server and reports the findings. rpm A package manager for linux distributions. Originally developed for RedHat Linux. rsh Remote shell. Connects to a specified host and executes commands. rshd A daemon that acts as a server for rsh and rcp commands. rsync A versitile to for copying files remotely and locally. runlevel Shows previous and current SysV runlevel. rup Remote status display. Shows current system status for all or specified hosts on the local network. ruptime Shows uptime and login details of the machines on the local network. rusers Shows the list of the users logged-in to the host or on all machines on the local network. rusersd The rsuerd daemon acts as a server that responds to the queries from rsuers command. rwall Sends messages to all users on the local network. rwho Reports who is logged-in to the hosts on the local network. rwhod Acts as a server for rwho and ruptime commands. sane-find-scanner Find SCSI and USB scanner and determine their device files. scanadf Retrieve multiple images from a scanner equipped with an automatic document feeder (ADF). scanimage Read images from image aquistion devices (scanner or camera) and display on standard output in PNM (Portable aNyMap) format. scp Copy files between hosts on a network securely using SSH. screen A window manager that enables multiple pseudo-terminals with the help of ANSI/VT100 terminal emulation. script Used to make a typescript of everything displayed on the screen during a terminal session. sdiff Shows two files side-by-side and highlights the differences. sed Stream editor for filtering and transforming text (from a file or a pipe input). select Synchronous I/O multiplexing. sendmail It's a mail router or an MTA (Mail Transfer Agent). sendmail support can send a mail to one or more recepients using necessary protocols. sensors Shows the current readings of all sensor chips. seq Displays an incremental sequence of numbers from first to last. set Used to manipulate shell variables and functions. setfdprm Sets floppy disk parameters as provided by the user. setkeycodes Load kernel scancode-to-keycode mapping table entries. setleds Show/change LED light settings of the keyboard. setmetamode Define keyboard meta key handling. Without arguments, shows current meta key mode. setquota Set disk quotas for users and groups. setsid Run a program in a new session. setterm Set terminal attributes. sftp Secure File Transfer program. sh Command interpreter (shell) utility. sha1sum Compute and check 160-bit SHA1 checksum to verify file integrity. shift Shift positional parameters. shopt Shell options. showkey Examines codes sent by the keyboard displays them in printable form. showmount Shows information about NFS server mount on the host. shred Overwrite a file to hide its content (optionally delete it), making it harder to recover it. shutdown Power-off the machine. size Lists section size and the total size of a specified file. skill Send a signal to processes. slabtop Show kernel slab cache information in real-time. slattach Attack a network interface to a serial line. sleep Suspend execution for a specified amount of time (in seconds). slocate Display matches by searching filename databases. Takes ownership and file permission into consideration. snice Reset priority for processes. sort Sort lines of text files. source Run commands from a specified file. split Split a file into pieces of fixed size. ss Display socket statistics, similar to netstat. ssh An SSH client for logging in to a remote machine. It provides encrypted communication between the hosts. ssh-add Adds private key identities to the authentication agent. ssh-agent It holds private keys used for public key authentication. ssh-keygen It generates, manages, converts authentication keys for ssh. ssh-keyscan Gather ssh public keys. sshd Server for the ssh program. stat Display file or filesystem status. statd A daemon that listens for reboot notifications from other hosts, and manages the list of hosts to be notified when the local system reboots. strace Trace system calls and signals. strfile Create a random access file for storing strings. strings Search a specified file and prints any printable strings with at least four characters and followed by an unprintable character. strip Discard symbols from object files. stty Change and print terminal line settings. su Change user ID or become superuser. sudo Execute a command as superuser. sum Checksum and count the block in a file. suspend Suspend the execution of the current shell. swapoff Disable devices for paging and swapping. swapon Enable devices for paging and swapping. symlink Create a symbolic link to a file. sync Synchronize cached writes to persistent storage. sysctl Configure kernel parameters at runtime. sysklogd Linux system logging utilities. Provides syslogd and klogd functionalities. syslogd Read and log system messages to the system console and log files. tac Concatenate and print files in reverse order. Opposite of cat command. tail Show the last 10 lines of each specified file(s). tailf Follow the growth of a log file. (Deprecated command) talk A two-way screen-oriented communication utility that allows two user to exchange messages simulateneously. talkd A remote user communication server for <code>talk</code>. tar GNU version of the tar archiving utility. Used to store and extract multiple files from a single archive. taskset Set/retrieve a process's CPU affinity. tcpd Access control utility for internet services. tcpdump Dump traffic on network. Displays a description of the contents of packets on a network interface that match the boolean expression. tcpslice Extract pieces of tcpdump files or merge them. tee Read from standard input and write to standard output and files. telinit Change SysV runlevel. telnet Telnet protocol user interface. Used to interact with another host using telnet. telnetd A server for the telnet protocol. test Check file type and compare values. tftp User interface to the internet TFTP (Trivial File Transfer Protocol). tftpd TFTP server. time Run programs and summarize system resource usage. timeout Execute a command with a time limit. times Shows accumulated user and system times for the shell and it's child processes. tload Shows a graph of the current system load average to the specified tty. tmpwatch Recursively remove files and directories which haven't been accessed for the specified period of time. top Displays real-time view of processes running on the system. touch Change file access and modification times. tput Modify terminal-dependent capabilities, color, etc. tr Translate, squeeze, or delete characters from standard input and display on standard output. tracepath Traces path to a network host discovering MTU (Maximum Transmission Unit) along this path. traceroute Traces the route taken by the packets to reach the network host. trap Trap function responds to hardware signals. It defines and creates handlers to run when the shell receives signals. troff The troff processor of the groff text formatting system. TRUE Exit with a status code indicating success. tset Initialize terminal. tsort Perform topological sort. tty Display the filename of the terminal connected to standard input. tune2fs Adjust tunable filesystem parameters on ext2/ext3/ext4 filesystems. tunelp Set various parameters for the line printer devices. type Write a description for a command type. ul Underline text. ulimit Get and set user limits for the calling process. umask Set file mode creation mask. umount Unmount specified file systems. unalias Remove alias definitions for specified alias names. uname Show system information. uncompress Uncompress the files compressed with the compress command. unexpand Convert spaces to tabs for a specified file. unicode_start Put keyboard and console in Unicode mode. unicode_stop Revert keyboard and console from Unicode mode. uniq Report or omit repeating lines. units Convert units from one scalar to another. unrar Extract files from a RAR archive. unset Remove variable or function names. unshar Unpack shell archive scripts. until Execute command until a given condition is true. uptime Tell how long the system has been running. useradd Create a new user or update default user information. userdel Delete a user account and related files. usermod Modify a user account. users Show the list of active users on the machine. usleep Suspend execution for microsecond intervals. uudecode Decode a binary file. uuencode Encode a binary file. uuidgen Created a new UUID (Universally Unique Identifier) table. vdir Same as <code>ls -l -b</code>. Verbosely list directory contents. vi A text editor utility. vidmode Set the video mode for a kernel image. Displays current mode value without arguments. Alternative: rdev -v vim Vi Improved, a text-based editor which is a successor to vi. vmstat Shows information about processes, memory, paging, block IO, traps, disks, and CPU activity. volname Returns volume name for a device formatted with an ISO-9660 filesystem. For example, CD-ROM. w Show who is logged-on and what they're doing. wait Waits for a specified process ID(s) to terminate and returns the termination status. wall Display a message on the terminals all the users who are currently logged-in. warnquota Send mail to the users who've exceeded their disk quota soft limit. watch Runs commands repeatedly until interrupted and shows their output and errors. wc Print newline, word, and byte count for each of the specified files. wget A non-interactive file download utility. whatis Display one line manual page descriptions. whereis Locate the binary, source, and man page files for a command. which For a given command, lists the pathnames for the files which would be executed when the command runs. while Conditionally execute commands (while loop). who Shows who is logged on. whoami Displays the username tied to the current effective user ID. whois Looks for an object in a WHOIS database write Display a message on other user's terminal. xargs Runs a command using initial arguments and then reads remaining arguments from standard input. xdg-open Used to open a file or URL in an application preferred by the user. xinetd Extended internet services daemon. Works similar to inetd. xz Compress/ Decompress .xz and .lzma files. yacc Yet Another Compiler Compiler, a GNU Project parser generator. yes Repeatedly output a line with a specified string(s) until killed. ypbind A daemon that helps client processes to connect to an NIS server. ypcat Shows the NIS map (or database) for the specified MapName parameter. ypinit Sets up NIS maps on an NIS server. ypmatch Shows values for specified keys from an NIS map. yppasswd Change NIS login password. yppasswdd Acts as a server for the yppasswd command. Receives and executes requests. yppoll Shows the ID number or version of NIS map currently used on the NIS server. yppush Forces slave NIS servers to copy updated NIS maps. ypserv A daemon activated at system startup. It looks for information in local NIS maps. ypset Point a client (running ypbind) to a specifc server (running ypserv). yptest Calls various functions to check the configuration of NIS services. ypwhich Shows the hostname for NIS server or master server for a given map. ypxfr Transfers NIS server map from server to a local host. zcat Used to compress/uncompress files. Similar to gzip zcmp Compare compressed files. zdiff Compare compressed files line by line. zdump Displays time for the timezone mentioned. zforce Adds .gz extension to all gzipped files. zgrep Performs grep on compressed files. zic Creates time conversion information files using the specified input files. zip A file compression and packaging utility. zless Displays information of a compressed file (using less command) on the terminal one screen at a time. zmore Displays output of a compressed file (using more command) on the terminal one page at a time. znew Recompress .z files to .gz. files."},{"location":"operating-systems/linux/commands/disk-fs-management/disk-management/","title":"Disk Management","text":"<ul> <li><code>df</code> List disks, size, used and available space</li> <li><code>df -h|--human-readable</code> List disks, size, used and available space in a human readable format</li> <li><code>du</code> List current directory, subdirectories and file sizes</li> <li><code>du /foo/bar</code> List specified directory, subdirectories and file sizes</li> <li><code>du -h|--human-readable</code> List current directory, subdirectories and file sizes in a human readable format</li> <li><code>du -d|--max-depth</code> List current directory, subdirectories and file sizes within the max depth</li> <li><code>du -d 0</code> List current directory size</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/","title":"Directory Structure","text":""},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#unix-system-resources-usr","title":"Unix System Resources <code>/usr</code>","text":""},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#binary-files","title":"Binary Files","text":""},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#usrbin","title":"<code>usr/bin</code>","text":"<ul> <li>contains binaries and executables that are essential to the entire os</li> <li>run these form the command line</li> <li><code>ls</code>, <code>gzip</code>, <code>curl</code></li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#usrsbin","title":"<code>/usr/sbin</code>","text":"<ul> <li>contain system binaries that can only be run by the root (super) user</li> <li><code>mount</code> <code>deluser</code></li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#usrlibexec","title":"<code>/usr/libexec</code>","text":"<ul> <li>The <code>libexec</code> directory on Unix-like systems, including Linux, is a standard directory used for storing system-specific, architecture-dependent executable files that are meant to be used internally by other programs or system services.</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#libraries","title":"Libraries","text":""},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#usrlib","title":"<code>/usr/lib</code>","text":"<ul> <li>contains shared libraries (also called shared objects <code>.so</code>)</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#usrlib32","title":"<code>/usr/lib32</code>","text":"<ul> <li>contains 32 bit shared library files</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#usrlibx32","title":"<code>/usr/libx32</code>","text":"<ul> <li>The x32 ABI is a hybrid of 64-bit and 32-bit ABIs, designed to take advantage of the larger register set of 64-bit processors while using 32-bit pointers to reduce memory consumption.</li> <li>The <code>libx32</code> directory contains libraries compiled specifically for this ABI.</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#usrlib64","title":"<code>/usr/lib64</code>","text":"<ul> <li>contains 64 bit shared libraries files</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#header-files-usrinclude","title":"Header Files <code>/usr/include</code>","text":"<ul> <li>contains header files for standard c and c++ libraries</li> <li>contain header files for system</li> <li>also development libraries installed have their header files here</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#shared-files-usrshare","title":"Shared Files <code>/usr/share</code>","text":"<p>The <code>/usr/share</code> directory is another important system directory on Linux and Unix-like operating systems. It contains architecture-independent (meaning not specific to a particular CPU architecture) data that is shared across different systems. This data is typically read-only and includes files that are not executables or libraries but are used by applications for various purposes.</p> <p>Here are some key points about the <code>/usr/share</code> directory:</p> <ul> <li> <p>Shared Data: The primary purpose of <code>/usr/share</code> is to store data that can be shared among multiple users and applications. This data may include documentation, images, icons, wallpapers, sound files, themes, fonts, and more.</p> </li> <li> <p>Application Resources: Many applications store their shared resources in the <code>/usr/share</code> directory. This allows multiple applications to use the same data, reducing duplication and saving disk space.</p> </li> <li> <p>System-Wide Configuration: Some system-wide configuration files may also be placed in <code>/usr/share.</code> However, it's important to note that configuration files that might be modified by users or administrators are usually stored in other directories like <code>/etc</code> or <code>/usr/local/etc.</code></p> </li> <li> <p>Architecture-Independent: The contents of <code>/usr/share</code> are architecture-independent, meaning they are the same across systems with different CPU architectures.</p> </li> <li> <p>Subdirectories: The <code>/usr/share</code> directory is organized into various subdirectories, each containing specific types of data. For example:</p> <ul> <li><code>/usr/share/doc</code>: Contains documentation files for various installed packages.</li> <li><code>/usr/share/icons</code>: Holds icon sets used by desktop environments.</li> <li><code>/usr/share/fonts</code>: Stores fonts available for the system.</li> <li><code>/usr/share/sounds</code>: Contains sound files used by applications or the system.</li> <li><code>/usr/share/application</code>: Contains desktop entry files used by applications or the system.</li> <li><code>/usr/share/man</code>: Contains manual entry files used by applications or the system.</li> </ul> </li> <li> <p>Read-Only: By convention, the data in <code>/usr/share</code> is read-only, meaning it should not be modified by users or applications.</p> </li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#locally-managed-resources-usrlocal","title":"Locally Managed Resources <code>/usr/local</code>","text":"<p>Nearly same copy of <code>/usr</code> so that the locally build and installed software don't conflict with the one installed by the system package manager.</p>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#configuration-files-etc","title":"Configuration Files <code>/etc</code>","text":"<ul> <li> <p>Configuration Files: The primary purpose of the <code>/etc</code> directory is to store configuration files for various system components and applications. These files control the behavior and settings of the operating system, services, daemons, and installed software.</p> </li> <li> <p>System-wide Configuration: Most of the files in <code>/etc</code> affect the entire system and apply to all users. The configuration files stored here are typically edited and maintained by system administrators.</p> </li> <li> <p>Access Restrictions: Many files in <code>/etc</code> have restricted permissions, allowing only privileged users (usually the root user) to read and modify them. This is to prevent unauthorized users from tampering with critical system settings.</p> <ul> <li>Like <code>imagemagick</code> image manipulation utility have security configuration permissions here.</li> </ul> </li> <li> <p><code>/etc/passwd</code> Contains user account information.</p> </li> <li><code>/etc/group</code> Stores group information for users.</li> <li><code>/etc/hosts</code> Maps IP addresses to hostnames for local DNS resolution.</li> <li><code>/etc/hostname</code> Stores the system's hostname.</li> <li><code>/etc/resolv.conf</code> Configures DNS name resolution settings.</li> <li><code>/etc/fstab</code> Defines filesystems and their mount options.</li> <li><code>/etc/ssh/sshd_config</code> Configuration file for the OpenSSH server.</li> <li><code>/etc/sudoers</code> Configures sudo privileges for users.</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#user-directories-home-root","title":"User Directories <code>/home</code> <code>/root</code>","text":""},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#normal-users-home","title":"Normal Users <code>/home</code>","text":"<ul> <li>On Linux and Unix-like operating systems, the <code>/home</code> directory is a central location where user home directories are typically stored.</li> <li>Each user on the system is assigned a home directory within <code>/home</code>, and it serves as the user's private workspace.</li> </ul> <p>Each user directory has following directories:</p> <ul> <li><code>.config</code> - User Configuration files, <code>$XDG_CONFIG_HOME</code></li> <li><code>.local</code><ul> <li><code>bin</code> - user binaries</li> <li><code>lib</code> - user library files</li> <li><code>libexec</code> - user binaries used by other binaries</li> <li><code>etc</code> - configuration</li> <li><code>include</code> - include files for binaries</li> <li><code>share</code> - Data shared across applications, <code>$XDG_DATA_HOME</code><ul> <li><code>application</code> - desktop entry files, override <code>/usr/share/application</code></li> <li><code>fonts</code> - fonts</li> </ul> </li> </ul> </li> <li><code>.cache</code> - temporary files, <code>$XDG_CACHE_HOME</code></li> <li><code>.icons</code></li> <li><code>.themes</code></li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#root-user-root","title":"Root User <code>/root</code>","text":"<ul> <li>On Linux and Unix-like operating systems, the <code>/root</code> directory is the home directory for the superuser or root user. The root user is the administrative user with full privileges and unrestricted access to all commands and system resources.</li> <li>The <code>/root</code> directory serves as the root user's private workspace, similar to how the <code>/home</code> directory is used for regular users.</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#boot-information-boot","title":"Boot Information <code>/boot</code>","text":"<ul> <li>files needed to boot the system</li> <li>like the linux kernel</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#virtual-directories-dev-proc-sys","title":"Virtual Directories <code>/dev</code> <code>/proc</code> <code>/sys</code>","text":""},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#devices-dev","title":"Devices <code>/dev</code>","text":"<p>On Linux and Unix-like operating systems, the <code>/dev</code> directory is a special directory that contains device files. These device files serve as interfaces to access various hardware devices, pseudo-devices, and other kernel-related functionalities. Unlike regular files that store data on disk, device files provide a way to communicate with and control hardware devices and drivers.</p> <p>Here are some key points about the <code>/dev</code> directory:</p> <ul> <li> <p>Device Files: Device files are used to represent and interact with hardware devices connected to the system. They are part of the special <code>device file system</code> that allows users and applications to communicate with devices using simple read and write operations on these files.</p> </li> <li> <p>Types of Device Files: There are two main types of device files in the <code>/dev</code> directory:</p> <ul> <li>Character Devices: Represent devices that transfer data character-by-character, such as keyboards, mice, terminals, and serial ports. They are accessed through character device files, usually denoted by the letter <code>c</code> in the permissions listing (e.g., <code>/dev/tty</code> for a terminal device).</li> <li>Block Devices: Represent devices that transfer data in fixed-size blocks, such as hard drives and solid-state drives. They are accessed through block device files, typically denoted by the letter <code>b</code> in the permissions listing (e.g., <code>/dev/sda</code> for a hard drive).</li> </ul> </li> <li> <p>Pseudo-Devices: Some device files in <code>/dev</code> are pseudo-devices, which do not correspond to physical hardware but provide kernel interfaces for various functionalities. Examples include <code>/dev/null</code> (a null device that discards data), <code>/dev/zero</code> (a device that generates null bytes), and <code>/dev/random</code> (a device that generates random data).</p> </li> <li> <p>Device Nodes: Device files are also known as <code>device nodes.</code> Each device file has a unique major and minor number combination that identifies the corresponding device driver to which it belongs. When a program accesses a device file, the kernel routes the request to the appropriate driver based on these numbers.</p> </li> <li> <p>Permissions: Access to device files is controlled by permissions. Typically, only privileged users (root) or users belonging to specific groups are allowed to access certain device files, especially those that have significant control over hardware.</p> </li> <li> <p>Dynamically Created: Device files in <code>/dev</code> are often dynamically created and managed by the system. When devices are detected or drivers are loaded, the associated device files are automatically created.</p> </li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#system-sys","title":"System <code>/sys</code>","text":"<ul> <li>On Linux systems, the <code>/sys</code> directory is a virtual filesystem that provides an interface for interacting with the kernel and accessing information about devices, drivers, and other kernel parameters. Similar to <code>/proc,</code> the files and directories within <code>/sys</code> are not actual physical files on disk but instead represent kernel objects and attributes.</li> <li>Device and Driver Information: The main purpose of the <code>/sys</code> directory is to expose information related to devices and drivers in the system. Each device and driver has its directory structure under <code>/sys</code>, providing details about its current state and configuration.</li> <li>Kernel Parameters: In addition to device and driver information, <code>/sys</code> also exposes various kernel parameters that can be read or modified to control the behavior of the kernel and its components.</li> <li>File Hierarchy: The <code>/sys</code> directory is organized hierarchically, with subdirectories representing different aspects of the system, such as:<ul> <li><code>/sys/devices</code> Contains information about devices in the system, including their drivers and connection topology.</li> <li><code>/sys/class</code> Provides a view of devices organized by their class, such as block devices, network devices, etc.</li> <li><code>/sys/module</code> Shows information about kernel modules that are currently loaded.</li> <li><code>/sys/fs</code> Contains filesystem-related information, such as mount points and file system features.</li> <li><code>/sys/kernel</code> Contains various kernel-related information and parameters.</li> <li>and more.</li> </ul> </li> <li>Read and Write Access: Some files and directories in <code>/sys</code> can be read to obtain information, while others can be written to modify kernel parameters or trigger specific actions.</li> <li>Debugging and Troubleshooting: <code>/sys</code> is valuable for debugging and troubleshooting purposes, as it provides insights into how devices and drivers are interacting with the kernel.</li> <li>Virtual Filesystem: The data exposed in <code>/sys</code> is dynamically generated by the kernel when accessed, and any changes made to its attributes are directly reflected in the kernel's behavior.</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#processes-proc","title":"Processes <code>/proc</code>","text":"<p>On Linux and Unix-like operating systems, the <code>/proc</code> directory is a virtual filesystem that provides a window into the kernel and processes running on the system. It does not represent physical files stored on disk but rather exposes information and statistics about the running system as a series of files and directories.</p> <p>Here are some key points about the <code>/proc</code> directory:</p> <ul> <li>Pseudofile System: The <code>/proc</code> directory is often referred to as a <code>pseudofile system</code> because the files and directories it contains do not correspond to actual files on disk. Instead, they are dynamically generated by the kernel on-the-fly when accessed and provide a real-time view of various system and process-related information.</li> <li>System and Process Information: Inside <code>/proc,</code> you can find various numerical directories (named after process IDs) and files that provide information about the system, such as:<ul> <li><code>/proc/cpuinfo</code>: Information about the CPU and its capabilities.</li> <li><code>/proc/meminfo</code>: Memory-related statistics, including total memory, free memory, etc.</li> <li><code>/proc/version</code>: Kernel version information.</li> <li><code>/proc/sys</code>: Contains tunable kernel parameters that control various aspects of the system's behavior.</li> <li><code>/proc/loadavg</code>: Current system load averages.</li> <li><code>/proc/uptime</code>: Uptime of the system.</li> <li><code>/proc/net</code>: Information about network-related statistics.</li> <li>and more.</li> </ul> </li> <li>Process Information: The <code>/proc</code> directory also contains numerical subdirectories named after process IDs (PIDs). Each PID directory contains information about a specific running process, including its command line, status, memory usage, file descriptors, and more. For example:<ul> <li><code>/proc/&lt;PID&gt;/status</code>: Provides status information for the process with the specified PID.</li> <li><code>/proc/&lt;PID&gt;/cmdline</code>: Contains the command-line arguments used to launch the process.</li> </ul> </li> <li> <p>Interface with the Kernel: The <code>/proc</code> filesystem provides an interface through which user-space programs and utilities can communicate with the kernel and access various system statistics and process information in real-time.</p> </li> <li> <p>Security: While <code>/proc</code> can be very useful for monitoring and understanding system behavior, it also exposes sensitive information. Access to certain files and directories in <code>/proc</code> might be restricted to prevent unauthorized access to system data.</p> </li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#variable-data-var","title":"Variable Data <code>/var</code>","text":"<p>On Linux and Unix-like operating systems, the <code>/var</code> directory is used to store variable data\u2014data that is expected to change frequently during the system's operation. This data is not critical for the system to function, but it is essential for various services, applications, and system logs.</p> <p>Here are some key points about the <code>/var</code> directory:</p> <ul> <li>Variable Data: The name <code>/var</code> stands for <code>variable,</code> as the data stored in this directory is expected to change in size and content over time. Unlike directories such as <code>/bin</code> and <code>/lib,</code> which contain essential executables and libraries, the data in <code>/var</code> is not static and can be modified during the system's runtime.</li> <li>System Logs <code>/var/log</code>: One of the primary uses of <code>/var</code> is to store system logs and log files generated by various services and applications. For example, system logs kept in <code>/var/log</code> include messages from the kernel, system daemons, application logs, and user-specific logs.</li> <li>Spool and Cache Data <code>/var/spool</code> <code>/var/cache</code>: The <code>/var/spool</code> directory is used for storing spool data related to print jobs, mail queues, and other services that use spooling. Additionally, the <code>/var/cache</code> directory contains cache data that can be regenerated or discarded without affecting the system's functionality.</li> <li>Temporary Files: Some temporary files generated by programs during their execution might be stored in <code>/var/tmp</code> or <code>/var/run</code> directories. These files are usually cleared upon system restart and are not intended to persist across reboots.</li> <li>Application Data: Various applications store variable data, such as configuration files, databases, and user-specific files, in subdirectories within <code>/var.</code></li> <li>State Information <code>/var/lib</code>: The <code>/var/lib</code> directory is used to store state information for applications, including runtime data and databases.</li> <li>User Mailboxes<code>/var/mail</code>: On some systems, user mailboxes can be found in the <code>/var/mail</code> directory.</li> <li>Website data <code>/var/www</code>: <code>/var/www</code> directory is a common location used on Linux and Unix-like operating systems to store website data, files, and web applications for serving content via web servers. It is the default directory where web documents and resources are kept on many web server configurations.</li> </ul> <p>It's important to note that the contents of <code>/var</code> are expected to change frequently, so it is not suitable for mounting on a read-only file system. Also, it is essential to manage log rotation and purging of logs regularly to prevent <code>/var</code> from consuming excessive disk space.</p>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#temporary-files-tmp","title":"Temporary Files <code>/tmp</code>","text":"<ul> <li>The <code>/tmp</code> directory on Linux and Unix-like operating systems is a location designated for temporary files. It is used to store data that is only needed temporarily and is expected to be deleted or cleared regularly, usually upon system reboot.</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#temporary-filesystem-run","title":"Temporary Filesystem <code>/run</code>","text":"<p>The <code>/run</code> directory on Linux and Unix-like operating systems is a temporary filesystem that holds temporary files and runtime data for various system services. It is typically mounted as a <code>tmpfs</code> (a memory-based filesystem) during the system's boot process, allowing it to reside in RAM and providing fast access to frequently changing data.</p> <p>Here are some key points about the <code>/run</code> directory:</p> <ul> <li> <p>Runtime Data: The primary purpose of the <code>/run</code> directory is to store runtime data that needs to be accessed or updated frequently during the system's operation. This includes data related to running services and daemons.</p> </li> <li> <p>/var/run Symlink: Historically, runtime data was often stored in the <code>/var/run</code> directory. However, to support the use of <code>tmpfs</code> and improve performance, many modern systems use the <code>/run</code> directory as a separate mount point or symlink it to <code>/var/run.</code></p> </li> <li> <p>Early Boot Process: The <code>/run</code> directory is created early during the system's boot process and is often used by various init systems and services to store their runtime data.</p> </li> <li> <p>Lock Files and PIDs: The <code>/run</code> directory is commonly used to store lock files (<code>*.lock</code>) that indicate the exclusiveness of certain resources and process ID (PID) files that contain the process IDs of running daemons.</p> </li> <li> <p>Application Sockets: Some applications use the <code>/run</code> directory to create Unix domain sockets, which are used for inter-process communication on the local system.</p> </li> <li> <p>Stateless Systems: On stateless systems or systems with volatile root filesystems (e.g., some embedded systems), the <code>/run</code> directory may be particularly useful since it doesn't rely on persistent storage.</p> </li> <li> <p>Cleaning on Boot: Like <code>/tmp,</code> the <code>/run</code> directory may be cleared upon system reboot to ensure that transient data does not persist across reboots.</p> </li> </ul> <p>The use of <code>/run</code> has become more prevalent to accommodate modern system designs, such as those used in containerized environments or systems with dynamic configurations. It allows for faster access to runtime data by utilizing memory instead of disk storage and is particularly useful for systems that may not have persistent storage or have limited space available.</p>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#mounting-devices-media-mnt","title":"Mounting Devices <code>/media</code> <code>/mnt</code>","text":""},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#media","title":"<code>/media</code>","text":"<p>On Linux and Unix-like operating systems, the <code>/media</code> directory is a standard location used as a mount point for removable media devices, such as USB drives, optical discs (CDs/DVDs), external hard drives, and other storage devices. When you connect a removable media device to the system, it is automatically mounted to a subdirectory within <code>/media.</code></p> <p>Here are some key points about the <code>/media</code> directory:</p> <ul> <li> <p>Mount Point for Removable Media: The primary purpose of the <code>/media</code> directory is to serve as a convenient mount point for accessing the content of removable media devices. When a removable media device is plugged in or inserted, the system automatically mounts it under <code>/media,</code> making its contents accessible to users.</p> </li> <li> <p>Dynamic Mounting: The directories inside <code>/media</code> are created dynamically by the system when a removable media device is connected. Each device usually gets its own subdirectory based on the device's label or unique identifier.</p> </li> <li> <p>Naming Convention: The subdirectories within <code>/media</code> are typically named after the label or identifier of the connected device. For example, a USB drive with the label <code>USB_DRIVE</code> might be mounted at <code>/media/USB_DRIVE.</code></p> </li> <li> <p>Manual Mounting: In some cases, users may also manually mount removable media devices to <code>/media</code> or a subdirectory within it using the <code>mount</code> command. However, modern desktop environments often handle automatic mounting of removable media.</p> </li> <li> <p>Unmounting: When the user finishes using the removable media, they can safely unmount it from the system. On some systems, this can be done by simply ejecting or safely removing the device through the desktop environment's interface. Alternatively, users can use the <code>umount</code> command to unmount the device.</p> </li> <li> <p>Other Media Directories: Some Linux distributions use different directories for automounting removable media, such as <code>/mnt</code> or <code>/run/media/&lt;user&gt;.</code> However, <code>/media</code> is the most common location on many systems.</p> </li> </ul> <p>It's important to note that the <code>/media</code> directory is primarily meant for temporarily accessing the content of removable media devices. If you need to permanently mount a filesystem or network share, it's more appropriate to use the <code>/mnt</code> directory or other appropriate locations depending on the specific use case and system configuration.</p>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#mnt","title":"<code>/mnt</code>","text":"<p>On Linux and Unix-like operating systems, the <code>/mnt</code> directory is a standard location intended for temporarily mounting filesystems, network shares, or other storage devices that are not automatically mounted by the system. Unlike the <code>/media</code> directory, which is used for automatically mounting removable media devices, the <code>/mnt</code> directory is typically used for manual or one-time mounts.</p> <p>Here are some key points about the <code>/mnt</code> directory:</p> <ul> <li> <p>Manual Mount Point: The primary purpose of the <code>/mnt</code> directory is to provide a location where system administrators or users can manually mount additional filesystems or network shares when needed. It is a general-purpose mount point that can be used for various types of storage devices.</p> </li> <li> <p>Temporary Mounts: The <code>/mnt</code> directory is suitable for temporary mounts or one-time access to other filesystems or network shares. It is often used for mounting external storage devices, secondary hard drives, NFS shares, or other file systems that are not part of the default system setup.</p> </li> <li> <p>No Automatic Mounting: Unlike the <code>/media</code> directory, which is often managed by the system for automatic mounting of removable media, the <code>/mnt</code> directory does not automatically mount any devices or filesystems. Users or administrators need to manually mount devices to this location.</p> </li> <li> <p>Mount Subdirectories: To avoid cluttering the <code>/mnt</code> directory with multiple mounts, it is common to create subdirectories within <code>/mnt</code> for each mounted device or network share. For example, <code>/mnt/usb</code> might be used for a mounted USB drive, <code>/mnt/nfs</code> for an NFS share, and so on.</p> </li> <li> <p>Temporary Usage: It's essential to remember that any filesystems or network shares mounted under <code>/mnt</code> are not automatically mounted on subsequent system reboots. These mounts are typically temporary and need to be manually configured or re-mounted as needed.</p> </li> <li> <p>System Administrators' Convenience: The <code>/mnt</code> directory is particularly useful for system administrators who need to access and manage various storage devices and network shares during system maintenance or troubleshooting.</p> </li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#third-party-software-opt","title":"Third Party Software <code>/opt</code>","text":"<p>The <code>/opt</code> directory on Linux and Unix-like operating systems is a standard directory used for the installation of optional or third-party software packages. Unlike the system directories such as <code>/usr</code> and <code>/bin,</code> which are typically managed by the operating system's package manager and contain essential system files, the <code>/opt</code> directory is reserved for software that is not part of the core operating system distribution.</p> <p>Here are some key points about the <code>/opt</code> directory:</p> <ul> <li> <p>Optional Software: The primary purpose of the <code>/opt</code> directory is to provide a location for installing optional software packages that are not part of the base system's distribution. These could be third-party applications or software packages that are installed separately from the operating system's standard packages.</p> </li> <li> <p>Self-Contained Packages: Software installed in <code>/opt</code> is typically self-contained within its own subdirectory. This helps prevent conflicts with other software installed on the system and keeps the optional packages isolated from the system's core components.</p> </li> <li> <p>Directory Structure: Each software package installed in <code>/opt</code> typically has its own subdirectory within <code>/opt.</code> For example, if you install a software package called <code>exampleapp,</code> it might have its files stored in <code>/opt/exampleapp.</code></p> </li> <li> <p>Binaries and Libraries: The <code>/opt</code> directory may contain executable binaries, libraries, documentation, configuration files, and other assets specific to the software package being installed.</p> </li> <li> <p>No Package Manager Management: Unlike the <code>/usr</code> and <code>/bin</code> directories, which are managed by the package manager and its package database, software installed in <code>/opt</code> is not typically managed by the system's package manager. The responsibility for installation, updates, and removal lies with the software itself or with additional package management tools provided by the software vendor.</p> </li> <li> <p>Multiple Versions: In some cases, software packages may support multiple versions installed side by side in separate <code>/opt</code> subdirectories to allow users to choose which version to use.</p> </li> <li> <p>Avoid Overwriting System Files: One of the main reasons for using <code>/opt</code> is to avoid overwriting or conflicting with system files, as software installed in <code>/opt</code> is isolated from the rest of the system.</p> </li> </ul> <p>It's essential to check the documentation of the software you're installing to confirm the intended usage of the <code>/opt</code> directory. Some software may use <code>/opt</code> for optional components, while others may have different conventions for installation.</p>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#services-data-srv","title":"Services Data <code>/srv</code>","text":"<p>On Linux and Unix-like operating systems, the <code>/srv</code> directory is used to store data and files related to services provided by the system. It is intended to hold data specific to individual services, such as websites, FTP servers, or other network services.</p> <p>Here are some key points about the <code>/srv</code> directory:</p> <ul> <li> <p>Service Data: The primary purpose of the <code>/srv</code> directory is to provide a location for storing data and files related to services provided by the system. It is often used to store data generated or used by network services, web servers, and other applications that offer services to users or clients.</p> </li> <li> <p>Service-Specific Subdirectories: Within the <code>/srv</code> directory, subdirectories are created for individual services. For example, a web server might have its website data in <code>/srv/www,</code> an FTP server might use <code>/srv/ftp,</code> and so on.</p> </li> <li> <p>Separation from System Data: The <code>/srv</code> directory is separate from the system directories like <code>/usr,</code> <code>/bin,</code> and <code>/etc,</code> which contain essential system files and executables. Storing service data in <code>/srv</code> helps keep the system's essential components separate from the data associated with specific services.</p> </li> <li> <p>Filesystem Hierarchy Standard: The use of <code>/srv</code> is encouraged by the Filesystem Hierarchy Standard (FHS), a set of guidelines that govern the organization of files and directories on Unix-like systems.</p> </li> <li> <p>Service Data Persistence: The data stored in <code>/srv</code> is usually meant to be persistent, as opposed to the <code>/tmp</code> directory, which holds temporary data that may be cleared upon system reboot.</p> </li> <li> <p>Service Configuration: While the actual configuration files for services are typically stored in other locations (e.g., <code>/etc</code>), the data managed by the services, such as websites, databases, or user uploads, may be stored in <code>/srv.</code></p> </li> <li> <p>Custom Setup: The use of <code>/srv</code> is not required, and some systems may have different conventions for organizing service data. Some administrators may prefer to store service data in other directories like <code>/var</code> or <code>/home,</code> depending on their preferences or system requirements.</p> </li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/directory-structure/#recovery-lostfound","title":"Recovery <code>/lost+found</code>","text":"<p>The \"/lost+found\" directory is a special directory found on Unix-like file systems, including Linux. It is used to store recovered files and directories that are found during the file system's consistency check, which is typically performed after an unexpected system shutdown or a file system error.</p> <p>Here are some key points about the \"/lost+found\" directory:</p> <ul> <li> <p>File System Consistency Check: File systems like ext2, ext3, ext4, and others have built-in mechanisms to check the consistency of the file system's data structures and metadata. These checks are performed regularly or during system startup to ensure the file system remains in a consistent state.</p> </li> <li> <p>Recovered Files: During a file system consistency check, if the system detects orphaned files or directories (i.e., files or directories that are not associated with any parent directory), it attempts to recover them and places them in the \"/lost+found\" directory.</p> </li> <li> <p>Unique Directory: The \"/lost+found\" directory is unique because it is automatically created at the root of the file system when the file system is formatted. It is owned by the root user and typically only accessible by the root user.</p> </li> <li> <p>Human Intervention: Usually, the file system consistency check is automatically performed by the system, and users do not need to interact with the \"/lost+found\" directory directly. However, in the case of serious file system errors or corruption, the system may prompt the administrator to manually intervene and review the recovered files.</p> </li> <li> <p>Ownership and Permissions: Since the \"/lost+found\" directory is owned by the root user, regular users do not have permissions to create or delete files directly in this directory. Only the root user or an administrator with root privileges can interact with the \"/lost+found\" directory.</p> </li> <li> <p>Recovery Process: If you encounter files or directories in the \"/lost+found\" directory, it's essential to carefully review them before taking any action. Some of the files may have lost their original filenames or metadata, making it necessary to determine their identities and restore them to their proper locations manually.</p> </li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/file-management/","title":"File Management","text":"<p>Everything is file in linux.</p> <ul> <li><code>ordinary file</code> - binary/text file</li> <li><code>directory file</code> - contains filename and there inode number</li> <li> <p><code>device file</code></p> </li> <li> <p><code>pwd</code> - print working directory</p> </li> <li> <p><code>cd</code> - change directory</p> </li> <li><code>cd ~</code> - change to the home directory</li> <li> <p><code>cd -</code> - cahnge to previous directory(used for toggeling)</p> </li> <li> <p><code>mkdir</code> - make directory</p> </li> <li> <p><code>rmdir</code> - remove directory(empty directory)</p> </li> <li> <p><code>ls</code> - list files</p> <ul> <li>Options and flags::</li> <li><code>-x</code> multicolumnar output</li> <li><code>-F</code> mark executables with *, directories with /, symbolic links with @</li> <li><code>-a</code> show all files</li> <li><code>-R</code> recursive list</li> <li><code>-r</code> sort in reverse</li> <li><code>-l</code> long listing</li> <li><code>-t</code> sort by last modification time</li> <li><code>-u</code> sort by last access time</li> <li><code>-i</code> display inode number</li> <li><code>ls -l</code> - time of last file modification</li> <li><code>ls -lu</code> - time of last access</li> <li><code>ls -lc</code> - time of last inode modification</li> </ul> </li> <li> <p><code>mv</code> - moving files</p> </li> <li><code>rsync</code> - sync files<ul> <li><code>rsync -z|--compress -v|--verbose /foo /bar</code> Copy directory, overwrites destination</li> <li><code>rsync --ignore-existing -a|--archive-a|--archive -z|--compress -v|--verbose /foo /bar</code> Copy directory, without overwriting destination</li> <li><code>rsync -avz /foo username@hostname:/bar</code> Copy local directory to remote directory</li> <li><code>rsync -avz username@hostname:/foo /bar</code>  Copy remote directory to local directory</li> </ul> </li> <li><code>rm</code> - remove files</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/file-management/#ln-hard-links-and-soft-links","title":"<code>ln</code> Hard-links and Soft-links","text":"<ul> <li><code>inode number</code> - the unique number given to a file</li> <li><code>ls -i</code> - show inode number</li> <li>Making hard links<ul> <li><code>ln filename new-filename</code> - make hardlink</li> </ul> </li> <li>Making soft links (symbolic links)<ul> <li><code>ln -s file new-filename</code> - make softlinks</li> </ul> </li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/file-management/#umask","title":"umask","text":"<p>umask is the number that is subtracted from the default file and directory permissions, to set permission for newly created directory or file. The default permission for directory is 777 and for file is 666. This cannot be changed.</p> <ul> <li><code>umask</code> - show default umask</li> <li><code>umask no</code> - set umask as no</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/file-management/#touch","title":"touch","text":"<ul> <li><code>touch filename</code> - creates a new file</li> <li><code>touch [MMDDhhmm] file</code> - modifies the last time of modification</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/file-management/#handling-text-files","title":"handling text files","text":"<ul> <li><code>cat [filename]</code> - displays the contents of the file</li> <li><code>cat -v [filename]</code> - displays the non-graphical characters also</li> <li><code>cat -n [filename]</code> - displays the line number also</li> <li><code>cp [file] [destination]</code> - copy file to the destination</li> <li><code>cp -i</code> - interactive copy(provides warning while overwriring)</li> <li><code>cp -R</code> - recursive copy</li> <li><code>mv</code> - renames a files</li> <li><code>rm</code> - remove a file</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/file-management/#archiving-and-compressing","title":"archiving and compressing","text":"<p>gzip to compress tar to archive and zip to archive and compress</p>"},{"location":"operating-systems/linux/commands/file-directory-management/file-management/#gzip-and-gnuzip-gz","title":"gzip and gnuzip (.gz)","text":"<ul> <li><code>gzip -d [filename]</code> - decompress the file</li> <li><code>gzip -r [filename]</code> - recursive compression</li> <li><code>gzip -l [filename]</code> - list the compression ratio</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/file-management/#tar-archival-program-tar-file","title":"tar - archival program (.tar file)","text":"<ul> <li><code>-c</code> create an archive</li> <li><code>-x</code> extract the archive</li> <li><code>-t</code> view the archive</li> <li><code>-x</code> extract the files form archive</li> <li><code>-t</code> displays files in archive</li> <li><code>-f</code> arch - specifies the archive arch</li> <li><code>-v</code> verbose mode</li> </ul> <p><code>tar -cvf [archive name] [files to add...]</code></p>"},{"location":"operating-systems/linux/commands/file-directory-management/file-management/#now-to-compress-the-file-use-gzip","title":"now to compress the file use gzip","text":"<p><code>gzip [archive name]</code> - creates a tar-gzipped file</p> <ul> <li><code>tar -xvf [archive name]</code> - extracts the archive</li> <li><code>tar -tvf [archive name]</code> - view the archive</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/file-management/#doing-archiving-and-compression-together-z","title":"Doing archiving and compression together (-z)","text":"<p><code>tar -cvzf [compressed archive]</code> - create a compressed archive</p>"},{"location":"operating-systems/linux/commands/file-directory-management/file-management/#zip-and-unzip-compressing-and-archiving-together-zip","title":"zip AND unzip - compressing and archiving together (.zip)","text":"<ul> <li><code>zip [archive name] [input files]</code> - creates an archive</li> <li><code>zip -r [archive name]</code> - recursive compressing</li> <li><code>unzip [archive name]</code> - unzips an archive</li> <li><code>unzip -v [archive name]</code> - viewing detaill about the compressed file</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/file-management/#basic-file-attributes","title":"Basic File Attributes","text":"<p><code>ls -l</code> - long listing files The columns are as folows::</p> <ul> <li>File Type and Permissions</li> <li>Links - the number of links associated with that particular file</li> <li>Ownership - owner of the file</li> <li>Group Ownership</li> <li>File Size in bytes</li> <li>Last Modification Date</li> <li>Filename</li> </ul> <p>File Ownership</p> <ul> <li>The user-id (UID)</li> <li>The group-id (GID)</li> </ul> <p><code>id</code> - view UID and GID associated with particular user</p>"},{"location":"operating-systems/linux/commands/file-directory-management/file-management/#file-permissions","title":"File Permissions","text":"<pre><code>|0|1|2|3|4|5|6|7|8|9|\n|d|r|w|x|r|w|x|r|w|x|\n</code></pre> <ul> <li><code>r</code> - read permission</li> <li><code>w</code> - write permission</li> <li> <p><code>x</code> - execute permission</p> </li> <li> <p><code>0</code> - defines the type of file d for directory, - for normal file</p> </li> <li><code>1,2,3</code> - permission granted to owner of file</li> <li><code>4,5,6</code> - permission granted to group owner of file</li> <li><code>7,8,9</code> - permission granted to other users</li> </ul> <p><code>chmod</code> - used to change the permissions of the file</p> <p><code>chmod [category][operation][permission] [filename...]</code></p> <ul> <li>category - u-user, g-group, o-other, a-all(ugo)</li> <li>operation - + assign permission, - remove permission, = absolute permission</li> <li>permission - r, w, x</li> </ul> <p><code>chmod [ocatal-code] [filename...]</code> - used to assign absolute permission</p> <pre><code>        a        b        c\n|0|  |4 2 1|  |4 2 1|  |4 2 1|\n|d|  |r|w|x|  |r|w|x|  |r|w|x|\n</code></pre> <p><code>octal-code</code> - a three digit code for permission of the file</p> <p>How directory permission affect the file permissions:</p> <ul> <li>if the directory has write permission for all than they can delete the files in the directory</li> </ul> <p>Changing file ownership</p> <ul> <li><code>chown [options] [owner] [files...]</code> - change owner of file to owner</li> <li><code>chgrp [group] [files...]</code> - change group of file to group</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/file-management/#file-permissions_1","title":"file permissions","text":"<ul> <li><code>chmod 777 file</code> this octal notation don't show all the flags</li> <li> <p><code>chmod 0777 file</code> this is the actual octal notation</p> </li> <li> <p>there are three flags more</p> </li> <li>1 - <code>setuid</code> - <code>s</code></li> <li>2 - <code>setgid</code> - <code>s</code></li> <li>4 - <code>stickybit</code> - <code>t</code></li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/file-management/#setuid","title":"<code>setuid</code>","text":"<ul> <li><code>setuid</code><ul> <li>is a permission bit flag</li> <li>when <code>setuid</code> flag is set, it allows user to run an executable with the permission of the file owner</li> </ul> </li> <li>Do <code>ls /bin/passwd</code>, you will see the permission as <code>.rwsr-xr-x</code><ul> <li>that means the <code>setuid</code> bit is set</li> <li>and other users can also run this file with the permission of the root user</li> </ul> </li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/file-management/#demonstration","title":"Demonstration","text":"<ul> <li>shell script can't use the <code>setuid</code>, if you use <code>#!/bin/bash</code> at start of   script, bash throws the root power if the effective uid don't match the uid.</li> <li>here is a c program</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(){\n    setuid(0); //sets the uid to that of the root user\n    system(\"ls -lh /srv/setuid/private\")\n    return 0;\n}\n</code></pre>"},{"location":"operating-systems/linux/commands/file-directory-management/file-management/#how-to-setuid","title":"how to <code>setuid</code>","text":"<ul> <li><code>chmod u+s file_name</code> - <code>+s</code> for the setuid bit</li> <li><code>chmod 4755 filename</code> - <code>4</code> for the setuid bit</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/file-management/#setgid","title":"<code>setgid</code>","text":"<ul> <li> <p>enabling <code>setgid</code> for a directory sets the   group of all new files created in directory to be   the group of the directory</p> </li> <li> <p><code>chmod g+s filename</code> - set the <code>setgid</code> flag</p> </li> <li><code>chmod g-s filename</code> - set the <code>setgid</code> flag</li> <li><code>chmod 2770 filename</code> - set the <code>setgid</code> flag, <code>2</code> indicates <code>setgid</code></li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/file-management/#stickybit","title":"<code>stickybit</code>","text":"<ul> <li>when this bit is set for a directory only the owner of files can   remove the files in that directory</li> <li>when set for a directory, the file will be not remove from swap   for fast startup times (now not used due to fast secondary storage).</li> <li><code>chmod 4770 filename</code> - set the sticky bit <code>4</code> indicates the sticky bit</li> <li><code>chmod +t filename</code> - set the sticky bit</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/file-management/#acl-access-control-list","title":"ACL - access control list","text":"<ul> <li>should be turned on to be used, some don't even support it</li> <li>files with ACL permission turned one show a <code>+</code> in the <code>ls -lh</code></li> <li><code>getfacl</code> - get file ACL</li> <li><code>setfacl</code> - set file ACL<ul> <li><code>-m</code> indicates modify</li> <li><code>setfacl -m g:group_name:permissions files</code><ul> <li>sets the group permissions for the files</li> </ul> </li> <li><code>setfacl -Rm g:group_name:permissions directory</code><ul> <li>sets the permissions recursively to all files inside a directory</li> </ul> </li> <li><code>setfacl -dm g:group_name:permissions files</code><ul> <li>sets the default permissions for the directory</li> <li>it will apply to the newly created files too</li> </ul> </li> <li><code>-k</code> remove default ACL permissions</li> <li><code>-x</code> remove ACL permissions</li> <li><code>-Rx</code> remove ACL permissions recursively</li> <li><code>-Rb</code> remove all ACL permissions recursively</li> </ul> </li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/finding-files/","title":"Finding Files on System","text":""},{"location":"operating-systems/linux/commands/file-directory-management/finding-files/#find","title":"find","text":"<p>It recursively examines a directory tree to look fo files matching sone criteria, and then take some action on them.</p> <p><code>find [path-list] [selection-criteria-action]</code></p> <p>This is how <code>find</code> operates:</p> <ul> <li>First it recursively examines all files in the directories specified in <code>path-list</code></li> <li>It then matches each file for one more selection criteria</li> <li>Finally, it takes some action on those selected files.</li> </ul> <p>The <code>path-list</code> comprised of one or more directories seperated by whitespace.</p> <pre><code>find / -name a.out -print #find a file named a.out in / directory and the print its name\nfind . -name \"*.c\" -print #find all c file in current directory and then print its name\n</code></pre>"},{"location":"operating-systems/linux/commands/file-directory-management/finding-files/#selection-criteria","title":"Selection Criteria","text":"<ul> <li><code>-inum number</code>    - for inode number</li> <li><code>-type x</code> x       - can be f(ordinary file), d(directory file), l(symbolic link)</li> <li><code>-perm nnn</code>       - having permission <code>nnn</code></li> <li><code>-links n</code>        - having n links</li> <li><code>-user uname</code>     - owned by user uname</li> <li><code>-group gname</code>    - owned by group gname</li> <li><code>-size +x[c]</code>     - if size is greater than x blocks or more than c characters</li> <li><code>-mtime -x</code>       - if modified less than x days</li> <li><code>-mewer flname</code>   - if modified after flname</li> <li><code>-mmin -x</code>        - if modified in less than x minutes</li> <li><code>-atime +x</code>       - if accessed in more than x days</li> <li><code>-amin +x</code>        - if accessed in more than x minutes</li> <li><code>-name flname</code>    - having name flname</li> <li><code>-iname flname</code>   - having name flname but this is case senstive</li> <li><code>-follow</code>         - after following a symbolic link</li> <li><code>-prune</code>          - but don't descend directory if matched</li> <li><code>-mount</code>          - but don't look in other file system</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/finding-files/#action","title":"Action","text":"<ul> <li><code>-print</code>          - print the name of the file</li> <li><code>-ls</code>             - executes ls -lids on the following files</li> <li><code>-exec cmd {} \\</code>  - executes linux command cmd</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/finding-files/#operators","title":"Operators","text":"<p>Used to join two selection criteria or negate the one we have.</p> <ul> <li><code>!</code> the not operator</li> <li><code>-o</code> the or operator</li> <li><code>-a</code> the and operator</li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/finding-files/#examples","title":"Examples","text":"<ul> <li><code>find .. -type f -not \\( -name \"*Windows*\" -o -name \"*.md\" -o -name \"*.txt\" -o -name \"LICENSE\" \\)</code></li> <li><code>find . -type f -not -path \"./.git/*\" -a -not -path \"./.vscode/*\"</code></li> </ul>"},{"location":"operating-systems/linux/commands/file-directory-management/finding-files/#locate-locate-files","title":"<code>locate</code> - locate files","text":"<p><code>locate</code> find files using indexing</p> <ul> <li><code>updatedb</code> Update the index</li> <li><code>locate foo.txt</code> Find a file</li> <li><code>locate --ignore-case</code> Find a file and ignore case</li> <li><code>locate f*.txt</code> Find a text file starting with 'f'</li> </ul>"},{"location":"operating-systems/linux/commands/file-permissions-ownership/group-management/","title":"Groups Management","text":""},{"location":"operating-systems/linux/commands/file-permissions-ownership/group-management/#groupadd","title":"<code>groupadd</code>","text":"<ul> <li><code>groupadd group_name</code> - create new group <code>group_name</code></li> </ul>"},{"location":"operating-systems/linux/commands/file-permissions-ownership/group-management/#groupdel","title":"<code>groupdel</code>","text":"<ul> <li><code>groupdel group_name</code> - delete group <code>group_name</code></li> </ul>"},{"location":"operating-systems/linux/commands/file-permissions-ownership/group-management/#groupmod","title":"<code>groupmod</code>","text":"<ul> <li>modify some group</li> <li><code>groupmod --new-name new_group_name group_name</code> - rename <code>group_name</code> to <code>new_group_name</code></li> </ul>"},{"location":"operating-systems/linux/commands/file-permissions-ownership/group-management/#etcgroup-file","title":"<code>/etc/group</code> file","text":"<ul> <li>contains the information related to the groups on the system</li> <li>format - <code>group_name:password:gid:members</code></li> </ul>"},{"location":"operating-systems/linux/commands/file-permissions-ownership/group-management/#etcgshadow","title":"<code>/etc/gshadow</code>","text":"<ul> <li>contains the information regarding the passwords for the groups</li> <li>format - <code>group_name:password:group_administrator:group_members</code></li> </ul>"},{"location":"operating-systems/linux/commands/file-permissions-ownership/group-management/#gpasswd","title":"<code>gpasswd</code>","text":"<ul> <li>add new member to a group</li> <li><code>gpasswd -A member_name group_name</code><ul> <li>add member <code>member_name</code> to group <code>group_name</code> as group administrator</li> <li><code>-A</code> signifies group administrator</li> </ul> </li> <li><code>usermod -aG group_name user_name</code><ul> <li><code>-a</code> append</li> <li><code>-G</code> group</li> <li>add user <code>user_name</code> to group <code>group_name</code> as a member</li> </ul> </li> <li><code>usermod -a group_name user_name</code><ul> <li>add <code>group_name</code> group to the use <code>user_name</code></li> </ul> </li> </ul>"},{"location":"operating-systems/linux/commands/file-permissions-ownership/group-management/#power-of-group-administrators","title":"power of group administrators","text":"<p>Suppose a user is group administrator of <code>group1</code> then</p> <ul> <li><code>gpasswd -a user_name group1</code> - add <code>user_name</code> to <code>group1</code></li> <li><code>getent group group1</code> - get the details of the group <code>group1</code></li> <li><code>gpasswd -d user_name group1</code> - remove <code>user_name</code> from <code>group1</code></li> <li><code>gpasswd group1</code> - set the password for the <code>group1</code></li> </ul>"},{"location":"operating-systems/linux/commands/file-permissions-ownership/group-management/#newgrp","title":"<code>newgrp</code>","text":"<ul> <li>temporarily add a group to your user</li> <li><code>newgrp grpname</code></li> <li>you will need group password for this</li> </ul>"},{"location":"operating-systems/linux/commands/file-permissions-ownership/sudo/","title":"sudo","text":"<p><code>sudo</code> lets you execute a command as another user, usually <code>root</code>.</p> <ul> <li>for some user to use <code>sudo</code> add that user to <code>sudo</code>   (in debian based distros) or <code>wheel</code> (in rel, arch)group.   Use <code>usermod -aG sudo username</code> for adding username to sudo group.   For this change to take place use must re-login.</li> <li>or you can do <code>sudo visudo</code><ul> <li>under <code># User privilege specification</code> add you user as</li> <li><code>%username ALL=(ALL:ALL) ALL</code></li> <li>now <code>username</code> can use sudo without re-logging in.</li> </ul> </li> </ul>"},{"location":"operating-systems/linux/commands/file-permissions-ownership/user-management/","title":"Users Management","text":""},{"location":"operating-systems/linux/commands/file-permissions-ownership/user-management/#adduser","title":"<code>adduser</code>","text":"<ul> <li> <p>add a new user, automatically creating a</p> <ul> <li>home directory</li> <li>choosing login shell</li> <li>creating a password</li> </ul> </li> <li> <p><code>id user</code> - show all the groups user is in and its uid and pid</p> </li> <li><code>su - user</code> - switch user to the <code>user</code>, usually used for users with login disabled</li> </ul>"},{"location":"operating-systems/linux/commands/file-permissions-ownership/user-management/#useradd","title":"<code>useradd</code>","text":"<ul> <li>usually used to create account for services like <code>mysql</code> <code>systemd</code></li> <li>adds new user but with no home directory<ul> <li><code>useradd -m username</code> - adds new user and also creates a home directory</li> </ul> </li> </ul>"},{"location":"operating-systems/linux/commands/file-permissions-ownership/user-management/#etcpasswd-file","title":"<code>/etc/passwd</code> file","text":"<ul> <li>contains information about all the users on system</li> <li>format - <code>user_name:password:UID:GID:other_information:home_directory:login_shell</code><ul> <li>sample - <code>totoro:x:1000:1001:totoro:/home/totoro:/usr/bin/zsh</code><ul> <li><code>user_name</code> - <code>totoro</code></li> <li><code>password</code> - <code>x</code> means encrypted</li> <li><code>UID</code> - <code>1001</code></li> <li><code>GID</code> - <code>1001</code></li> <li><code>other_information</code> - <code>totoro</code></li> <li><code>home_directory</code> - <code>/home/totoro</code></li> <li><code>login_shell</code> - <code>/usr/bin/zsh</code></li> </ul> </li> </ul> </li> <li><code>other_information</code> - this usually contains the description about the user.   On older machine it contained contact info, room number, which we are asked when we use <code>adduser</code></li> <li><code>login_shell</code> - for user account which is unusable it is set to <code>/usr/sbin/nologin</code> or <code>/bin/false</code></li> <li><code>password</code> - <code>x</code> in password indicates encrypted password, which is present in the shadow file</li> </ul>"},{"location":"operating-systems/linux/commands/file-permissions-ownership/user-management/#etcshadow-file","title":"<code>/etc/shadow</code> file","text":"<ul> <li>contains the information about the password used by the users</li> <li>format - <code>user:$encryption$salt$hash:lastPasswordChange:min:max:warning:disable:expire:reserved_field</code><ul> <li><code>user</code> - name of the user</li> <li><code>password</code> - compromise of <code>$encryption$salt$hash</code><ul> <li><code>*</code> or <code>!</code> indicates that we cannot login in the system with that user</li> <li><code>encryption</code> - type of encryption used<ul> <li><code>$1</code> - md5</li> <li><code>$2</code> blowfish</li> <li><code>$2a</code> eksBlowfish</li> <li><code>$5</code> sha-256</li> <li><code>$6</code> SHA-512</li> </ul> </li> <li><code>$salt</code> - salt value added while encryption</li> <li><code>$hash</code> - the encrypted password</li> </ul> </li> <li><code>lastPasswordChange</code> - date in unix format (no of days since Jan 1, 1970) of last password change</li> <li><code>min</code> - min number of days before you can change your password, <code>0</code> means can be changed now</li> <li><code>max</code> - max number of days till which your password is valid, <code>9999</code> means will never expire</li> <li><code>warning</code> - no of days before expiration to show the password expiration warning</li> <li><code>disable</code> - no of days after expiration that the account will be disabled in, nothing means never disable</li> <li><code>expire</code> - date when account will expire</li> <li><code>reserved_field</code></li> <li>sample<ul> <li><code>totoro:$6$g3NynZLzI5A.7UcE$2vSxbUvSasdfsG4:18898:0:99999:7:::</code><ul> <li><code>totoro</code> - user</li> <li><code>$6</code> - indicates sha512 encryption</li> <li><code>$g3NynZLzI5A.7UcE</code> - salt</li> <li><code>$2vSxbUvSasdfsG4</code> - hash, will be longer, here used as example</li> <li><code>18898</code> - last date when account was changed</li> <li><code>0</code> - password can be changed now</li> <li><code>9999</code> - password will never expire</li> <li><code>7</code> - expiration warning will appear 7 days before expiration</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"operating-systems/linux/commands/file-permissions-ownership/user-management/#passwd","title":"<code>passwd</code>","text":"<ul> <li>change password for the current user</li> <li><code>passwd username</code> - change password for the <code>username</code></li> </ul>"},{"location":"operating-systems/linux/commands/file-permissions-ownership/user-management/#chage","title":"<code>chage</code>","text":"<ul> <li>change the account expiration date, and other expiration dates mentioned in the <code>/etc/shadow</code> file</li> </ul>"},{"location":"operating-systems/linux/commands/file-permissions-ownership/user-management/#getent","title":"<code>getent</code>","text":"<ul> <li>get entries from Name Service Switch libraries</li> <li>config file in <code>/etc/nsswitch.conf</code></li> </ul>"},{"location":"operating-systems/linux/commands/file-permissions-ownership/user-management/#usermod","title":"<code>usermod</code>","text":"<ul> <li>modify the entires of <code>/etc/passwd</code> file</li> <li>change the home directory, login shell, UID, etc.</li> </ul>"},{"location":"operating-systems/linux/commands/file-permissions-ownership/user-management/#finger","title":"<code>finger</code>","text":"<ul> <li>show the description of the user form the <code>/etc/passwd</code> file</li> </ul>"},{"location":"operating-systems/linux/commands/file-permissions-ownership/user-management/#chfn","title":"<code>chfn</code>","text":"<ul> <li>change finger</li> <li>changes the description of the user form <code>/etc/passwd</code> file</li> </ul>"},{"location":"operating-systems/linux/commands/file-permissions-ownership/user-management/#how-to-force-user-to-change-password-when-the-login-next-time","title":"how to force user to change password when the login next time","text":"<ul> <li><code>passwd --expire [uid]</code></li> <li><code>sudo chage --lastday 1970-01-01 [uid]</code></li> <li><code>sudo chage --lastday 0 [uid]</code></li> </ul> <p><code>[uid]</code> user will asked to change their password next time they login.</p>"},{"location":"operating-systems/linux/commands/file-permissions-ownership/user-management/#lock-a-user-account","title":"Lock a user account","text":"<ul> <li><code>usermod -L [uid]</code> - lock, place a <code>!</code> in the password field of the uid in <code>/etc/passwd</code> file</li> <li><code>usermod -L [uid]</code> - unlock</li> <li><code>passwd -l [uid]</code></li> <li><code>chage -E0 [uid]</code></li> </ul>"},{"location":"operating-systems/linux/commands/file-permissions-ownership/user-management/#last","title":"<code>last</code>","text":"<ul> <li>prints the last time the user logged in the system</li> </ul>"},{"location":"operating-systems/linux/commands/file-permissions-ownership/user-management/#deluser","title":"<code>deluser</code>","text":"<ul> <li><code>deluser user</code> - delete the user</li> <li><code>deluser --remove-home user</code> - delete user and remove the home directory</li> </ul>"},{"location":"operating-systems/linux/commands/manual/","title":"Manual","text":""},{"location":"operating-systems/linux/commands/manual/#basics","title":"Basics","text":"<ul> <li>Using manual</li> <li>File Management</li> <li>Finding Files</li> <li>Date-time management</li> <li>Device Management</li> <li>Disk Management</li> <li>User Management</li> <li>Group Management</li> <li>Process Management</li> <li>Memory Management</li> <li>Network Management</li> <li>Text Files Manipulation</li> <li>System Information</li> <li>Shells</li> <li>Directory Structure</li> </ul>"},{"location":"operating-systems/linux/commands/manual/getting-help/","title":"Manual","text":"<ul> <li><code>man [command]</code> - get help on the command</li> <li><code>man [section-number] [command]</code> - get help on the command in the section given by * section-number</li> <li><code>man -k [keyword]</code> - find the commands which deals with the keyword</li> <li><code>man -f [command]</code> - one line help on the command</li> <li><code>apropos</code> is same as the <code>man -k</code> command - used to find commands associated with a particular * keyword</li> <li><code>whatis</code> is same as the <code>man -f</code> command - used to ge one line help on a command</li> </ul>"},{"location":"operating-systems/linux/commands/networking/network-management/","title":"Network Management","text":""},{"location":"operating-systems/linux/commands/networking/network-management/#http-request","title":"HTTP request","text":"<ul> <li><code>curl https://example.com</code>  Return response body</li> <li><code>curl -i|--include https://example.com</code>  Include status code and HTTP headers</li> <li><code>curl -L|--location https://example.com</code>  Follow redirects</li> <li><code>curl -O|--remote-name foo.txt https://example.com</code>  Output to a text file</li> <li><code>curl -H|--header \"User-Agent: Foo\" https://example.com</code>  Add a HTTP header</li> <li><code>curl -X|--request POST -H \"Content-Type: application/json\" -d|--data '{\"foo\":\"bar\"}' https://example.com</code>  POST JSON</li> <li> <p><code>curl -X POST -H --data-urlencode foo=\"bar\" http://example.com</code> POST URL Form Encoded</p> </li> <li> <p><code>wget &lt;https://example.com/file.txt&gt;</code> Download a file to the current directory</p> </li> <li><code>wget -O|--output-document foo.txt &lt;https://example.com/file.txt&gt;</code> Output to a file with the specified name</li> </ul>"},{"location":"operating-systems/linux/commands/networking/network-management/#network-troubleshooting","title":"Network Troubleshooting","text":"<ul> <li><code>ping example.com</code> Send multiple ping requests using the ICMP protocol</li> <li> <p><code>ping -c 10 -i 5 example.com</code> Make 10 attempts, 5 seconds apart</p> </li> <li> <p><code>ip addr</code> List IP addresses on the system</p> </li> <li> <p><code>ip route show</code> Show IP addresses to router</p> </li> <li> <p><code>curl ifconfig.me</code> Obtain external IP address</p> </li> <li> <p><code>netstat -i|--interfaces</code> List all network interfaces and in/out usage</p> </li> <li> <p><code>netstat -l|--listening</code> List all open ports</p> </li> <li> <p><code>traceroute example.com</code> List all servers the network traffic goes through</p> </li> <li> <p><code>mtr -w|--report-wide example.com</code> Continually list all servers the network traffic goes through</p> </li> <li> <p><code>mtr -r|--report -w|--report-wide -c|--report-cycles 100 example.com</code> Output a report that lists network traffic 100 times</p> </li> <li> <p><code>nmap 0.0.0.0</code> Scan for the 1000 most common open ports on localhost</p> </li> <li><code>nmap 0.0.0.0 -p1-65535</code> Scan for open ports on localhost between 1 and 65535</li> <li><code>nmap 192.168.4.3</code> Scan for the 1000 most common open ports on a remote IP address</li> <li><code>nmap -sP 192.168.1.1/24</code> Discover all machines on the network by ping'ing them</li> </ul>"},{"location":"operating-systems/linux/commands/networking/network-management/#dns","title":"DNS","text":"<ul> <li><code>dig example.com</code> Show query information of a domain A records</li> <li><code>dig -4 example.com</code> Show IPv4 A information</li> <li><code>dig -6 example.com</code> Show IPv6 AAA information</li> <li><code>dig example.com @nameserver</code> Show query of a specific nameserver</li> <li> <p><code>dig example.com -p 123</code> Show query of a specific port number</p> </li> <li> <p><code>cat /etc/resolv.conf</code> <code>resolv.conf</code> lists nameservers</p> </li> </ul>"},{"location":"operating-systems/linux/commands/process-management/process-management/","title":"Process Management","text":"<p>Every process have</p> <ul> <li>PID - process-id</li> <li>PPID - parent process id</li> </ul> <p>The shell process:</p> <ul> <li><code>$$</code> - current shell PID</li> </ul>"},{"location":"operating-systems/linux/commands/process-management/process-management/#ps-process-status","title":"ps - process status","text":"<ul> <li><code>ps</code> - process status</li> <li><code>ps -f</code> Full listing showing PPID of each process</li> <li><code>ps [-e|-A]</code> All processes including user and system processes</li> <li><code>ps -u</code> usr Processes of user usr only</li> <li><code>ps -a</code> Processes of all users exxcluding processes not associated with terminal</li> <li><code>ps -l</code> Long listing showing memory related information</li> <li><code>ps -t</code> term Processes running on terminal</li> </ul>"},{"location":"operating-systems/linux/commands/process-management/process-management/#mechanism-of-process-creation","title":"Mechanism of process creation","text":"<ul> <li><code>fork</code> - system call fork is called to fork current process. PID changed.</li> <li><code>exec</code> - the memory image is overwritten with new program.</li> <li><code>wait</code> - the parent executed wait system call for the child process to complete.</li> </ul> <p>If the parent process dies earlier then the child process is called orphan. They are the adopted by init and killed. Processes whose parent don't wait for their death moves to zombies state. It remains in this state until there parent picks up there exit code. Deamons are the process who don't have a controlling terminal. Usually are system processes.</p>"},{"location":"operating-systems/linux/commands/process-management/process-management/#types-of-commands","title":"Types of commands","text":"<ul> <li>External commands - <code>cat</code>, <code>ls</code></li> <li>Shell scripts</li> <li>Internal commands - <code>cd</code>, <code>echo</code> - can change the directory</li> </ul>"},{"location":"operating-systems/linux/commands/process-management/process-management/#running-jobs-in-background","title":"Running jobs in background","text":"<ul> <li><code>&amp;</code> - using the <code>&amp;</code> symbol at the end of a command. The process runs in the background.</li> </ul> <p>e.g. <code>sort emp.list &amp;</code></p> <ul> <li><code>nohup</code> - no hangup - command to deattach a process from a terminal</li> </ul> <p>e.g. <code>nohup sort emp.list &amp;</code></p>"},{"location":"operating-systems/linux/commands/process-management/process-management/#job-execution-with-low-priority","title":"Job execution with low priority","text":"<ul> <li><code>nice command</code> - runs a job at low priority</li> <li><code>nice -n [level] command</code> - increase the priority of the command by level which can be between 1 to 19.</li> </ul>"},{"location":"operating-systems/linux/commands/process-management/process-management/#killing-process-with-signals","title":"Killing process with signals","text":"<ul> <li><code>kill PID</code> - kills a process</li> <li><code>kill -s [Signal] PID</code> - send the signal to the process<ul> <li>Signal can be as folows:</li> <li><code>KILL</code></li> <li><code>kill -l</code> - list all the signals</li> </ul> </li> </ul>"},{"location":"operating-systems/linux/commands/process-management/process-management/#job-control","title":"Job Control","text":"<p>A job is the name given to a group of processes.</p> <p>Easiest way to create a job is by using pipeline of two or more commands.</p> <ul> <li><code>bg</code> - relegate a job to the background</li> <li><code>fg</code> - bring it back to the foreground</li> <li><code>jobs</code> - list the active jobs</li> <li><code>Ctrl+z</code> - suspend a foreground job</li> <li><code>kill</code> - kill a job</li> </ul>"},{"location":"operating-systems/linux/commands/process-management/process-management/#use","title":"Use","text":"<ul> <li>suspend the job - use <code>Ctrl+z</code></li> <li>use <code>bg</code> to send it to background</li> <li>now your job is running in the background</li> <li>list the jobs using <code>jobs</code></li> <li>to bring a job to foreground use the <code>fg</code> command</li> </ul> <p>fg</p> <ul> <li><code>fg %</code> - brings first job to foreground</li> <li><code>fg %sort</code> - brings sort job to foreground</li> <li><code>bg %?perm</code> - send to the background job containing string <code>perm</code></li> <li> <p><code>bg %2</code> - sends second job to background</p> </li> <li> <p><code>stty -a</code> - see the current terminal config</p> <ul> <li><code>start = ^q; stop = ^s; susp = ^z; dsusp = ^y;</code></li> </ul> </li> <li> <p><code>lsof</code> - List all open files and the process using them</p> </li> <li> <p><code>lsof -itcp:4000</code> - Return the process listening on port 4000</p> </li> <li> <p><code>jobs</code> List all background jobs</p> </li> <li><code>jobs -p</code> List all background jobs with their PID</li> </ul>"},{"location":"operating-systems/linux/commands/process-management/process-management/#process-priority","title":"Process priority","text":"<ul> <li><code>nice -n -20 foo</code> Change process priority by name</li> <li><code>renice 20 PID</code> Change process priority by PID</li> <li><code>ps -o ni PID</code> Return the process priority of PID</li> </ul>"},{"location":"operating-systems/linux/commands/process-management/process-management/#stopping-processes","title":"Stopping Processes","text":"<ul> <li><code>CTRL+C</code> Kill a process running in the foreground</li> <li><code>kill PID</code> Shut down process by PID gracefully. Sends TERM signal.</li> <li><code>kill -9 PID</code> Force shut down of process by PID. Sends <code>SIGKILL</code> signal.</li> <li><code>pkill foo</code> Shut down process by name gracefully. Sends TERM signal.</li> <li><code>pkill -9 foo</code> force shut down process by name. Sends <code>SIGKILL</code> signal.</li> <li><code>killall foo</code> Kill all process with the specified name gracefully.</li> </ul>"},{"location":"operating-systems/linux/commands/process-management/process-management/#scheduling-tasks","title":"Scheduling Tasks","text":"* * * * * Minute Hour Day of month Month Day of the week <ul> <li><code>crontab -l</code> List cron tab</li> <li><code>crontab -e</code> Edit cron tab in Vim</li> <li><code>crontab /path/crontab</code> Load cron tab from a file</li> <li> <p><code>crontab -l &gt; /path/crontab</code> Save cron tab to a file</p> </li> <li> <p><code>* * * * * foo</code> Run foo every minute</p> </li> <li><code>*/15 * * * * foo</code> Run foo every 15 minutes</li> <li><code>0 * * * * foo</code> Run foo every hour</li> <li><code>15 6 * * * foo</code> Run foo daily at 6:15 AM</li> <li><code>44 4 * * 5 foo</code> Run foo every Friday at 4:44 AM</li> <li><code>0 0 1 * * foo</code> Run foo at midnight on the first of the month</li> <li> <p><code>0 0 1 1 * foo</code> Run foo at midnight on the first of the year</p> </li> <li> <p><code>at -l</code> List scheduled tasks</p> </li> <li><code>at -c 1</code> Show task with ID 1</li> <li><code>at -r 1</code> Remove task with ID 1</li> <li><code>at now + 2 minutes</code> Create a task in Vim to execute in 2 minutes</li> <li><code>at 12:34 PM next month</code> Create a task in Vim to execute at 12:34 PM next month</li> <li><code>at tomorrow</code> Create a task in Vim to execute tomorrow</li> </ul>"},{"location":"operating-systems/linux/commands/shell-customization/dircolors/","title":"dircolors","text":"<ul> <li> <p>color setup for ls</p> </li> <li> <p><code>- dircolors --print-database</code></p> </li> </ul>"},{"location":"operating-systems/linux/commands/shell-customization/tmux/","title":"tmux","text":"<ul> <li><code>tmux</code> Start a new session (CTRL-b + d to detach)</li> <li><code>tmux ls</code> List all sessions</li> <li><code>tmux attach -t 0</code> Reattach to a session</li> <li><code>screen</code> Start a new session (CTRL-a + d to detach)</li> <li><code>screen -ls</code> List all sessions</li> <li><code>screen -R 31166</code> Reattach to a session</li> <li><code>exit</code> Exit a session</li> </ul>"},{"location":"operating-systems/linux/commands/system-information/date-time-management/","title":"Date Time Management","text":"<ul> <li><code>cal [ [month] year]</code> -  print the calender of the giver year and month</li> <li><code>date</code> - displays current date</li> <li> <p><code>date +[symbol]</code> - display the current date particular part given by the symbol     <code>[d - day] [y - year] [H,M,S - hour, minute, second] [D - date] [T - time]</code></p> </li> <li> <p><code>timedatectl list-timezones</code> - list time zones</p> </li> <li><code>sudo timedatectl set-timezone Australia/Sydney</code> select a time zone</li> </ul>"},{"location":"operating-systems/linux/commands/system-information/device-management/","title":"Device Management","text":"<ul> <li><code>lsusb</code> - List USB devices</li> <li><code>lspci</code> - List PCI hardware</li> <li><code>lshw</code> - List all hardware</li> <li><code>lsmod</code> - list loaded kernel modules</li> </ul>"},{"location":"operating-systems/linux/commands/system-information/libinput/","title":"libinput","text":"<ul> <li>libinput</li> <li>libinput-gestures -d</li> <li>libinput-gestures-setup desktop</li> <li>libinput-gestures-setup service</li> <li>libinput-gestures-setup start</li> <li>libinput-gestures-setup stop</li> <li> <p>libinput list-devices</p> </li> <li> <p>xinput</p> </li> <li>xinput list</li> <li>xinput list-props</li> <li>xinput list-props \"MSFT0001:01 06CB:CD5F Touchpad\"</li> <li>xinput list-props \"MSFT0001:01 06CB:CD5F Touchpad\"</li> <li>xinput list-props \"MSFT0001:01 06CB:CD5F Touchpad\" | grep Cap</li> <li>xinput set-prop \"MSFT0001:01 06CB:CD5F Touchpad\" 325 1</li> <li>xinput set-props \"MSFT0001:01 06CB:CD5F Touchpad\" 325 1</li> </ul>"},{"location":"operating-systems/linux/commands/system-information/locale/","title":"locale","text":"<ul> <li><code>locale</code></li> <li><code>locale -a</code></li> <li><code>locale -all</code></li> </ul>"},{"location":"operating-systems/linux/commands/system-information/system-info/","title":"System Information","text":"<ul> <li><code>uname</code> - show OS</li> <li><code>uname -s</code> Print kernel name</li> <li><code>uname -r</code> Print kernel release</li> <li><code>uname -m</code> Print Architecture</li> <li><code>uname -o</code> Print Operating System</li> <li><code>uname -n</code> - show first letter of the domain</li> <li><code>uname -a</code> - show every details about the system</li> <li><code>sudo hostnamectl set-hostname mylittlecloudbox</code> changing hostname</li> </ul>"},{"location":"operating-systems/linux/commands/system-monitoring-performance/memory-management/","title":"Memory Management","text":"<ul> <li><code>free</code> Show memory usage</li> <li><code>free -h|--human</code> Show human readable memory usage</li> <li><code>free -h|--human --si</code> Show human readable memory usage in power of 1000 instead of 1024</li> <li><code>free -s|--seconds 5</code> Show memory usage and update continuously every five seconds</li> </ul>"},{"location":"operating-systems/linux/commands/textfu/fold/","title":"fold","text":"<p>Wrap the text to certain length</p> <ul> <li><code>fold -w 66 -s file.tex</code></li> </ul>"},{"location":"operating-systems/linux/commands/textfu/text-file-manipulation/","title":"Text Files Manipulation","text":""},{"location":"operating-systems/linux/commands/textfu/text-file-manipulation/#stdin","title":"stdin","text":"<p>main input stream, <code>&lt;</code></p>"},{"location":"operating-systems/linux/commands/textfu/text-file-manipulation/#stdout","title":"stdout","text":"<p>output stream - default display monitor, <code>&gt;</code></p>"},{"location":"operating-systems/linux/commands/textfu/text-file-manipulation/#stderr","title":"stderr","text":"<p>error stream - default display monitor, <code>2&gt;</code></p>"},{"location":"operating-systems/linux/commands/textfu/text-file-manipulation/#pipe-and-tee","title":"pipe and tee","text":"<p><code>|</code> send out of one to in of another, <code>tee</code> does'nt capture the stream, duplicates it</p>"},{"location":"operating-systems/linux/commands/textfu/text-file-manipulation/#env","title":"env","text":"<p>get the env variable list</p>"},{"location":"operating-systems/linux/commands/textfu/text-file-manipulation/#cut","title":"cut","text":"<p>simple tool, splits the output according to the given delimeter or according to the postion of the letter</p>"},{"location":"operating-systems/linux/commands/textfu/text-file-manipulation/#paste","title":"paste","text":"<p>similar to cat but for lines, you can concatenate every line and give a delimeter to seperate them</p>"},{"location":"operating-systems/linux/commands/textfu/text-file-manipulation/#head","title":"head","text":"<p>see the starting lines of a file, you can provide the no of lines you wanted to see</p>"},{"location":"operating-systems/linux/commands/textfu/text-file-manipulation/#tail","title":"tail","text":"<p>see the ending lines of a file, you can provide the number of lines you wanted to see</p>"},{"location":"operating-systems/linux/commands/textfu/text-file-manipulation/#expand-and-unexpand","title":"expand and unexpand","text":"<p>replace tabs with spaces, and spaces with tabs</p>"},{"location":"operating-systems/linux/commands/textfu/text-file-manipulation/#join-and-split","title":"join and split","text":"<p>join and spilit files based on some common column</p>"},{"location":"operating-systems/linux/commands/textfu/text-file-manipulation/#sort","title":"sort","text":"<p>sort a file, can be in reverse or in numerical order</p>"},{"location":"operating-systems/linux/commands/textfu/text-file-manipulation/#tr-translate","title":"tr (translate)","text":"<p>translate a set of characters into another characters, like uppercase to lowercase</p>"},{"location":"operating-systems/linux/commands/textfu/text-file-manipulation/#uniq-unique","title":"uniq (unique)","text":"<p>removes duplicate form files</p>"},{"location":"operating-systems/linux/commands/textfu/text-file-manipulation/#wc-and-nl","title":"wc and nl","text":"<p>count the number of words, character and lines in a file</p>"},{"location":"operating-systems/linux/commands/textfu/text-file-manipulation/#grep","title":"grep","text":"<ul> <li>Global regular expression and print</li> </ul> <p>find some words in the file, use of regex is also availiable</p>"},{"location":"operating-systems/linux/commands/textfu/text-file-manipulation/#sed","title":"sed","text":"<ul> <li>perl based command to extract text</li> <li><code>sed 's/this/that/g</code> - <code>s</code> means substitute, <code>this</code> with <code>that</code></li> <li><code>sed -i 's/this/that/g</code> - <code>s</code> means substitute, <code>this</code> with <code>that</code>, <code>-i</code> means inplace, so if you provide a file it will change that</li> </ul>"},{"location":"operating-systems/linux/commands/textfu/text-file-manipulation/#awk","title":"awk","text":"<ul> <li>mode advance</li> </ul>"},{"location":"operating-systems/linux/commands/textfu/text-file-manipulation/#regex-regular-expressions","title":"regex (regular expressions)","text":"<ul> <li>Simple regular expressions (also called basic regular expressions or BREs)</li> <li>are the most basic form of regular expressions. </li> <li>They are supported by most grep implementations and use a minimal set of characters and metacharacters. </li> <li>Some examples of simple regular expressions include abc, <code>[0-9]</code>, and <code>^a.*z$</code>.</li> <li>Extended regular expressions (also called EREs) </li> <li>are a slightly more powerful version of regular expressions. </li> <li>They add several additional metacharacters and allow the use of some backslashes as escape characters. </li> <li>Extended regular expressions are supported by grep with the <code>-E</code> option and by sed with the <code>-r</code> option. </li> <li>Some examples of extended regular expressions include <code>(abc|def)</code>, <code>\\d</code>, and <code>^a.*?z$</code>.</li> <li>Perl-compatible regular expressions (also called PCREs) </li> <li>are a more powerful version of regular expressions that are used by the Perl programming language. </li> <li>They support most of the features of EREs, as well as several additional features such as backreferences, lookaheads, and nested character classes.</li> <li>PCREs are supported by the pcregrep and pcre2grep commands, as well as by many programming languages and text processing tools. </li> <li>Some examples of PCREs include <code>(?&lt;word&gt;\\w+)</code>, <code>(?&lt;=abc)def</code>, and <code>^a(?&gt;.*)z$</code>.</li> </ul> <p>There are many other versions of regular expressions but every tool support atleast on of these.</p> <ul> <li>https://www.gnu.org/software/findutils/manual/html_node/find_html/Regular-Expressions.html</li> </ul>"},{"location":"operating-systems/linux/commands/textfu/text-file-manipulation/#simple-regular-expression","title":"Simple Regular Expression","text":"<ul> <li><code>^</code> Matches the beginning of a line</li> <li><code>$</code> Matches the end of a line</li> <li><code>.</code> Matches any character</li> <li><code>\\s</code> Matches whitespace</li> <li><code>\\S</code> Matches non-whitespace</li> <li><code>*</code> Repeats a character 0 or more times</li> <li><code>*?</code> Repeats a character 0 or more times (non-greedy)</li> <li><code>+</code> Repeats a character 1 or more times</li> <li><code>+?</code> Repeats a character 1 or more times (non-greedy)</li> <li><code>[aeiou]</code> Matches a single character in the listed set</li> <li><code>[^XYZ]</code> Matches a sigle character NOT in the listed set</li> <li><code>[a-z0-9]</code> The set of characters can include a range</li> <li><code>(</code> Indicates where a string extraction starts</li> <li><code>)</code> Indicates where a string extractions stops</li> <li><code>/d</code> = digit</li> </ul>"},{"location":"operating-systems/linux/commands/textfu/xargs/","title":"xargs","text":"<ul> <li>better than <code>xargs</code> when running some commands for many files</li> <li>do <code>man xargs</code> for help</li> </ul>"},{"location":"operating-systems/linux/commands/textfu/xargs/#some-uses","title":"some uses","text":""},{"location":"operating-systems/linux/commands/textfu/xargs/#convert-all-files-from-one-extension-to-another-using-some-other-tool","title":"convert all files from one extension to another using some other tool","text":"<p><code>ls -1 | sed -e 's/\\.mkv//' | xargs -I _ ffmpeg -i _.mkv _.mp4</code></p> <ul> <li><code>ls -1</code> prints the files in a folder in one column</li> <li><code>sed -e 's/\\.mkv//'</code> remove the extension <code>.mkv</code> from the file name</li> <li><code>xargs -I _ ffmpeg -i _.mkv _.mp4</code> converts the file to a <code>mp4</code> file voila!</li> </ul>"},{"location":"operating-systems/linux/commands/textfu/xargs/#gnome-desktop-environment-hiding-some-useless-collection-of-files","title":"gnome desktop environment hiding some useless collection of files","text":"<p><code>find /usr -name \"*lsp_plug*desktop\" 2&gt;/dev/null | cut -f 5 -d '/' | xargs -I {} cp /tmp/1 ~/.local/share/applications/{}</code></p> <ul> <li><code>find /usr -name \"*lsp_plug*desktop\" 2&gt;/dev/null</code> prints the name of all <code>.desktop</code> files containing <code>*lsp_plug*</code>, <code>2&gt;/dev/null</code> ignores any errors</li> <li><code>cut -f 5 -d '/'</code> prints the name of files, <code>-d</code> sets the delimiter <code>-f</code> selects the field</li> <li><code>xargs -I {} cp /tmp/1 ~/.local/share/applications/{}</code> copies the contents of file <code>/temp/1</code> but uses the manes we generated.</li> </ul>"},{"location":"operating-systems/linux/display-servers/","title":"Display Servers","text":"<ul> <li>https://en.wikipedia.org/wiki/Windowing_system#Display_server</li> <li>https://en.wikipedia.org/wiki/List_of_display_servers</li> </ul> <p>In computing, a windowing system (or window system) is a software suite that manages separately different parts of display screens.</p> <p></p>"},{"location":"operating-systems/linux/display-servers/wayland/","title":"Wayland Display Server","text":""},{"location":"operating-systems/linux/display-servers/xorg/","title":"Xorg Display Server","text":"<ul> <li>https://wiki.archlinux.org/title/Xorg</li> </ul>"},{"location":"operating-systems/linux/display-servers/xorg/#clipboard","title":"Clipboard","text":"<p>Xorg offeres two clipboard:</p> <ul> <li><code>primary</code> - which activates with middle mouse click</li> <li><code>seconday</code></li> <li><code>clipboard</code> - which is the proper clipboard</li> <li><code>buffer-cut</code></li> </ul> <p>Access these with, <code>xclip -selection [type]</code></p>"},{"location":"operating-systems/linux/display-servers/xorg/#commands","title":"Commands","text":"<p>these runs specifically on which were made for <code>xorg</code></p> <ul> <li><code>xbacklight</code> - adjust backlight brightness using RandR extension</li> <li><code>xcalc</code> - calculator</li> <li><code>xchop</code> - pacman game clone</li> <li><code>xclip</code> - command line interface to X selections (clipboard)</li> <li><code>xclock</code> - clock</li> <li><code>xcwd</code> - get current directory opened in the focused windows, like terminal</li> <li><code>xdotool</code> - command-line X11 automation tool</li> <li><code>xdpyinfo</code> - display information utility for X</li> <li><code>xditview</code> - display ditroff output</li> <li><code>xedit</code> - text editor</li> <li><code>xeyes</code> - eyes follow cursor</li> <li><code>xfd</code> - display all the characters in an X font</li> <li><code>xev</code> - print contents of X events</li> <li><code>xkill</code> - kill a client by its X resource</li> <li><code>xprop</code> - property displayer for X</li> <li><code>xsel</code> - manipulate the X selection.</li> <li><code>xwd</code> - dump an image of an X window</li> <li><code>xman</code> - gui manual</li> <li><code>xmessage</code> - display a message or query in a window (X-based /bin/echo)</li> <li><code>xprintidle</code> - utility printing user's idle time in X</li> <li><code>xrandr</code> - X Resize, Rotate and Reflection extension</li> <li><code>xrdb</code> - X server resource database utility</li> <li><code>xset</code> - user preference utility for X</li> <li><code>xsm</code> - X Session Manager</li> <li><code>xwininfo</code> - window information utility for X</li> </ul>"},{"location":"operating-systems/linux/display-servers/xorg/xev/","title":"xev","text":"<ul> <li>capture all inputs in xserver</li> <li>useful to find the keycode for used in other programs configuration</li> </ul>"},{"location":"operating-systems/linux/display-servers/xorg/xprop/","title":"xprop","text":"<ul> <li>property displayer for X</li> </ul>"},{"location":"operating-systems/linux/display-servers/xorg/xrandr/","title":"xrandr","text":""},{"location":"operating-systems/linux/display-servers/xorg/xrdb/","title":"xrdb","text":"<p>X server resource database utility</p> <ul> <li><code>xrdb -query</code></li> <li><code>xrdb -query -all</code></li> <li><code>xrdb -query | grep dpi</code></li> </ul>"},{"location":"operating-systems/linux/display-servers/xorg/xsel/","title":"xsel","text":"<ul> <li><code>xsel -b &gt; mpv.png</code></li> <li><code>xsel -b &gt; mpv.png</code></li> <li><code>xsel -b mpx.png</code></li> <li><code>xsel | festival --tts</code></li> <li><code>xsel | festival --tts</code></li> <li><code>xsel | festival --tts</code></li> </ul>"},{"location":"operating-systems/linux/other/bluetooth/","title":"Bluetooth","text":"<ul> <li> <p><code>systemctl status bluetooth</code></p> </li> <li> <p>https://www.makeuseof.com/manage-bluetooth-linux-with-bluetoothctl/</p> </li> <li>https://wiki.archlinux.org/title/Bluetooth</li> </ul>"},{"location":"operating-systems/linux/other/hindi_on_linux/","title":"Hindi in linux","text":""},{"location":"operating-systems/linux/other/hindi_on_linux/#hindi-layout","title":"hindi layout","text":"<ul> <li>Bolnagri : <code>gkbd-keyboard-display -l $'in\\tbolnagri'</code></li> <li>Thin kagpa : <code>gkbd-keyboard-display -l $'in\\thin-kagapa'</code></li> <li>Get layout info - <code>setxkbmap -query</code></li> </ul> <p>To change layout, variant, option etc, you need to know what you can select with what. Try</p> <ul> <li><code>localectl list-x11-keymaps-models</code></li> <li><code>localectl list-x11-keymaps-layouts</code></li> <li><code>localectl list-x11-keymaps-variants us</code> etc. Then use <code>setxkbmap</code> to test until it work as you want. Then you can use <code>localectl set-x11-keymap ...</code></li> </ul>"},{"location":"operating-systems/linux/other/hindi_on_linux/#how-to-type-characters","title":"how to type characters","text":"<p><code>alt</code> = right alt <code>x</code> -&gt; to half any consonant</p> <ul> <li>\u0905 - alt + a</li> <li>\u0906 - alt + A</li> <li>\u0907 - alt + i</li> <li>\u0908 - alt + I</li> <li>\u0909 - alt + u</li> <li>\u090a - alt + U</li> <li>\u090f - alt + e</li> <li>\u0910 - alt + E</li> <li>\u0913 - alt + o</li> <li>\u0914 - alt + O</li> <li>\u0905\u0902 - (alt + a) + `</li> <li>\u0905: - (alt + a) + :</li> </ul> <ul> <li>\u0915 - k</li> <li>\u0916 - K</li> <li>\u0917 - g</li> <li>\u0918 - G</li> <li>\u0921\u0970 - v&lt;</li> <li>\u091a - c</li> <li>\u091b - C</li> <li>\u091c - j</li> <li>\u091d - J</li> <li>\u091e - Y</li> <li>\u091f - f</li> <li>\u0920 - F</li> <li>\u0921 - v</li> <li>\u0922 - V</li> <li>\u0923 - N</li> <li>\u0924 - t</li> <li>\u0925 - T</li> <li>\u0926 - d</li> <li>\u0927 - D</li> <li>\u0928 - n</li> <li>\u092a - p</li> <li>\u092b - P</li> <li>\u092c - b</li> <li>\u092d - B</li> <li>\u092e - m</li> <li>\u092f - y</li> <li>\u0930 - r</li> <li>\u0932 - l</li> <li>\u0935 - w</li> <li>\u0936 - z</li> <li>\u0938 - s</li> <li>\u0937 - S</li> <li>\u0939 - h</li> <li>\u0915\u094d\u0937 - kxS</li> <li>\u0924\u094d\u0930 - txr</li> <li>\u091c\u094d\u091e - jxY</li> </ul>"},{"location":"operating-systems/linux/other/hotspot/","title":"Create a Wifi Hotspot on Linux/Ubuntu","text":"<p>Set up your wireless network connection in Ubuntu 16.04. How to create Wifi Hotspot in Ubuntu 16.04, with Android support.</p> <p>Before you start to create WiFi Hotspot in Ubuntu 16.04, disable WiFi and plug in a wired Internet connection to your laptop/PC. Please makes sure that the Ubuntu is connected to a wired Internet and wireless is disabled.</p> <ol> <li>Disable WiFi and connect to a wired Internet connection.</li> <li>Go to Network Icon on top panel.      </li> <li>Select Edit Connections and then click the Add button (in the pop-up window). You can also select Create New WiFi Network.      </li> <li>Choose Wi-Fi from the drop-down menu (under connection type).      </li> <li>In next window, do the following<ul> <li>Type in a connection name. Please note this name as we will use the name later.</li> <li> </li> <li>Type in a SSID</li> <li>Select mode: Infrastructure</li> <li>Device MAC address: Select your wireless card from drop-down menu</li> <li>In Wifi Security tab, select WPA &amp; WPA2 Personal and type in a password.</li> <li> </li> <li>In IPv4 Settings tab, select mode \"Share to other computers\"</li> <li> </li> </ul> </li> <li>Go to Wi-Fi Security tab, select security type WPA &amp; WPA2 Personal and set a password.</li> <li>Go to IPv4 Settings tab, from Method drop-down box select Shared to other computers.</li> <li>Click the save button.</li> <li>Now connect to the WiFi Hotspot created.<ul> <li> </li> </ul> </li> </ol>"},{"location":"operating-systems/linux/other/hotspot/#if-you-are-having-an-error","title":"If You Are Having An Error","text":"<ul> <li>Once you have completed the above steps, a configuration file with the newly created     connection name is created under /etc/NetworkManager/system-connections directory. We will now     edit this configuration file. Open Terminal and run the following command to edit the     configuration file: <code>gksu gedit /etc/NetworkManager/system-connections/wifi-connection-name</code></li> <li>Please note that that you must replace wifi-connection-name with the new connection name you     just created. When the file opens, search the line \"mode=infrastructure\" and change it to     \"mode=ap\" and save the file.</li> <li>Restart the system and enable WIFI from Network Manager icon on the Ubuntu panel bar. It will     automatically connect to the newly created WiFi hotspot. If it is not connected automatically,     select \"Connect to Hidden Wi-Fi Network\" and select the newly created WiFi hotspot from the     drop-down list.</li> </ul>"},{"location":"operating-systems/linux/other/touchpad-settings/","title":"Setting up touchpad in linux","text":"<ul> <li>check if you use <code>xinput</code><ul> <li><code>xinput</code> or <code>xinput list</code> - this will show the devices connected to your device</li> </ul> </li> <li><code>libinput list-devices</code><ul> <li>will show a list of devices with there features</li> </ul> </li> </ul> <pre><code>Device:           MSFT0001:01 06CB:CD5F Touchpad\nKernel:           /dev/input/event4\nGroup:            7\nSeat:             seat0, default\nSize:             98x48mm\nCapabilities:     pointer gesture\nTap-to-click:     disabled\nTap-and-drag:     enabled\nTap drag lock:    disabled\nLeft-handed:      disabled\nNat.scrolling:    disabled\nMiddle emulation: n/a\nCalibration:      n/a\nScroll methods:   *two-finger edge\nClick methods:    none\nDisable-w-typing: enabled\nAccel profiles:   none\nRotation:         n/a\n</code></pre> <ul> <li>here<ul> <li><code>MSFT0001:01 06CB:CD5F Touchpad</code> is the device name</li> <li>you can also find the same name in the output of <code>xinput list</code></li> </ul> </li> <li><code>xinput list-props \"MSFT0001:01 06CB:CD5F Touchpad\"</code><ul> <li>this will show the properties of the device</li> </ul> </li> </ul> <pre><code>`Device 'MSFT0001:01 06CB:CD5F Touchpad':\n Device Enabled (191): 1\n Coordinate Transformation Matrix (193): 1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000\n libinput Tapping Enabled (341): 1\n libinput Tapping Enabled Default (342): 0\n libinput Tapping Drag Enabled (343): 1\n libinput Tapping Drag Enabled Default (344): 1\n libinput Tapping Drag Lock Enabled (345): 0\n libinput Tapping Drag Lock Enabled Default (346): 0\n libinput Tapping Button Mapping Enabled (347): 1, 0\n libinput Tapping Button Mapping Default (348): 1, 0\n libinput Natural Scrolling Enabled (325): 1\n libinput Natural Scrolling Enabled Default (326): 0\n libinput Disable While Typing Enabled (349): 1\n libinput Disable While Typing Enabled Default (350): 1\n libinput Scroll Methods Available (329): 1, 1, 0\n libinput Scroll Method Enabled (330): 1, 0, 0\n libinput Scroll Method Enabled Default (331): 1, 0, 0\n libinput Accel Speed (334): 0.000000\n libinput Accel Speed Default (335): 0.000000\n libinput Left Handed Enabled (339): 0\n libinput Left Handed Enabled Default (340): 0\n libinput Send Events Modes Available (310): 1, 1\n libinput Send Events Mode Enabled (311): 0, 0\n libinput Send Events Mode Enabled Default (312): 0, 0\n Device Node (313): \"/dev/input/event4\"\n Device Product ID (314): 1739, 52575\n libinput Drag Lock Buttons (327): &lt;no items&gt;\n libinput Horizontal Scroll Enabled (328): 1\n</code></pre> <ul> <li>now to use <code>xinput set-prop device-name option value</code> this to check how   particular function behave<ul> <li><code>xinput set-prop \"MSFT0001:01 06CB:CD5F Touchpad\" 325 1</code></li> </ul> </li> <li>after verifying the options now you can use the <code>xorg</code> config files   to set them</li> <li><code>cd /etc/X11/xorg.conf.d</code></li> <li><code>touch 90-touchpad.conf</code> - create a config file for the touchpad</li> <li>edit the file and insert following, <code>Driver \"libinput\"</code> used to select driver,   <code>MatchIsTouchpad \"on\"</code> to check for touchpad</li> </ul> <pre><code>Section \"InputClass\"\n        Identifier \"touchpad\"\n        MatchIsTouchpad \"on\"\n        Driver \"libinput\"\n        Option \"Tapping\" \"on\"\n        Option \"TappingButtonMap\" \"lrm\"\n Option \"NaturalScrolling\" \"on\"\nEndSection\n</code></pre>"},{"location":"operating-systems/linux/other/touchpad-settings/#references","title":"References","text":"<ul> <li>https://wiki.archlinux.org/title/Libinput</li> <li>https://wiki.archlinux.org/title/Xinput</li> </ul>"},{"location":"operating-systems/linux/package-managers/","title":"Package Managers","text":"<ul> <li>package manages are used to install software and packages</li> <li>they also aim to solve the dependency hell created by manually installing software</li> <li>there are also universal package managers which do not use the system libraries   and they ship with complete libraries used by the software.</li> </ul>"},{"location":"operating-systems/linux/package-managers/#other-ways-to-install-software","title":"Other ways to install software","text":"<p>There are many ways to install a software, here are some of them</p> <ul> <li>from your distro package manager (recommended)<ul> <li>you should use the package manager that your distro provide</li> </ul> </li> <li>from the additional repo that you distor provides<ul> <li>for arch users it is AUR</li> <li>for ubuntu debian, there are PPA's</li> </ul> </li> <li>from flatpack, or form snap, or from appimage</li> <li>from source, you can build the software and install it</li> </ul>"},{"location":"operating-systems/linux/package-managers/#how-to-verify-a-downloaded-package","title":"How to verify a downloaded package","text":""},{"location":"operating-systems/linux/package-managers/#gpg","title":"gpg","text":"<ul> <li>download the keys</li> <li>import the keys - <code>gpg --import keys</code></li> <li>download the software and the signature file (.asc)</li> <li>verify the signature <code>gpg --verify dig.asc package.tar.gz</code></li> <li>if output contain <code>Good signature</code> then file is verified</li> </ul>"},{"location":"operating-systems/linux/package-managers/#sha256-md5-hash-values","title":"SHA256 / MD5 hash values","text":"<ul> <li>generate hash - <code>openssl dgst -md5 package</code> or <code>openssl dgst -sha256 package</code></li> <li>now compare the values they should match</li> </ul>"},{"location":"operating-systems/linux/package-managers/AUR/","title":"AUR","text":"<p>Arch User Repository</p>"},{"location":"operating-systems/linux/package-managers/AUR/#requirements","title":"Requirements","text":"<ul> <li><code>sudo pacman -Syu</code> updated system</li> <li><code>sudo pacman -S git base-devel</code> git and some basic build packages</li> </ul>"},{"location":"operating-systems/linux/package-managers/AUR/#how-to-install","title":"How to install","text":"<ul> <li><code>git clone https://aur.archlinux.org/&lt;pkgName&gt;.git</code> clone the repo</li> <li><code>cd &lt;pkgName&gt;/</code> cd into the dir</li> <li><code>makepkg</code> build the package</li> <li><code>sudo pacman -U &lt;package_name&gt;.tar.xz</code> install the package</li> <li><code>makepkg -sri</code> building and installing</li> </ul>"},{"location":"operating-systems/linux/package-managers/AUR/#how-to-uninstall","title":"How to Uninstall","text":"<ul> <li><code>sudo pacman -R &lt;package_name&gt;</code></li> <li><code>sudo pacman -Rs &lt;package_name&gt;</code> install checking dependencies</li> </ul>"},{"location":"operating-systems/linux/package-managers/AUR/#update-package","title":"Update package","text":"<ul> <li><code>git clone https://aur.archlinux.org/&lt;pkgName&gt;.git</code> grab the latest repo</li> <li><code>git pull</code> if the previous directory was not deleted</li> </ul>"},{"location":"operating-systems/linux/package-managers/AUR/#using-yay-to-mange-the-aur-packages","title":"Using <code>yay</code> to mange the AUR packages","text":""},{"location":"operating-systems/linux/package-managers/AUR/#installing-yay","title":"Installing <code>yay</code>","text":"<ul> <li><code>git clone https://aur.archlinux.org/yay.git</code></li> <li><code>cd yay</code></li> <li><code>makepkg -sri</code></li> </ul>"},{"location":"operating-systems/linux/package-managers/AUR/#installing-pkg-using-yay","title":"Installing pkg using <code>yay</code>","text":"<ul> <li><code>yay -S &lt;pkgName&gt;</code></li> </ul>"},{"location":"operating-systems/linux/package-managers/brew/","title":"brew","text":"<p>brew</p> <ul> <li><code>brew --version</code> print version of brew</li> <li><code>brew help</code> print help for brew command</li> <li><code>brew update</code> Fetch latest version of homebrew and formula</li> <li><code>brew outdated</code> Upgrade all outdated and unpinned brews</li> <li><code>brew upgrade</code> Upgrade all outdated and unpinned brews</li> <li><code>brew upgrade [formula]</code> Upgrade only the specified brew</li> <li><code>brew pin [formula]</code> Prevent the specified formulae from being upgraded</li> <li><code>brew unpin [formula]</code> Allow the specified formulae to be upgraded.</li> <li><code>brew tap</code> List all the current tapped repositories (taps)</li> <li><code>brew list</code> List all the installed formulae.</li> <li><code>brew search</code> Display all locally available formulae for brewing.</li> <li><code>brew search [text]</code> Perform a substring search of formulae names for brewing.</li> <li><code>brew info [formula]</code> Display information about the formula.</li> <li><code>brew install [formula]</code> Install the formula.</li> <li><code>brew uninstall [formula]</code> Uninstall the formula.</li> <li><code>brew cleanup</code> Remove older versions of installed formulae.</li> <li><code>brew cleanup [formula]</code> Remove older versions of specified formula.</li> <li><code>brew cleanup -n</code> Display all formula that will be removed (dry run)</li> </ul>"},{"location":"operating-systems/linux/package-managers/debian/","title":"debian","text":""},{"location":"operating-systems/linux/package-managers/debian/#dpkg","title":"dpkg","text":"<ul> <li><code>dpkg -i [pkg.deb]</code> install a package</li> <li><code>dpkg -l</code> list all installed packages</li> <li><code>dpkg -l [pkgname]</code> view if a particular package is installed or not</li> <li><code>dpkg -r [pkgname]</code> remove a particular package</li> <li><code>dpkg -c [pkgname]</code> view contents of particular package</li> <li><code>dpkg -s [pkgname]</code> view if a particular package is installed or not</li> <li><code>dpkg -L [pkgname]</code> viwe the location of package installed</li> <li><code>dpkg -R --install [dir/]</code> install all .deb packages from dir</li> </ul>"},{"location":"operating-systems/linux/package-managers/debian/#apt","title":"apt","text":"<ul> <li><code>apt install [pkgname]</code> install a package</li> <li><code>apt remove [pkgname]</code> remove a package</li> <li><code>apt purge [pkgname]</code> remove package and configurations</li> <li><code>apt update</code> Refresh repository index</li> <li><code>apt upgrade</code> Upgrade all upgradable packages</li> <li><code>apt autoremove</code> Remove unwanted packages</li> <li><code>apt full-upgrade</code> Upgrade package &amp; auto-handle dependencies</li> <li><code>apt search [pkgname]</code> Search for packages</li> <li><code>apt show</code> Show package details.</li> <li><code>apt list</code> List packages with criteria(installed, all available, upgradeable)</li> <li><code>dit-sources</code> Edit the sources.list in the preferred editor.</li> </ul>"},{"location":"operating-systems/linux/package-managers/debian/#apt-get","title":"apt-get","text":"<ul> <li><code>apt-get install [pkgname]</code> install a package</li> <li><code>apt-get remove [pkgname]</code> remove a package</li> <li><code>apt-get purge [pkgname]</code> remove package and configurations</li> <li><code>apt-get update</code> Refresh repository index</li> <li><code>apt-get upgrade</code> Upgrade all upgradable packages</li> <li><code>apt-get autoremove</code> Remove unwanted packages</li> <li><code>apt-get dist-upgrade</code> Upgrade package &amp; auto-handle dependencies</li> <li><code>apt-cache search [pkgname]</code> Search for packages</li> <li><code>apt-cache show</code> Show package details.</li> </ul>"},{"location":"operating-systems/linux/package-managers/debian/#add-apt-repository","title":"add-apt-repository","text":"<ul> <li><code>apt-add-repository ppa:[owner-name]/[repo-name]</code> - add a ppa</li> <li><code>apt-add-repository --remove ppa:[owner-name]/[repo-name]</code> - remove a added repo</li> </ul>"},{"location":"operating-systems/linux/package-managers/debian/#other","title":"other","text":"<ul> <li>search form where a package is - <code>apt-cache policy package-name</code></li> <li><code>Warning: apt-key is deprecated. Manage keyring files in trusted.gpg.d instead (see apt-key(8)).</code><ul> <li>this means that you put the key file in a generic location and now it can be used for multiple repo</li> <li>put it in <code>/usr/share/keyrings</code>, export the key with <code>apt-key export [key-id]</code>, <code>key-id</code> is the last eight digit of key in   <code>apt-key list</code> output</li> </ul> </li> </ul>"},{"location":"operating-systems/linux/package-managers/debian/#add-package-key-repository-install-it","title":"Add package key &gt; repository &gt; install it","text":"<pre><code># cat mykey.gpg | gpg --dearmor &gt; /etc/apt/trusted.gpg.d/mykey.gpg\n# --dearmor means change to binary format\n# this is a example of how to put the key keyrings dir\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo gpg --dearmor -o /usr/share/keyrings/yarn.gpg\n\n# now you have to create a source file for the repo\necho \"deb [arch=amd64 signed-by=/usr/share/keyrings/yarn.gpg] https://dl.yarnpkg.com/debian/ stable main\" |\n    sudo tee /etc/apt/sources.list.d/yarn.list\n\n# now update the repo index\nsudo apt update\n\n# install the software\nsudo apt install yarn\n</code></pre>"},{"location":"operating-systems/linux/package-managers/pacman/","title":"pacman","text":""},{"location":"operating-systems/linux/package-managers/pacman/#mirrors","title":"Mirrors","text":"<ul> <li><code>sudo pacman-mirrors --country India &amp;&amp; sudo pacman -Syyu</code>   switching mirrors for fast downloads (only in manjaro).</li> </ul>"},{"location":"operating-systems/linux/package-managers/pacman/#browsing-packages","title":"Browsing Packages","text":"<ul> <li> <p><code>pacman -Qq</code>   gives a list of installed packages.</p> </li> <li> <p>gives a interactive list using fuzzy finder using <code>fzf</code> file.</p> </li> </ul> <pre><code>pacman -Qq |\nfzf --preview 'pacman -Qil {}' \\\n  --layout=reverse \\\n  --bind 'enter:execute(pacman -Qil {} | less)'\n</code></pre> <ul> <li><code>pacman -Slq | fzf --preview 'pacman -Si {}' --layout=reverse'</code>   to browse all installed and not yet installed packages.</li> </ul>"},{"location":"operating-systems/linux/package-managers/pacman/#package-files-size-description","title":"Package files size description","text":"<ul> <li><code>pacman -Qlq package | grep -v '/$' | xargs -r du -h | sort -h</code>   gives list of files associated with the package and their size.</li> </ul>"},{"location":"operating-systems/linux/package-managers/pacman/#installing-package","title":"Installing Package","text":"<ul> <li><code>pacman -S package_name1, package_name2 ...</code>   install packages</li> <li><code>pacman -S $(pacman -Ssq package_regex)</code>   install packages by specifying some package regex</li> <li><code>pacman -S extra/package_name</code>   multiple versions of same software? then specify the one you want(in this case <code>extra</code> repo is used)</li> <li><code>pacman -S gnome</code>   install a group, (in this case <code>gnome</code> de package), it will prompt you select the packages after this</li> <li><code>pacman -Sg gnome</code>   see the packages in group gnome</li> </ul>"},{"location":"operating-systems/linux/package-managers/pacman/#uninstalling-packages","title":"Uninstalling Packages","text":"<ul> <li><code>pacman -R package_name</code> - remove a package</li> <li><code>pacman -Rs package_name</code> - remove a package and it's dependencies which are not required by other packages</li> <li><code>pacman -Rsu package_name</code> - in case the above command don't work</li> </ul>"},{"location":"operating-systems/linux/package-managers/pacman/#querying-package-databases","title":"Querying package databases","text":"<ul> <li><code>pacman -Ss string1 string2 ...</code> searches for the string in the package name, description</li> <li><code>pacman -Ss '^vim-'</code> search in the package name only :-)</li> <li><code>pacman -Qs string1 string2 ...</code> - search in already installed packages</li> <li><code>pacman -F string1 string2 ...</code> - search in remote packages</li> </ul>"},{"location":"operating-systems/linux/package-managers/rpm/","title":"RPM Package Manager","text":""},{"location":"operating-systems/linux/package-managers/rpm/#rpm","title":"rpm","text":"<ul> <li><code>rpm -ivh [pkg.rpm]</code> install a package</li> <li><code>rpm -qpR [pkg.rpm]</code> check for dependencies needed</li> <li><code>rpm -qa</code> list all installed packages</li> <li><code>rpm -Uvh [pkg.rpm]</code> update a package</li> <li><code>rpm -evv [pkgname]</code> remove particular package</li> </ul>"},{"location":"operating-systems/linux/package-managers/rpm/#yum-yellowdog-updater-modified","title":"yum (Yellowdog Updater, Modified)","text":"<ul> <li><code>yum install [pkgname]</code> install a package</li> <li><code>yum remove [pkgname]</code> removes a package</li> <li><code>yum update [pkgname]</code> update a package</li> <li><code>yum list [pkgname]</code> search for pkgname</li> <li><code>yum info [pkgname]</code> get info about particular package</li> <li><code>yum list</code> list all availiable packages</li> <li><code>yum list installed</code> list all installed packages</li> <li><code>yum check update</code> check for updates</li> <li><code>yum update</code> update</li> </ul>"},{"location":"operating-systems/linux/package-managers/rpm/#dnf-dandified-yum","title":"dnf (Dandified YUM)","text":"<ul> <li><code>dnf install [pkgname]</code> install a package</li> <li><code>dnf search [pkgname]</code> search for a package</li> <li><code>dnf remove [pkgname]</code> remove a package</li> </ul>"},{"location":"operating-systems/linux/package-managers/snap/","title":"snap","text":"<p>snap</p> <ul> <li><code>snap version</code> show the snap version</li> <li><code>snap find [pkgname]</code> find the pkgname details</li> <li><code>snap install [pkgname]</code> install pkgname</li> <li><code>snap list</code> show installed packages</li> <li><code>snap info [pkgname]</code> show pkgname details, and channels(stable, candidate, beta, edge)</li> <li><code>snap install [pkgname] --channel=[cnlname]</code> install pkgname from cnlname channel</li> <li><code>snap refresh [pkgname] --channel=[cnlname]</code> change the channel of currently installed pkgname</li> <li><code>sudo snap refresh --list</code> check if updates are available</li> <li><code>sudo snap remove [pkgname]</code> remove the package pkgname</li> </ul>"},{"location":"operating-systems/linux/ricing/","title":"Ricing","text":"<p>\ud83c\udf5a</p> <p>Ricing in linux means, changing the themes and customizing the linux window manager to make it look better.</p> <ul> <li>Themes</li> </ul>"},{"location":"operating-systems/linux/ricing/#where-can-you-find-themes","title":"Where can you find themes?","text":"<ul> <li>opendesktop</li> <li>gnomelooks</li> <li>kdestore</li> <li>plingstore</li> </ul>"},{"location":"operating-systems/linux/ricing/#osd-on-screen-display","title":"OSD (on screen display)","text":"<ul> <li><code>osd_cat</code></li> <li><code>osd_clock</code></li> </ul>"},{"location":"operating-systems/linux/ricing/ascii_art/","title":"ASCII Art","text":"<ul> <li><code>lolcat</code><ul> <li>used to insert rainbow like colors in the terminal</li> </ul> </li> <li><code>fortune</code><ul> <li>print any random text message</li> </ul> </li> <li><code>cowsay</code><ul> <li>asii art with thought bubble</li> </ul> </li> <li><code>figlet</code><ul> <li>ascii art for text</li> <li>clock: <code>while true; do date -u +\"%H:%M:%S\"| figlet -f mono12.tlf -w 1000; sleep 1; clear; done</code></li> </ul> </li> <li><code>toilet</code><ul> <li><code>toilet --font pagga --filter gay text</code></li> <li><code>toilet --font pagga --filter metal text</code></li> <li><code>toilet --font pagga text</code></li> </ul> </li> </ul>"},{"location":"operating-systems/linux/ricing/desktop_files/","title":"Desktop files","text":""},{"location":"operating-systems/linux/ricing/desktop_files/#location","title":"Location","text":"<ul> <li>Global <code>\\usr\\share\\applications</code></li> <li>Local <code>~\\.local\\share\\applications</code></li> </ul>"},{"location":"operating-systems/linux/ricing/desktop_files/#how-to-hide-any-desktop-file","title":"How to hide any .desktop file","text":"<ol> <li>Copy the entry from <code>\\usr\\share\\applications</code> to <code>~\\.local\\share\\applications</code></li> <li> <p>Delete everything inside the file and paste this:</p> <pre><code>[Desktop Entry]\nHidden = True\n</code></pre> <p>OR</p> <p>Then, to hide the entry in all environments, open the desktop entry file in a text editor and add the following line: <code>NoDisplay=true</code>.</p> </li> </ol>"},{"location":"operating-systems/linux/ricing/desktop_files/#fbrokendesktop-find-whats-wrong-with-your-desktop-entry","title":"fbrokendesktop - find what's wrong with your desktop entry","text":"<p>The <code>fbrokendesktop</code> Bash script detects broken Exec values pointing to non-existent paths. Without any arguments it uses preset directories in the DskPath array. It shows only broken .desktop with full path and filename that is missing.</p>"},{"location":"operating-systems/linux/ricing/desktop_files/#force-some-theme-on-a-particular-application","title":"Force some theme on a particular application","text":"<ul> <li>Add following line to its <code>Exce</code> part in .desktop file - <code>env GTK_THEME=Adwaita:light</code> or use the theme of your choice.</li> </ul>"},{"location":"operating-systems/linux/ricing/fonts/","title":"Fonts","text":""},{"location":"operating-systems/linux/ricing/fonts/#using-fontconfig","title":"Using <code>fontconfig</code>","text":"<p>Add this to your font config, <code>~/.config/fontconfig/fonts.conf</code> or you can put it in <code>~/.fontconfig</code></p> <pre><code>  &lt;alias&gt;\n    &lt;family&gt;serif&lt;/family&gt;\n    &lt;prefer&gt;&lt;family&gt;Tinos&lt;/family&gt;&lt;/prefer&gt;\n  &lt;/alias&gt;\n  &lt;alias&gt;\n    &lt;family&gt;sans-serif&lt;/family&gt;\n    &lt;prefer&gt;&lt;family&gt;Arimo&lt;/family&gt;&lt;/prefer&gt;\n  &lt;/alias&gt;\n  &lt;alias&gt;\n    &lt;family&gt;sans&lt;/family&gt;\n    &lt;prefer&gt;&lt;family&gt;Arimo&lt;/family&gt;&lt;/prefer&gt;\n  &lt;/alias&gt;\n  &lt;alias&gt;\n    &lt;family&gt;monospace&lt;/family&gt;\n    &lt;prefer&gt;&lt;family&gt;Cousine&lt;/family&gt;&lt;/prefer&gt;\n  &lt;/alias&gt;\n</code></pre> <p>source</p>"},{"location":"operating-systems/linux/ricing/fonts/#how-to-set-emoji","title":"How to set emoji","text":"<ul> <li>Get latest version of noto color emoji.<ul> <li>You can get at https://github.com/googlefonts/noto-emoji/releases</li> <li>Noto sans https://www.google.com/get/noto/</li> <li>Noto sans serif https://www.google.com/get/noto/</li> <li>Noto serif https://www.google.com/get/noto/</li> <li>Noto mono https://www.google.com/get/noto/</li> <li>Twemoji https://github.com/twitter/twemoji</li> </ul> </li> <li>Install both noto color emoji and twemoji<ul> <li><code>sudo apt-get install fonts-noto</code> to install the fonts</li> <li><code>fc-list | grep -i -e \"noto sans\" -e \"noto serif\" -e \"noto color emoji\"</code> to confirm</li> </ul> </li> <li>Use these fontconfig</li> </ul> <pre><code>&lt;?xml version=\"1.0\"?&gt;&lt;!DOCTYPE fontconfig SYSTEM \"fonts.dtd\"&gt;\n&lt;fontconfig&gt;\n &lt;alias&gt;\n &lt;!-- Change the string in the family tag to whatever font --&gt;\n    &lt;family&gt;serif&lt;/family&gt;\n    &lt;prefer&gt;&lt;family&gt;Noto Serif&lt;/family&gt;&lt;/prefer&gt;\n  &lt;/alias&gt;\n  &lt;alias&gt;\n    &lt;family&gt;sans-serif&lt;/family&gt;\n    &lt;prefer&gt;&lt;family&gt;Noto Sans&lt;/family&gt;&lt;/prefer&gt;\n  &lt;/alias&gt;\n  &lt;alias&gt;\n    &lt;family&gt;sans&lt;/family&gt;\n    &lt;prefer&gt;&lt;family&gt;Noto Sans&lt;/family&gt;&lt;/prefer&gt;\n  &lt;/alias&gt;\n  &lt;alias&gt;\n    &lt;family&gt;monospace&lt;/family&gt;\n    &lt;prefer&gt;&lt;family&gt;Noto Mono&lt;/family&gt;&lt;/prefer&gt;\n  &lt;/alias&gt;\n\n   &lt;!-- This adds Noto Color Emoji to the font families sans, serif, sans-serif and monospace --&gt;\n  &lt;match target=\"pattern\"&gt;\n        &lt;test name=\"family\"&gt;&lt;string&gt;monospace&lt;/string&gt;&lt;/test&gt;\n        &lt;edit name=\"family\" mode=\"append\"&gt;&lt;string&gt;Noto Color Emoji&lt;/string&gt;&lt;/edit&gt;\n  &lt;/match&gt;\n  &lt;match target=\"pattern\"&gt;\n        &lt;test name=\"family\"&gt;&lt;string&gt;sans&lt;/string&gt;&lt;/test&gt;\n        &lt;edit name=\"family\" mode=\"append\"&gt;&lt;string&gt;Noto Color Emoji&lt;/string&gt;&lt;/edit&gt;\n  &lt;/match&gt;\n\n  &lt;match target=\"pattern\"&gt;\n        &lt;test name=\"family\"&gt;&lt;string&gt;serif&lt;/string&gt;&lt;/test&gt;\n        &lt;edit name=\"family\" mode=\"append\"&gt;&lt;string&gt;Noto Color Emoji&lt;/string&gt;&lt;/edit&gt;\n  &lt;/match&gt;\n  &lt;!-- Discord loads the system's sans-serif font family, add Noto Color Emoji to it --&gt;\n  &lt;match target=\"pattern\"&gt;\n        &lt;test name=\"family\"&gt;&lt;string&gt;sans-serif&lt;/string&gt;&lt;/test&gt;\n        &lt;edit name=\"family\" mode=\"append\"&gt;&lt;string&gt;Noto Color Emoji&lt;/string&gt;&lt;/edit&gt;\n    &lt;/match&gt;\n\n   &lt;!-- Add emoji generic family --&gt;\n  &lt;alias binding=\"strong\"&gt;\n    &lt;family&gt;emoji&lt;/family&gt;\n    &lt;default&gt;&lt;family&gt;Noto Color Emoji&lt;/family&gt;&lt;/default&gt;\n  &lt;/alias&gt;\n\n  &lt;!-- Alias requests for the other emoji fonts --&gt;\n  &lt;alias binding=\"strong\"&gt;\n    &lt;family&gt;Apple Color Emoji&lt;/family&gt;\n    &lt;prefer&gt;&lt;family&gt;Noto Color Emoji&lt;/family&gt;&lt;/prefer&gt;\n    &lt;default&gt;&lt;family&gt;emoji&lt;/family&gt;&lt;/default&gt;\n  &lt;/alias&gt;\n  &lt;alias binding=\"strong\"&gt;\n    &lt;family&gt;Segoe UI Emoji&lt;/family&gt;\n    &lt;prefer&gt;&lt;family&gt;Noto Color Emoji&lt;/family&gt;&lt;/prefer&gt;\n    &lt;default&gt;&lt;family&gt;emoji&lt;/family&gt;&lt;/default&gt;\n  &lt;/alias&gt;\n&lt;/fontconfig&gt;\n</code></pre> <pre><code>&lt;?xml version='1.0'?&gt;\n&lt;!DOCTYPE fontconfig SYSTEM 'fonts.dtd'&gt;\n&lt;fontconfig&gt;\n  &lt;!-- Set preferred serif, sans serif, and monospace fonts. --&gt;\n  &lt;alias&gt;\n    &lt;family&gt;serif&lt;/family&gt;\n    &lt;prefer&gt;&lt;family&gt;JetBrainsMono Nerd Font&lt;/family&gt;&lt;/prefer&gt;\n  &lt;/alias&gt;\n  &lt;alias&gt;\n    &lt;family&gt;sans-serif&lt;/family&gt;\n    &lt;prefer&gt;&lt;family&gt;JetBrainsMono Nerd Font&lt;/family&gt;&lt;/prefer&gt;\n  &lt;/alias&gt;\n  &lt;alias&gt;\n    &lt;family&gt;sans&lt;/family&gt;\n    &lt;prefer&gt;&lt;family&gt;JetBrainsMono Nerd Font&lt;/family&gt;&lt;/prefer&gt;\n  &lt;/alias&gt;\n  &lt;alias&gt;\n    &lt;family&gt;monospace&lt;/family&gt;\n    &lt;prefer&gt;&lt;family&gt;JetBrainsMono Nerd Font&lt;/family&gt;&lt;/prefer&gt;\n  &lt;/alias&gt;\n  &lt;match&gt;\n    &lt;test name=\"family\"&gt;&lt;string&gt;sans-serif&lt;/string&gt;&lt;/test&gt;\n    &lt;edit name=\"family\" mode=\"prepend\" binding=\"weak\"&gt;\n      &lt;string&gt;Noto Color Emoji&lt;/string&gt;\n    &lt;/edit&gt;\n  &lt;/match&gt;\n  &lt;match&gt;\n    &lt;test name=\"family\"&gt;&lt;string&gt;serif&lt;/string&gt;&lt;/test&gt;\n    &lt;edit name=\"family\" mode=\"prepend\" binding=\"weak\"&gt;\n      &lt;string&gt;Noto Color Emoji&lt;/string&gt;\n    &lt;/edit&gt;\n  &lt;/match&gt;\n  &lt;match&gt;\n    &lt;test name=\"family\"&gt;&lt;string&gt;monospace&lt;/string&gt;&lt;/test&gt;\n    &lt;edit name=\"family\" mode=\"prepend\" binding=\"weak\"&gt;\n      &lt;string&gt;Noto Color Emoji&lt;/string&gt;\n    &lt;/edit&gt;\n  &lt;/match&gt;\n  &lt;match&gt;\n    &lt;test name=\"family\"&gt;&lt;string&gt;Apple Color Emoji&lt;/string&gt;&lt;/test&gt;\n    &lt;edit name=\"family\" mode=\"prepend\" binding=\"weak\"&gt;\n      &lt;string&gt;Noto Color Emoji&lt;/string&gt;\n    &lt;/edit&gt;\n  &lt;/match&gt;\n&lt;/fontconfig&gt;\n</code></pre> <ul> <li><code>fc-cache -fv</code> - refresh cache</li> </ul>"},{"location":"operating-systems/linux/ricing/desktop-environments/gnome/","title":"Gnome","text":""},{"location":"operating-systems/linux/ricing/desktop-environments/gnome/#history","title":"History","text":"<ul> <li>Gnome 1<ul> <li>introduced because kde used qt proprietary toolkit</li> <li>same as traditional desktop environment</li> </ul> </li> <li>Gnome 2<ul> <li>used Metacity as window manager (Gnome 2.2)</li> <li>it has a fork called MATE desktop environment, because of some changes in gnome 3</li> </ul> </li> <li>Gnome 3<ul> <li>not followed tradition desktop metaphor</li> <li>mutter as window manager</li> </ul> </li> <li>Gnome 40<ul> <li>current version</li> </ul> </li> </ul>"},{"location":"operating-systems/linux/ricing/desktop-environments/gnome/#using-dconf-editor","title":"Using <code>dconf-editor</code>","text":"<p>What is dconf?</p> <pre><code>dconf is a simple key-based configuration system. Keys exist in an unstructured database (but it is intended that keys that logically belong together are grouped together).\n\nHaving all of the keys in a single compact binary format also avoids the intense fragmentation problems currently experienced by the tree-of-directories-of-xml-files approach.\n</code></pre>"},{"location":"operating-systems/linux/ricing/desktop-environments/gnome/#using-gsettings","title":"Using gsettings","text":"<p>Gsettings is High-level API for application settings.</p>"},{"location":"operating-systems/linux/ricing/desktop-environments/gnome/#how-to-log-out","title":"How to log out","text":"<pre><code>gnome-session-quit\n# OR\ngnome-session-save --force-logout\n</code></pre>"},{"location":"operating-systems/linux/ricing/desktop-environments/gnome/#references","title":"References","text":"<ul> <li>https://www.gnome-look.org</li> </ul>"},{"location":"operating-systems/linux/ricing/desktop-environments/gnome/settings/","title":"Setings in Gnome","text":""},{"location":"operating-systems/linux/ricing/desktop-environments/gnome/settings/#introduction","title":"Introduction","text":"<p>Where are settings stored in gnome?</p> <p>In a binary <code>dconf</code> store. From man page:</p> <p>dconf is a simple key/value storage system that is heavily optimised for reading. This makes it an ideal system for storing user preferences (which are read 1000s of times for each time the user changes one). It was created with this usecase in mind.</p> <p>Earlier <code>gconf</code> was used but now <code>dconf</code> is used.</p> <p>Now how can we change the content inside this <code>dconf</code> store.</p> <ul> <li>Using the Settings GUI.</li> <li>Using a CLI tool also named <code>dconf</code>, but not recommended.</li> <li>Using <code>gsettings</code>, recommended way.</li> </ul> <p>About gsettings: Gsettings is a development library used to read and write to a configuration store backend. On Linux, it uses Dconf, but on Windows, it uses the registry, and on OS X, it uses a native data store. (The gsettings command on the CLI uses this library.)</p> <p>Read more about this here: https://askubuntu.com/questions/249887/gconf-dconf-gsettings-and-the-relationship-between-them. Still confused, check this https://discourse.gnome.org/t/what-is-the-purpose-of-gsettings/17165</p>"},{"location":"operating-systems/linux/ricing/desktop-environments/gnome/settings/#keyoard-shortcuts","title":"Keyoard Shortcuts","text":"<p>Keyboard shortcuts are also stored in settings. Sonetimes some settings are hidden in the GUI.</p> <p>List all schemas where shortcuts are used:</p> <pre><code>gsettings list-schemas | grep ^org.gnome | grep key\n\n# Output:\n# org.gnome.desktop.a11y.keyboard\n# org.gnome.desktop.peripherals.keyboard\n# org.gnome.desktop.wm.keybindings\n# org.gnome.libgnomekbd.keyboard\n# org.gnome.mutter.keybindings\n# org.gnome.mutter.wayland.keybindings\n# org.gnome.settings-daemon.peripherals.keyboard\n# org.gnome.settings-daemon.plugins.media-keys\n# org.gnome.shell.keybindings\n\n# list settings in particular schema\ngsettings list-recursively org.gnome.desktop.wm.keybindings\n</code></pre> <pre><code>org.gnome.desktop.wm.keybindings activate-window-menu ['&lt;Alt&gt;space']\n\norg.gnome.desktop.wm.keybindings always-on-top @as []\norg.gnome.desktop.wm.keybindings raise @as []\norg.gnome.desktop.wm.keybindings lower @as []\norg.gnome.desktop.wm.keybindings raise-or-lower @as []\norg.gnome.desktop.wm.keybindings toggle-above @as []\norg.gnome.desktop.wm.keybindings toggle-fullscreen ['&lt;Super&gt;f']\norg.gnome.desktop.wm.keybindings toggle-on-all-workspaces @as []\norg.gnome.desktop.wm.keybindings toggle-shaded @as []\n\norg.gnome.desktop.wm.keybindings toggle-maximized ['&lt;Alt&gt;F10']\norg.gnome.desktop.wm.keybindings unmaximize ['&lt;Super&gt;Down', '&lt;Alt&gt;F5']\norg.gnome.desktop.wm.keybindings maximize ['&lt;Super&gt;Up']\norg.gnome.desktop.wm.keybindings minimize ['&lt;Super&gt;h']\norg.gnome.desktop.wm.keybindings maximize-horizontally @as []\norg.gnome.desktop.wm.keybindings maximize-vertically @as []\n\norg.gnome.desktop.wm.keybindings begin-move ['&lt;Alt&gt;F7']\norg.gnome.desktop.wm.keybindings begin-resize ['&lt;Alt&gt;F8']\norg.gnome.desktop.wm.keybindings close ['&lt;Shift&gt;&lt;Super&gt;q']\n\norg.gnome.desktop.wm.keybindings cycle-group ['&lt;Alt&gt;F6']\norg.gnome.desktop.wm.keybindings cycle-group-backward ['&lt;Shift&gt;&lt;Alt&gt;F6']\n\norg.gnome.desktop.wm.keybindings cycle-panels ['&lt;Control&gt;&lt;Alt&gt;Escape']\norg.gnome.desktop.wm.keybindings cycle-panels-backward ['&lt;Shift&gt;&lt;Control&gt;&lt;Alt&gt;Escape']\n\norg.gnome.desktop.wm.keybindings cycle-windows @as []\norg.gnome.desktop.wm.keybindings cycle-windows-backward @as []\n\norg.gnome.desktop.wm.keybindings move-to-center @as []\norg.gnome.desktop.wm.keybindings move-to-corner-ne @as []\norg.gnome.desktop.wm.keybindings move-to-corner-nw @as []\norg.gnome.desktop.wm.keybindings move-to-corner-se @as []\norg.gnome.desktop.wm.keybindings move-to-corner-sw @as []\norg.gnome.desktop.wm.keybindings move-to-monitor-down ['&lt;Super&gt;&lt;Shift&gt;Down']\norg.gnome.desktop.wm.keybindings move-to-monitor-left ['&lt;Super&gt;&lt;Shift&gt;Left']\norg.gnome.desktop.wm.keybindings move-to-monitor-right ['&lt;Super&gt;&lt;Shift&gt;Right']\norg.gnome.desktop.wm.keybindings move-to-monitor-up ['&lt;Super&gt;&lt;Shift&gt;Up']\norg.gnome.desktop.wm.keybindings move-to-side-e @as []\norg.gnome.desktop.wm.keybindings move-to-side-n @as []\norg.gnome.desktop.wm.keybindings move-to-side-s @as []\norg.gnome.desktop.wm.keybindings move-to-side-w @as []\n\norg.gnome.desktop.wm.keybindings panel-main-menu ['&lt;Alt&gt;F1']\norg.gnome.desktop.wm.keybindings panel-run-dialog ['&lt;Alt&gt;F2']\n\norg.gnome.desktop.wm.keybindings set-spew-mark @as []\norg.gnome.desktop.wm.keybindings show-desktop @as []\n\norg.gnome.desktop.wm.keybindings switch-applications @as []\norg.gnome.desktop.wm.keybindings switch-applications-backward @as []\n\norg.gnome.desktop.wm.keybindings switch-group ['&lt;Super&gt;Above_Tab']\norg.gnome.desktop.wm.keybindings switch-group-backward ['&lt;Shift&gt;&lt;Super&gt;Above_Tab']\n\norg.gnome.desktop.wm.keybindings switch-input-source ['&lt;Super&gt;space', 'XF86Keyboard']\norg.gnome.desktop.wm.keybindings switch-input-source-backward ['&lt;Shift&gt;&lt;Super&gt;space', '&lt;Shift&gt;XF86Keyboard']\n\norg.gnome.desktop.wm.keybindings switch-panels ['&lt;Control&gt;&lt;Alt&gt;Tab']\norg.gnome.desktop.wm.keybindings switch-panels-backward ['&lt;Shift&gt;&lt;Control&gt;&lt;Alt&gt;Tab']\n\norg.gnome.desktop.wm.keybindings switch-windows ['&lt;Alt&gt;Tab']\norg.gnome.desktop.wm.keybindings switch-windows-backward ['&lt;Shift&gt;&lt;Alt&gt;Tab']\n</code></pre>"},{"location":"operating-systems/linux/ricing/desktop-environments/gnome/settings/#for-changing-workspaces","title":"For changing workspaces","text":"<p>```sh gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-1 \"['1']\" gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-2 \"['2']\" gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-3 \"['3']\" gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-4 \"['4']\" gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-5 \"@as []\" gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-6 \"@as []\" gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-7 \"@as []\" gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-8 \"@as []\" gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-9 \"@as []\" gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-10 \"@as []\" gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-11 \"@as []\" gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-12 \"@as []\" gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-last \"['End']\" <p>gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-left \"['Left']\" gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-right \"['Right']\" gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-up \"['Up']\" gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-down \"['Down']\" <p>gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-1 \"['1']\" gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-2 \"['2']\" gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-3 \"['3']\" gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-4 \"['4']\" gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-5 \"@as []\" gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-6 \"@as []\" gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-7 \"@as []\" gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-8 \"@as []\" gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-9 \"@as []\" gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-10 \"@as []\" gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-11 \"@as []\" gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-12 \"@as []\" gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-last \"['End']\" <p>gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-left \"['Left']\" gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-right \"['Right']\" gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-up \"['Up']\" gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-down \"['Down']\" ````"},{"location":"operating-systems/linux/ricing/desktop-environments/gnome/settings/#references","title":"References","text":"<ul> <li>https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/7/html-single/desktop_migration_and_administration_guide/index#what-is-gnome-classic</li> </ul>"},{"location":"operating-systems/linux/ricing/desktop-environments/kde/","title":"KDE","text":"<p>KDE is one of the top DE availiable with tools for almost every job. KDE also has many bugs.</p> <p>There are many components of KDE.</p> <ul> <li>Panel</li> <li>Widgets</li> <li>Dock</li> <li>Activities</li> </ul>"},{"location":"operating-systems/linux/ricing/desktop-environments/kde/#some-tricks-on-kde","title":"Some tricks on KDE","text":"<ul> <li>You can add specific properties on every window and applications.</li> <li>Export the keyboard schemas and save them then you can import them on a new setup.</li> <li>If GTK themes are not working, stop the GTK service running form KDE settings and use <code>lxapperance</code>.</li> </ul>"},{"location":"operating-systems/linux/ricing/desktop-environments/kde/#some-widgets-i-use","title":"Some widgets I use","text":"<ul> <li>To toggle the top panel - https://github.com/Intika-KDE-Plasmoids/plasmoid-toggle-panel</li> <li>Event calender, for making time and date on same line - https://store.kde.org/p/998901/</li> </ul>"},{"location":"operating-systems/linux/ricing/desktop-environments/kde/#applications-used-in-kde","title":"Applications Used in KDE","text":"<ul> <li><code>konsole</code></li> <li><code>dolphin</code></li> <li><code>kde-connect</code></li> <li><code>ktorrent</code></li> <li><code>kdenlive</code></li> </ul>"},{"location":"operating-systems/linux/ricing/desktop-environments/kde/dolphin/","title":"Dolphin","text":""},{"location":"operating-systems/linux/ricing/desktop-environments/kde/dolphin/#how-to-create-new-file-template-in-the-dolphin","title":"How to create new file template in the dolphin","text":"<ul> <li>create the template file in <code>~/.local/share/templates/source</code>, e.g. <code>filename.md</code></li> <li>create a desktop file in the <code>~/.local/share/templates</code>, file should look like this</li> </ul> <pre><code>[Desktop Entry]\nName=New word..\nComment=new microsoft word file\nType=Link\nURL=./source/filename.md\nIcon=Markdown\n</code></pre>"},{"location":"operating-systems/linux/ricing/desktop-environments/kde/kf5-config/","title":"kf5-config","text":"<ul> <li>Prints Qt(TM) and Frameworks installation paths</li> <li><code>kf5-config --path services</code></li> </ul>"},{"location":"operating-systems/linux/ricing/desktop-environments/kde/sddm/","title":"sddm","text":"<ul> <li>sddm-greeter sddm-astronaut</li> <li>sddm-greeter --test-mode lubuntu</li> <li>sddm-greeter --test-mode sddm-astronaut</li> <li>sddm-greeter --test-mode sddm-chili-0.1.5</li> <li>sddm-greeter --test-mode sugar-dark</li> <li>sddm-greeter --test-mode --theme sddm-astronaut</li> <li>sddm -h</li> <li>sddm --version</li> </ul>"},{"location":"operating-systems/linux/ricing/themes/","title":"Themes","text":""},{"location":"operating-systems/linux/ricing/themes/#selecting-specific-themes-for-specific-applications","title":"Selecting specific themes for specific applications","text":"<ul> <li>for <code>gtk</code> applications<ul> <li><code>exec=GTK_THEME=[theme-name] [app-name]</code><ul> <li>e.g. <code>exec=GTK_THEME=Adwaita:light libreoffice --writer</code></li> </ul> </li> </ul> </li> <li> <p>for <code>qt</code> applications</p> <ul> <li><code>exec=env QT_STYLE_OVERRIDE=[theme-name] [appname]</code><ul> <li>e.g. <code>exec=env QT_STYLE_OVERRIDE=Breeze equalx</code></li> </ul> </li> </ul> </li> <li> <p>change the gtk home location</p> <ul> <li><code>env XDG_CONFIG_HOME=[new-location] xournalpp</code></li> </ul> </li> <li>scale java applications<ul> <li><code>GDK_SCALE=2 java -jar ./JFLAP7.1.jar</code></li> </ul> </li> <li>gtk2 settings<ul> <li><code>GTK2_RC_FILES=~/.gtkrc-2.0-pinta pinta</code></li> </ul> </li> </ul>"},{"location":"operating-systems/linux/ricing/themes/#for-gtk2-apps","title":"for gtk2 apps","text":"<ul> <li>overriding the default themes used<ul> <li><code>Exec=env GTK2_RC_FILES=/home/totoro/.gtkrc-2.0-pinta pinta %F</code></li> </ul> </li> </ul>"},{"location":"operating-systems/linux/ricing/themes/#for-gtk3-apps","title":"for gtk3 apps","text":"<ul> <li>overiding the default theme and default icon theme<ul> <li><code>Exec=env XDG_CONFIG_HOME=/home/totoro/.config/libreofficegtk libreoffice --calc %U</code></li> </ul> </li> <li>passing some env variables<ul> <li><code>Exec=env DBUS_FATAL_WARNINGS=0 0ad</code></li> </ul> </li> </ul>"},{"location":"operating-systems/linux/ricing/themes/#for-electron-apps","title":"for electron apps","text":"<ul> <li>force scaling<ul> <li><code>Exec=\"/opt/Mark Text/marktext\" --force-device-scale-factor=1.5 %U</code></li> </ul> </li> </ul>"},{"location":"operating-systems/linux/ricing/themes/#hidpi","title":"HiDPI","text":"<ul> <li> <p>https://wiki.archlinux.org/title/HiDPI</p> <ul> <li>font size <code>QT_SCALE_FACTOR</code></li> </ul> </li> <li> <p>if you want to set the gtk theme for 2.0</p> </li> </ul> <pre><code># DO NOT EDIT! This file will be overwritten by LXAppearance.\n# Any customization should be done in ~/.gtkrc-2.0.mine instead.\n\ninclude \"/home/totoro/.gtkrc-2.0.mine\"\ngtk-theme-name=\"Adwaita-dark\"\ngtk-icon-theme-name=\"Papirus-Dark\"\ngtk-font-name=\"JetBrainsMono Nerd Font 10\"\ngtk-cursor-theme-name=\"breeze_cursors\"\ngtk-cursor-theme-size=0\ngtk-toolbar-style=GTK_TOOLBAR_BOTH_HORIZ\ngtk-toolbar-icon-size=GTK_ICON_SIZE_LARGE_TOOLBAR\ngtk-button-images=1\ngtk-menu-images=1\ngtk-enable-event-sounds=1\ngtk-enable-input-feedback-sounds=1\ngtk-xft-antialias=1\ngtk-xft-hinting=1\ngtk-xft-hintstyle=\"hintfull\"\n</code></pre>"},{"location":"operating-systems/linux/ricing/themes/gtk/","title":"Gtk","text":""},{"location":"operating-systems/linux/ricing/themes/gtk/#settings","title":"Settings","text":""},{"location":"operating-systems/linux/ricing/themes/gtk/#wayland","title":"Wayland","text":"<ul> <li><code>GSettings</code> is the primary configuration storage for most GNOME programs and indeed used for retrieving the theme name in GTK 3 under <code>Wayland</code>.</li> <li>Specifically, <code>gdkdisplay-wayland</code> uses <code>gtk-theme</code> in the <code>org.gnome.desktop.interface</code> schema.</li> </ul>"},{"location":"operating-systems/linux/ricing/themes/gtk/#x11","title":"X11","text":"<ul> <li>On <code>X11</code>, however, GTK uses the <code>XSETTINGS</code> protocol, where a separate DE-specific daemon gets various settings from wherever it wants, and republishes them in a standard format using X11's selections mechanism.</li> </ul> <p>On startup, each client that should identify the settings window by calling <code>XGetSelectionOwner()</code> for the <code>_XSETTINGS_S[N]</code> selection and select for notification on the settings window by calling <code>XSelectInput()</code> with a mask of <code>StructureNotifyMask|PropertyChangeMask</code>.</p> <p>[...] The client can then proceed to read contents of the <code>_XSETTINGS_SETTINGS</code> property from the settings window and interpret according to the information in the <code>_XSETTINGS_SETTINGS Format</code> section of this document</p> <p>For e.g. in MATE, <code>mate-settings-daemon</code> is the <code>XSETTINGS</code> provider. It reads <code>org.mate.interface</code> from GSettings and re-publishes the value as <code>Net/ThemeName</code> via <code>XSETTINGS</code>, where GTK can finally retrieve it.</p> <p>Usage of the <code>XSETTINGS</code> protocol makes the backend irrelevant \u2013 e.g. older GNOME and MATE versions used <code>GConf</code>, while Xfce uses <code>XfConf</code>, and there is a standalone <code>xsettingsd</code> which uses a text file. (On the other hand, as you can see the protocol is very specific to X11 and cannot be used within Wayland.)</p> <ul> <li>The <code>xsettingsd</code> package also comes with a <code>dump_xsettings</code> tool which dumps data from whatever provider is currently running.</li> </ul> <p>Note that not all desktop environments run an <code>XSETTINGS</code> provider. For example, using LXDE's <code>lxappearance</code> simply edits the configuration files: <code>~/.gtkrc-2.0</code> for GTK 2, and <code>~/.config/gtk-3.0/settings.ini</code> for GTK 3. These are always read, but used at the lowest priority \u2013 the <code>GSettings</code> or <code>XSETTINGS</code> specified parameters always win.</p> <ul> <li>GTK 3 supports <code>$GTK_THEME</code> to temporarily override the theme.</li> <li>In Wayland, GTK 3 reads theme name from <code>GSettings</code>, with configuration file as fallback.</li> <li>In X11, GTK 2/3 retrieve theme name from an <code>XSETTINGS</code> daemon, with configuration file as fallback.</li> <li>GTK 1 does not support anything except file-based configuration (<code>gtkrc</code>).</li> </ul>"},{"location":"operating-systems/linux/ricing/themes/gtk/#references","title":"References","text":"<ul> <li>https://superuser.com/questions/1314999/how-is-my-selected-theme-communicated-to-gtk</li> <li>https://wiki.archlinux.org/title/Xsettingsd</li> <li>https://codeberg.org/derat/xsettingsd</li> </ul>"},{"location":"operating-systems/linux/ricing/themes/switch-light-dark-themes/","title":"Switch between light dark themes","text":""},{"location":"operating-systems/linux/ricing/themes/switch-light-dark-themes/#references","title":"References","text":"<ul> <li>https://wiki.archlinux.org/title/Dark_mode_switching</li> </ul>"},{"location":"operating-systems/linux/ricing/window-managers/i3/","title":"i3","text":""},{"location":"operating-systems/linux/ricing/window-managers/i3/#how-to-pick-shortcuts","title":"How to pick shortcuts","text":"<ul> <li>window manger shortcuts - bind them to Start icon</li> </ul>"},{"location":"operating-systems/linux/ricing/window-managers/i3/#i3-msg","title":"<code>i3-msg</code>","text":"<pre><code>i3-msg \\\n        'split vertical,\n        focus right,\n        move left,\n        layout stacking,\n        focus right,\n        split vertical,\n        focus right,\n        move left,\n        layout stacking'\n</code></pre> <ul> <li><code>i3-msg focus right</code></li> <li><code>i3-msg layout stacking</code></li> <li><code>i3-msg move left</code></li> <li><code>i3-msg 'split vertical'</code></li> </ul>"},{"location":"operating-systems/linux/ricing/window-managers/i3/#resize-keybinding-mode","title":"Resize keybinding mode","text":"<p>Trick is to additional keybinds in the resize mode, so as to do faster resizing.</p> <pre><code>mode \"resize\" {\n        bindsym Left resize shrink width 8 px or 8 ppt\n        bindsym Down resize grow height 8 px or 8 ppt\n        bindsym Up resize shrink height 8 px or 8 ppt\n        bindsym Right resize grow width 8 px or 8 ppt\n\n        # exit resize mode: Enter or Escape\n        bindsym Return mode \"default\"\n        bindsym Escape mode \"default\"\n        bindsym a exec --no-startup-id i3-msg resize set 25 ppt 25 ppt\n}\n</code></pre>"},{"location":"operating-systems/linux/ricing/window-managers/picom/","title":"picom","text":"<ul> <li>black and white filter</li> </ul> <pre><code>picom -b \\\n    --backend glx \\\n    --glx-fshader-win  \"uniform sampler2D tex; uniform float opacity; void main() { vec4 c = texture2D(tex, gl_TexCoord[0].xy); float y = dot(c.rgb, vec3(0.2126, 0.7152, 0.0722)); gl_FragColor = opacity*vec4(y, y, y, c.a); }\"\n</code></pre>"},{"location":"operating-systems/linux/server/","title":"Server Basics","text":""},{"location":"operating-systems/linux/server/#creating-your-own-server-how-to-setup-your-lab-in","title":"Creating Your Own Server: how to setup your lab in","text":"<ul> <li>AWS</li> <li>Azure</li> <li>Digital Ocean</li> <li>Google Cloud</li> <li>others</li> </ul>"},{"location":"operating-systems/linux/server/#get-to-know-your-server","title":"Get to know your server","text":"<ul> <li>Starting with <code>ssh</code>-ing in and some simple commands like:<ul> <li><code>ls</code>,</li> <li><code>uptime</code>,</li> <li><code>free</code>,</li> <li><code>df -h</code>,</li> <li><code>uname -a</code>.</li> </ul> </li> <li>Extensions on doing passwordless login with public keys and and an <code>ssh</code> config file.</li> </ul>"},{"location":"operating-systems/linux/server/#basic-navigation","title":"Basic navigation","text":"<ul> <li>Basic navigation, the \"man\" pages, file hierarchy</li> </ul>"},{"location":"operating-systems/linux/server/#power-trip","title":"Power trip","text":"<ul> <li>Working with <code>sudo</code>, <code>uptime</code>, <code>timezones</code>, changing your hostname</li> </ul>"},{"location":"operating-systems/linux/server/#installing-software-exploring-the-file-structure","title":"Installing software, exploring the file structure","text":"<ul> <li>Using 'apt' to find and install sotware.</li> <li>Use of <code>mc</code> to explore the filesystem.</li> <li>Looking at the contents of:<ul> <li><code>/etc/passwd</code>,</li> <li><code>/etc/ssh/sshd_config</code> and</li> <li><code>/var/log/auth.log</code></li> </ul> </li> </ul>"},{"location":"operating-systems/linux/server/#more-or-less","title":"More or less","text":"<ul> <li>Using <code>more</code>, <code>less</code> and navigating in these.</li> <li>Dotfiles, history, tab completion, and using the <code>nano</code> txt editor</li> <li>Learning <code>vim</code>, the minimal knowledge, but also via <code>vimtutor</code></li> </ul>"},{"location":"operating-systems/linux/server/#the-server-and-its-services","title":"The server and its services","text":"<ul> <li>Installing Apache2, stopping and starting, altering the content, reading logs</li> </ul>"},{"location":"operating-systems/linux/server/#the-infamous-grep-and-other-text-processors","title":"The infamous \"grep\" and other text processors","text":"<ul> <li>Hands-on with text tools like <code>grep</code>, <code>cat</code>, <code>more</code>, <code>less</code>, <code>cut</code>, <code>awk</code> and <code>tail</code> - and piping of course. (and a wave to <code>awk</code> and <code>sed</code>)</li> </ul>"},{"location":"operating-systems/linux/server/#diving-into-networking","title":"Diving into networking","text":"<ul> <li>Looking at open ports with with <code>ss</code>, and a nod to <code>netstat</code>, install <code>nmap</code> and test. Install <code>ufw</code>, set up, enable and test etc. Discuss security resonsibilities as the sysadmin.</li> </ul>"},{"location":"operating-systems/linux/server/#getting-the-computer-to-do-your-work-for-you","title":"Getting the computer to do your work for you","text":"<ul> <li>Covering <code>cron</code>, <code>at</code>, and systemd timers</li> </ul>"},{"location":"operating-systems/linux/server/#finding-things","title":"Finding things","text":"<ul> <li>Finding things with: <code>locate</code>, <code>find</code>, <code>grep</code>, <code>which</code></li> </ul>"},{"location":"operating-systems/linux/server/#transfering-files","title":"Transfering files","text":"<ul> <li>SFTP, the technology, clients, and copying up and down</li> </ul>"},{"location":"operating-systems/linux/server/#who-has-permission","title":"Who has permission?","text":"<ul> <li>Permissions, users, groups, (ACLS and SELinux in the Extension)</li> </ul>"},{"location":"operating-systems/linux/server/#users-and-groups","title":"Users and Groups","text":"<ul> <li>Using <code>adduser</code>, <code>visudo</code> to setup up a restricted \"helper\" to manage our host</li> </ul>"},{"location":"operating-systems/linux/server/#deeper-into-repositories","title":"Deeper into repositories","text":"<ul> <li>Repositories in more detail, how to enable \"Multiverse\", the role of PPAs in Ubuntu, enabling and installing from them</li> </ul>"},{"location":"operating-systems/linux/server/#archiving-and-compressing","title":"Archiving and compressing","text":"<ul> <li>Understanding and using <code>tar</code> and <code>gzip</code></li> </ul>"},{"location":"operating-systems/linux/server/#build-from-the-source","title":"Build from the source","text":"<ul> <li>Installing from source.</li> <li>Discussion, using <code>wget</code> to get a tarball, <code>tar</code> to extract and then configure, make and install.</li> <li>Discussion of security, maintenance issues.</li> </ul>"},{"location":"operating-systems/linux/server/#log-rotation","title":"Log rotation","text":"<ul> <li>Log management and rotation, <code>logrotate</code></li> </ul>"},{"location":"operating-systems/linux/server/#inodes-symlinks-and-other-shortcuts","title":"Inodes, symlinks and other shortcuts","text":"<ul> <li>Inodes, hard links symlinks and <code>stat</code></li> </ul>"},{"location":"operating-systems/linux/server/#scripting","title":"Scripting","text":"<ul> <li>Understanding how scripting work in Linux, the shebang, permissons and <code>$PATH</code>. A couple of simple sample scripts based on the filtering of logs we've been doing. Resources to explore further.</li> </ul>"},{"location":"operating-systems/linux/shells/","title":"Shells","text":"<p>Shell interpretive cycle:</p> <ul> <li>shell issue prompt and wait for you to enter command</li> <li>after a command is entered, the shell scans for the metacharacters and expands abbreviations</li> <li>the shell waits for the command to execute</li> </ul>"},{"location":"operating-systems/linux/shells/#types","title":"Types","text":"<ul> <li>The Bourne family comprising the Bourne shell (/bin/sh) and its derivatives<ul> <li>the Korn shell (/bin/ksh) and</li> <li>Bash (/bin/bash)</li> </ul> </li> <li>the C shell (/bin/csh) and its derivative,<ul> <li>Tcsh (/bin/tcsh)</li> </ul> </li> </ul>"},{"location":"operating-systems/linux/shells/#wildcard-meaning","title":"Wildcard Meaning","text":"<ul> <li><code>*</code> Any Number of characters including none</li> <li><code>?</code> A single character</li> <li><code>[ijk]</code> A single character- either i, j, or k</li> <li><code>[x-z]</code> A single character within the ASCII range of character x and z</li> <li><code>[!ijk]</code> A single character that is not i, j, k</li> <li><code>[!x-z]</code> A single character not in the ASCII range of character x and z</li> <li><code>{pat1, pat2, ...}</code> pat1, pat2, ...</li> </ul>"},{"location":"operating-systems/linux/shells/#redirection","title":"Redirection","text":"<ul> <li><code>0-Standard Input</code> - The file (or stream) representing input, connected to the keyboard.</li> <li><code>1-Standard Output</code> - The file (or stream) representing output, connected to the display.</li> <li><code>2-Standard Error</code> - The file(or stream) representing error, connected to display.</li> </ul> <p>Three standard file are represented by a number called file descriptor. 1,2,3.</p> <ul> <li><code>&lt;</code> - file redirection i.e. taking contents of one file as input</li> <li><code>|</code> - pipe i.e. giving output of one command to another</li> </ul> <p>Taking input from both file and standard input::</p> <ul> <li><code>cat ~ foo</code> first from standard input and then from foo</li> <li> <p><code>cat foo ~ bar</code> first from foo, the stdin then bar</p> </li> <li> <p><code>&gt;</code> - redirecting output to a file</p> </li> <li><code>&gt;&gt;</code> - appending output to a file</li> </ul> <p>File descriptors are implicitly prefixed to the redirection symbols. <code>e.g. &gt; is same as 1&gt;, &lt; is same as &lt;0.</code></p> <ul> <li><code>2&gt;</code> - redirecting error stream</li> <li><code>2&gt;&gt;</code> - appending error stream</li> </ul>"},{"location":"operating-systems/linux/shells/#tyy-stands-for-teletype","title":"(tyy - stands for teletype)","text":"<ul> <li><code>tty</code> - tells the filename of terminal you are using</li> </ul>"},{"location":"operating-systems/linux/shells/#stty-settings-of-tty","title":"(stty - settings of tty)","text":"<ul> <li><code>stty</code> - displays basic settings</li> <li><code>stty -a</code> - displays all tty settings<ul> <li>its first line contains speed, rows, columns, lines of the terminal</li> <li>the it shows the settings of the control characters, in form keyword = value</li> <li>rest line contains the keyword or -keywords :: the prefix - implies that the option is turned off</li> </ul> </li> </ul> <p>Output of <code>stty -a</code>:</p> <pre><code>speed 38400 baud; rows 41; columns 159; line = 0;\nintr = ^C; quit = ^\\; erase = ^?; kill = ^U; eof = ^D; eol = &lt;undef&gt;; eol2 = &lt;undef&gt;; swtch = &lt;undef&gt;; start = ^Q; stop = ^S; susp = ^Z; rprnt = ^R; \nwerase = ^W; lnext = ^V; discard = ^O; min = 1; time = 0;\n-parenb -parodd -cmspar cs8 -hupcl -cstopb cread -clocal -crtscts\n-ignbrk -brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr icrnl -ixon -ixoff -iuclc -ixany -imaxbel iutf8\nopost -olcuc -ocrnl onlcr -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0\nisig icanon iexten echo echoe echok -echonl -noflsh -xcase -tostop -echoprt echoctl echoke -flusho -extproc\n</code></pre> <ul> <li><code>stty sane</code> - restores default settings</li> <li><code>stty -echoe</code> -set the echoe off i.e. now backspace won't erase the characters</li> <li><code>stty -echo</code> -sets the keyboard input display off used for passwords</li> <li><code>stty intr \\^c</code> - sets the interrrupt control character</li> </ul>"},{"location":"operating-systems/linux/shells/#control-characters","title":"Control characters","text":"<ul> <li><code>^s</code> - stop scrolling the output and lock keyboard</li> <li><code>^q</code> - start scrolling and unlock keyboard</li> <li><code>^u</code> - kills the line without executing the command</li> <li><code>^c</code> - send interrrupt signal</li> <li><code>^\\</code> - end the sigkill signal - but creates a core file containing the memory dump of the program</li> <li><code>^z</code> - suspends the program and return to the shell</li> <li><code>^d</code> - eof cahracter (terminates the login session)</li> <li><code>^h</code> - erases text (backspace)</li> <li><code>^j</code> - alternative to the enter (carriage return)</li> <li><code>^m</code> - alternative to the enter</li> <li><code>sitty sane</code> - restores the terminal</li> </ul>"},{"location":"operating-systems/linux/shells/colors/","title":"Colors on Terminals","text":"<p>There are multiple ways you can use colors in linux terminals.</p> <ul> <li>https://en.wikipedia.org/wiki/ANSI_escape_code<ul> <li>this is mostly used to set the colors</li> </ul> </li> <li>https://misc.flogisoft.com/bash/tip_colors_and_formatting</li> <li>https://askubuntu.com/questions/558280/changing-colour-of-text-and-background-of-terminal</li> <li>https://unix.stackexchange.com/questions/148/colorizing-your-terminal-and-shell-environment</li> </ul>"},{"location":"operating-systems/linux/shells/colors/#dircolors","title":"<code>dircolors</code>","text":"<ul> <li><code>dircolors</code> controls the color at terminal.</li> <li>If you are unable to read text of <code>ls</code> due to some bad colors on</li> <li>https://askubuntu.com/questions/466198/how-do-i-change-the-color-for-directories-with-ls-in-the-console</li> </ul>"},{"location":"operating-systems/linux/shells/shell-prompt/","title":"Prompt","text":"<p><code>ps</code> stands for prompt statement</p>"},{"location":"operating-systems/linux/shells/shell-prompt/#types-of-prompt-statement","title":"Types of prompt statement","text":"<ul> <li><code>PS1</code> - Default Interactive prompt</li> <li><code>PS2</code> - Continuation interactive prompt</li> <li><code>PS3</code> - Prompt used by \"select\" inside shell script</li> <li><code>PS4</code> - Used by \"set -x\" to prefix tracing output</li> <li><code>PROMPT_COMMAND</code> - Bash shell executes the content of the PROMPT_COMMAND just before displaying the PS1 variable.</li> </ul>"},{"location":"operating-systems/linux/shells/shell-prompt/#editing-the-ps1-variable","title":"Editing the <code>PS1</code> variable","text":"<ul> <li><code>\\u</code> - username</li> <li><code>\\u</code> - hostname</li> <li><code>\\w</code> - full path of current working directory</li> <li><code>\\$(command)</code> - the output of command \\ is used to escape the $</li> <li><code>\\t</code> - current time</li> <li><code>\\e[</code> - Indicates the beginning of color prompt</li> <li><code>x;ym</code> - Indicates color code. Use the color code values.</li> <li><code>\\e[m</code> - indicates the end of color prompt</li> <li><code>\\a</code> an ASCII bell character (07)</li> <li><code>\\d</code> the date in \"Weekday Month Date\" format (e.g., \"Tue May 26\")</li> <li><code>\\D {format}</code> - the format is passed to strftime(3) and the result is   inserted into the prompt string; an empty format results in a locale-specific time representation.   The braces are required</li> <li><code>\\e</code> an ASCII escape character (033)</li> <li><code>\\h</code> the hostname up to the first part</li> <li><code>\\H</code> the hostname</li> <li><code>\\j</code> the number of jobs currently managed by the shell</li> <li><code>\\l</code> the basename of the shell's terminal device name</li> <li><code>\\n</code> newline</li> <li><code>\\r</code> carriage return</li> <li><code>\\s</code> the name of the shell, the basename of $0 (the portion following the final slash)</li> <li><code>\\t</code> the current time in 24-hour HH:MM:SS format</li> <li><code>\\T</code> the current time in 12-hour HH:MM:SS format</li> <li><code>\\@</code> the current time in 12-hour am/pm format</li> <li><code>\\A</code> the current time in 24-hour HH:MM format</li> <li><code>\\u</code> the username of the current user</li> <li><code>\\v</code> the version of bash (e.g., 2.00)</li> <li><code>\\V</code> the release of bash, version + patch level (e.g., 2.00.0)</li> <li><code>\\w</code> the current working directory, with $HOME abbreviated with a tilde</li> <li><code>\\W</code> the basename of the current working directory, with $HOME abbreviated with a tilde</li> <li><code>\\!</code> the history number of this command</li> <li><code>\\#</code> the command number of this command</li> <li><code>\\$</code> if the effective UID is 0, a #, otherwise a $</li> <li><code>\\nnn</code> the character corresponding to the octal number nnn</li> <li><code>\\\\</code> a backslash</li> <li><code>\\[</code> begin a sequence of non-printing characters, which could be used to   embed a terminal control sequence into the prompt</li> <li><code>\\]</code> end a sequence of non-printing character</li> </ul>"},{"location":"operating-systems/linux/shells/terminals/","title":"Terminals","text":"<ul> <li>terminals have long history</li> <li>earlier computing was all based on CLI's</li> </ul> <p>Now you have pseudo terminals. To understand what that means, when you login to your linux machine you are greeted with a login manager(or display manager) where you enter your login details.</p> <p>But that was not always the case, in this case you already have a X server running which controls the GUI you see on the screen. You switch to another virtual terminal <code>tty</code>. There are 7 loaded by default, and you can switch between them using <code>Ctrl+Alt+no</code>, where no can be anywhere form 1-7.</p> <p>So for each of these virtual terminal there is process attached with them.</p> <ul> <li>https://unix.stackexchange.com/questions/149236/look-up-the-device-from-its-tty-file</li> </ul> <p>Now for pseudo terminals, you can set the <code>TERM</code> variable to show the text capabilities it support.</p> <ul> <li>https://askubuntu.com/questions/920908/what-does-export-term-linux-actually-do-when-inside-a-script</li> </ul> <p>According to GNU gettext manual page, the TERM variable \"...contains a identifier for the text window's capabilities\". In other words, it just tells the system what kind of terminal you're supposedly using and how the text on screen should be adapted.</p> <p><code>TERM=linux</code> means that you're supposedly going to be using Linux console, so the output will be minimalistic, might not have support for some languages.</p>"},{"location":"operating-systems/linux/shells/list/bash/","title":"bash Shell","text":""},{"location":"operating-systems/linux/shells/list/fish/","title":"fish Shell","text":""},{"location":"operating-systems/linux/shells/list/zsh/","title":"zsh Shell","text":""},{"location":"operating-systems/linux/shells/list/zsh/#resources","title":"Resources","text":"<ul> <li>Many of important zsh repositories</li> </ul>"},{"location":"operating-systems/linux/shells/list/zsh/#problems-you-may-face","title":"Problems you may face","text":"<ul> <li>Bad Colors from tab completion - link   Basically run these commands so that zsh follow your <code>dircolors</code> style:</li> </ul> <pre><code>eval \"$(dircolors)\"\nzstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}\n</code></pre>"},{"location":"operating-systems/linux/shells/list/zsh/#zsh-completions","title":"zsh completions","text":"<ul> <li>locations of completion files<ul> <li><code>/usr/local/share/zsh/site-functions</code> or</li> <li><code>$fpath</code> variable</li> </ul> </li> </ul>"},{"location":"operating-systems/linux/shells/list/zsh/#ohmyzsh","title":"ohmyzsh","text":"<ul> <li>Nice Plugins - <code>git</code>, <code>autojump</code>, <code>zsh-autosuggestions</code></li> </ul>"},{"location":"operating-systems/linux/shells/scripting/","title":"Shell Scripting","text":"<ul> <li>https://tldp.org/LDP/abs/html/</li> <li>https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html</li> </ul>"},{"location":"operating-systems/linux/shells/scripting/#before-you-start","title":"Before you start","text":""},{"location":"operating-systems/linux/shells/scripting/#posix","title":"POSIX","text":"<ul> <li>A family of open system standards based on Unix.</li> <li> <p>Bash is primarily concerned with the Shell and Utilities portion of the POSIX 1003.1 standard.</p> </li> <li> <p>Before you start you should know what shell is, shell is a program which which</p> <ul> <li>help you to interact with the kernel on linux</li> <li>where you input command and it run them</li> <li>it shows the output of command</li> </ul> </li> <li>a shell is simply a macro processor that executes commands.</li> <li>The term macro processor means functionality<ul> <li>where text and symbols are expanded to create larger expressions.</li> </ul> </li> <li>There are many types of shell, but here we are taking only about <code>bash</code>     the most common one found on gnu/linux</li> <li>there are other shell too like<ul> <li><code>zsh</code></li> <li><code>csh</code></li> <li><code>ksh</code></li> <li><code>powershell</code> cross platform mainly for windows</li> </ul> </li> </ul> <p>You can use these other shells, and still use bash scripts because at the top of script you declare which shell you want to use. Also note that not all compatibility is maintained, so write the version of bash for which you wrote the script at the top. Note that even though you can run the scripts, but you cannot use some functionality provided by bash in you shell, if you shell don't support it.</p> <ul> <li>Shell Syntax - What your input means to the shell.</li> <li>Shell Commands - The types of commands you can use.</li> <li>Shell Functions - Grouping commands by name.</li> <li>Shell Parameters - How the shell stores values.</li> <li>Shell Expansions - How Bash expands parameters and the various expansions available.</li> <li>Redirections - A way to control where input and output go.</li> <li>Executing Commands - What happens when you run a command.</li> <li>Shell Scripts - Executing files of shell commands.</li> </ul>"},{"location":"operating-systems/linux/shells/scripting/#getting-help","title":"Getting help","text":"<ul> <li><code>man</code></li> <li><code>man -k</code> <code>apropos</code></li> <li><code>man -f</code> <code>whatis</code></li> </ul>"},{"location":"operating-systems/linux/shells/scripting/#sendign-signals-in-terminal","title":"Sendign signals in terminal","text":"<ul> <li><code>SIGINT</code> - <code>Ctrl+C</code> - send when user wants to interrupt the process</li> <li><code>SIGSTP</code> - <code>Ctrl+Z</code> - stop process temporarily</li> <li><code>SIGQUIT</code> - <code>Ctrl+\\</code></li> <li> <p><code>SIGINFO</code> - <code>Ctrl+T</code> not supported by all</p> </li> <li> <p>also <code>Ctrl+D</code> don't send a signal, it gives <code>EOF</code> end of file, and closes the <code>STDIN</code></p> </li> </ul>"},{"location":"operating-systems/linux/shells/scripting/cookbook/","title":"Shell Scripting Cookbook","text":""},{"location":"operating-systems/linux/shells/scripting/cookbook/#given-some-markdown-files-you-need-to-merge-them-and-make-a-single-file-and-convert-that-file-to-pdf-file-using-pandoc","title":"Given some markdown files you need to merge them and make a single file and convert that file to pdf file using pandoc","text":"<pre><code>#!/bin/bash\n\nfiles=(\"daa\" \"dbms\" \"ml\" \"os\" \"scala\")\n\noutputfile=\"final.md\"\nrm \"$outputfile\"\n\necho -e '\\\\newpage' &gt;&gt; \"$outputfile\"\n\nfor i in \"${files[@]}\"\ndo\n    cat \"$i.md\" &gt;&gt; \"$outputfile\"\n    echo -e '\\n\\\\newpage\\n' &gt;&gt; \"$outputfile\"\ndone\n\npandoc --template default.latex \"$outputfile\" -o syllabus.pdf --toc -s\n</code></pre>"},{"location":"operating-systems/linux/shells/scripting/cookbook/#create-folders-with-numbers-like-hi1-hi2-hi3","title":"Create folders with numbers, like hi1 hi2 hi3","text":"<pre><code>#!/bin/bash\n# Basic while loop\ncounter=1\nwhile [ $counter -le 40 ]\n    do\n    mkdir \"topic$counter\"\n    echo $counter\n    ((counter++))\ndone\n</code></pre>"},{"location":"operating-systems/linux/shells/scripting/shell-syntax/","title":"Shell Syntax","text":""},{"location":"operating-systems/linux/shells/scripting/shell-syntax/#introduction","title":"Introduction","text":"<p>start with a she bang</p> <pre><code>#!/bin/bash\n#!/usr/bin/env bash\n</code></pre>"},{"location":"operating-systems/linux/shells/scripting/shell-syntax/#printing","title":"Printing","text":"<pre><code>echo hi\necho \"hello\"\na=\"1\"\necho $a\n</code></pre>"},{"location":"operating-systems/linux/shells/scripting/shell-syntax/#variables","title":"Variables","text":"<pre><code>a=\"this is it\"\na = \"sdaf\" # this is wrong no space\n</code></pre>"},{"location":"operating-systems/linux/shells/scripting/shell-syntax/#parameter-expansion","title":"Parameter expansion","text":"<pre><code>a=\"a string\"\necho \"${a}\"\necho \"${a/string/strings/}\" # replace string with strings\necho ${a:0:3} # print form 0, and then 3 characters\necho ${a:-5} # return last five character form the string\necho ${#a} # the length of the string\necho ${a:-\"or print this is a is missing or empty\"}\n</code></pre>"},{"location":"operating-systems/linux/shells/scripting/shell-syntax/#integer","title":"Integer","text":"<pre><code>a=7\n</code></pre>"},{"location":"operating-systems/linux/shells/scripting/shell-syntax/#arrays","title":"Arrays","text":"<pre><code>array0=(one two three four five six)\necho $array # one\necho ${array0[0]} # one\necho ${array0[1]} # two\necho ${array0[@]} # entire array\necho ${#array0[1]} # 3 length of two\necho #{array0[@]:3:2} # print from 3rd index and two elements\n\n# print the array\nfor i in \"${array0[@]}\";do\n    echo \"$i\"\ndone\n</code></pre>"},{"location":"operating-systems/linux/shells/scripting/shell-syntax/#brace-expansion","title":"brace expansion","text":"<pre><code>echo {1..10} # 1 2 3 4 5 6 7 8 9 10\necho {a..z}\n</code></pre>"},{"location":"operating-systems/linux/shells/scripting/shell-syntax/#built-in-variables","title":"built in variables","text":"<ul> <li><code>$?</code> - last program return value</li> <li><code>$$</code> - script pid</li> <li><code>$#</code> - number of argument passed to script</li> <li><code>$@</code> - all arguments passed to script</li> <li><code>$1</code> - first argument,</li> <li><code>$2</code> - second argument, and so on...</li> </ul>"},{"location":"operating-systems/linux/shells/scripting/shell-syntax/#run-external-command","title":"run external command","text":"<pre><code>echo \"$(pwd)\"\n</code></pre>"},{"location":"operating-systems/linux/shells/scripting/shell-syntax/#input","title":"input","text":"<pre><code>echo \"enter amount: \"\nread amount\necho \"amount: $amount\"\n</code></pre>"},{"location":"operating-systems/linux/shells/scripting/shell-syntax/#flow-control","title":"flow control","text":""},{"location":"operating-systems/linux/shells/scripting/shell-syntax/#if-else","title":"if else","text":"<pre><code>if [ $amount == 1000 ];then\n    echo \"expensive\"\nfi\n</code></pre> <pre><code>if [ $amount == 1000 ];then\n    echo \"expensive\"\nelse\n    echo \"cheap\"\nfi\n</code></pre> <pre><code>if [ $amount == 1000 ];then\n    echo \"expensive\"\nelif [ $amount == 500 ];then\n    echo \"nice\"\nelse\n    echo \"cheap\"\nfi\n</code></pre> <pre><code>echo \"Always executed\" || echo \"Only executed if first command fails\"\necho \"Always executed\" &amp;&amp; echo \"Only executed if first command does NOT fail\"\n</code></pre>"},{"location":"operating-systems/linux/shells/scripting/shell-syntax/#conditionals","title":"conditionals","text":"<ul> <li><code>-a file</code> - <code>True</code> if <code>file</code> exists.</li> <li><code>-b file</code> - <code>True</code> if <code>file</code> exists and is a block special file.</li> <li><code>-c file</code> - <code>True</code> if <code>file</code> exists and is a character special file.</li> <li><code>-d file</code> - <code>True</code> if <code>file</code> exists and is a directory.</li> <li><code>-e file</code> - <code>True</code> if <code>file</code> exists.</li> <li><code>-f file</code> - <code>True</code> if <code>file</code> exists and is a regular file.</li> <li><code>-g file</code> - <code>True</code> if <code>file</code> exists and its set-group-id bit is set.</li> <li><code>-h file</code> - <code>True</code> if <code>file</code> exists and is a symbolic link.</li> <li><code>-k file</code> - <code>True</code> if <code>file</code> exists and its \"sticky\" bit is set.</li> <li><code>-p file</code> - <code>True</code> if <code>file</code> exists and is a named pipe (FIFO).</li> <li><code>-r file</code> - <code>True</code> if <code>file</code> exists and is readable.</li> <li><code>-s file</code> - <code>True</code> if <code>file</code> exists and has a size greater than zero.</li> <li><code>-t fd</code> - <code>True</code> if <code>file</code> descriptor <code>fd</code> is open and refers to a terminal.</li> <li><code>-u file</code> - <code>True</code> if <code>file</code> exists and its set-user-id bit is set.</li> <li><code>-w file</code> - <code>True</code> if <code>file</code> exists and is writable.</li> <li><code>-x file</code> - <code>True</code> if <code>file</code> exists and is executable.</li> <li><code>-G file</code> - <code>True</code> if file exists and is owned by the effective group id.</li> <li><code>-L file</code> - <code>True</code> if file exists and is a symbolic link.</li> <li><code>-N file</code> - <code>True</code> if file exists and has been modified since it was last read.</li> <li><code>-O file</code> - <code>True</code> if file exists and is owned by the effective user id.</li> <li><code>-S file</code> - <code>True</code> if file exists and is a socket.</li> <li><code>file1 -ef file2</code><ul> <li><code>True</code> if <code>file1</code> and <code>file2</code> refer to the same device and inode numbers.</li> </ul> </li> <li><code>file1 -nt file2</code> -<ul> <li><code>True</code> if <code>file1</code> is newer (according to modification date) than file2, or if file1 exists and file2 does not.</li> </ul> </li> <li><code>file1 -ot file2</code><ul> <li><code>True</code> if <code>file1</code> is older than file2, or if file2 exists and file1 does not.</li> </ul> </li> <li><code>-o optname</code> - True if the shell option optname is enabled.   The list of options appears in the description of the -o option to the set builtin.</li> <li><code>-v varname</code> - True if the shell variable varname is set.</li> <li><code>-R varname</code> - True if the shell variable varname is set and is a name reference.</li> <li><code>-z string</code> - True if the length of string is zero.</li> <li><code>-n string</code> or <code>string</code> True if the length of string is non-zero.</li> <li><code>string1 == string2</code> or <code>string1 = string2</code> - True if the strings are equal.   When used with the <code>[[</code> command, this performs pattern matching.   <code>=</code> should be used with the test command for POSIX conformance.</li> <li><code>string1 != string2</code> True if the strings are not equal.</li> <li><code>string1 &lt; string2</code> True if string1 sorts before string2 lexicographically.</li> <li><code>string1 &gt; string2</code> True if string1 sorts after string2 lexicographically.</li> <li><code>arg1 OP arg2</code> OP is one of<ul> <li><code>-eq</code>, equal to</li> <li><code>-ne</code>, not equal to</li> <li><code>-lt</code>, less than</li> <li><code>-le</code>, less than or equal to</li> <li><code>-gt</code>, greater than</li> <li><code>-ge</code>. greater than or equal to</li> <li>When used with the <code>[[</code> command, <code>Arg1</code> and <code>Arg2</code> are evaluated as arithmetic expressions.</li> </ul> </li> </ul>"},{"location":"operating-systems/linux/shells/scripting/shell-syntax/#and-or","title":"and, or","text":"<pre><code>if [ \"$Name\" == \"Steve\" ] &amp;&amp; [ \"$Age\" -eq 15 ]\nthen\n    echo \"This will run if $Name is Steve AND $Age is 15.\"\nfi\n\nif [ \"$Name\" == \"Daniya\" ] || [ \"$Name\" == \"Zach\" ]\nthen\n    echo \"This will run if $Name is Daniya OR Zach.\"\nfi\n</code></pre>"},{"location":"operating-systems/linux/shells/scripting/shell-syntax/#regex","title":"regex","text":"<ul> <li><code>~=</code> is used</li> </ul> <pre><code>Email=me@example.com\nif [[ \"$Email\" =~ [a-z]+@[a-z]{2,}\\.(com|net|org) ]]\nthen\n    echo \"Valid email!\"\nfi\n</code></pre>"},{"location":"operating-systems/linux/shells/scripting/shell-syntax/#case","title":"case","text":"<pre><code>case \"$Variable\" in\n    # List patterns for the conditions you want to meet\n    0) echo \"There is a zero.\";;\n    1) echo \"There is a one.\";;\n    *) echo \"It is not null.\";;  # match everything\nesac\n</code></pre>"},{"location":"operating-systems/linux/shells/scripting/shell-syntax/#run-command-in-background","title":"run command in background","text":"<pre><code>sleep 30 &amp;\n</code></pre> <ul> <li>how to check the running background jobs use <code>jobs</code> command</li> <li>to bring a job to foreground <code>fg pid</code></li> <li><code>ctrl+c</code> to kill a process</li> <li><code>ctrl+z</code> to pause a process</li> <li><code>bg</code> resume process in bg which have been paused</li> <li> <p><code>kill %2</code> kill job 2</p> </li> <li> <p>run a command and print its file descriptor</p> <ul> <li><code>echo &lt;(echo \"#helloworld\")</code></li> </ul> </li> </ul>"},{"location":"operating-systems/linux/shells/scripting/shell-syntax/#expressions","title":"expressions","text":"<pre><code>echo $(( 10 + 5 )) # 15\n</code></pre> <ul> <li><code>id++</code> <code>id--</code> variable post-increment and post-decrement</li> <li><code>++id</code> <code>--id</code> variable pre-increment and pre-decrement</li> <li><code>-</code> <code>+</code> unary minus and plus</li> <li><code>!</code> <code>~</code> logical and bitwise negation</li> <li><code>**</code> exponentiation</li> <li><code>*</code> <code>/</code> <code>%</code> multiplication, division, remainder</li> <li><code>+</code> <code>-</code> addition, subtraction</li> <li><code>&lt;&lt;</code> <code>&gt;&gt;</code> left and right bitwise shifts</li> <li><code>&lt;=</code> <code>&gt;=</code> <code>&lt;</code> <code>&gt;</code> comparison</li> <li><code>==</code> <code>!=</code> equality and inequality</li> <li><code>&amp;</code> bitwise AND</li> <li><code>^</code> bitwise exclusive OR</li> <li><code>|</code> bitwise OR</li> <li><code>&amp;&amp;</code> logical AND</li> <li><code>||</code> logical OR</li> <li><code>expr ? expr : expr</code> conditional operator</li> <li><code>=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>+=</code> <code>-=</code> <code>&lt;&lt;=</code> <code>&gt;&gt;=</code> <code>&amp;=</code> <code>^=</code> <code>|=</code> assignment</li> <li><code>expr1 , expr2</code> comma</li> </ul>"},{"location":"operating-systems/linux/shells/scripting/shell-syntax/#loops","title":"loops","text":"<pre><code>for Variable in {1..3}\ndo\n    echo \"$Variable\"\ndone\n</code></pre> <pre><code>for ((a=1; a &lt;= 3; a++))\ndo\n    echo $a\ndone\n</code></pre> <pre><code>for Variable in file1 file2\ndo\n    cat \"$Variable\"\ndone\n</code></pre> <pre><code>for Output in $(ls)\ndo\n    cat \"$Output\"\ndone\n</code></pre> <pre><code>while [ true ]\ndo\n    echo \"loop body here...\"\n    break\ndone\n</code></pre>"},{"location":"operating-systems/linux/shells/scripting/shell-syntax/#functions","title":"functions","text":"<pre><code>function foo ()\n{\n    echo \"Arguments work just like script arguments: $@\"\n    echo \"And: $1 $2...\"\n    echo \"This is a function\"\n    returnValue=0    # Variable values can be returned\n    return $returnValue\n}\n</code></pre>"},{"location":"operating-systems/linux/shells/scripting/shell-syntax/#exit-shell-script","title":"exit shell script","text":"<ul> <li>do the cleanup, remove temporary files you created</li> <li>The <code>trap</code> command allows you to execute a command whenever your script   receives a signal.</li> <li>Here, <code>trap</code> will execute <code>rm</code> if it receives any of the three listed signals.</li> </ul> <pre><code>trap \"rm $TEMP_FILE; exit\" SIGHUP SIGINT SIGTERM\n</code></pre>"},{"location":"operating-systems/linux/shells/shell-build-in/","title":"Shell Build In Commands","text":"<p>Shell built-in commands are commands that are built into the shell itself, and they are executed directly by the shell without invoking external programs.</p> <ul> <li><code>cd</code> - Used for changing the current working directory.</li> <li><code>echo</code> - Displays text or variables to the terminal.</li> <li><code>export</code> - Sets environment variables.</li> <li><code>unset</code> - Removes environment variables.</li> <li><code>alias</code> - Defines and displays aliases for commands.</li> <li><code>history</code> - Shows command history.</li> <li><code>type</code> - Displays information about a command (e.g., whether it's an alias, built-in, or external command).</li> <li><code>exit</code> - Exits the current shell session.</li> <li><code>logout</code> - Logs out of the current shell session (for login shells).</li> <li><code>source</code> -(or dot): Executes commands from a script or file in the current shell environment.</li> <li><code>builtin</code> - Displays a list of shell built-in commands.</li> <li><code>jobs</code> - Lists background jobs.</li> <li><code>fg</code> - Brings a background job to the foreground.</li> <li><code>bg</code> - Resumes a background job.</li> <li><code>ulimit</code> - Sets or displays user-level resource limits.</li> <li><code>exec</code> - Replaces the current shell with a specified command, often used to execute a command without creating a new process.</li> <li><code>wait</code> - Waits for background processes to finish.</li> </ul>"},{"location":"operating-systems/linux/shells/shell-build-in/echo/","title":"echo","text":"<ul> <li><code>echo [text to print]</code></li> <li><code>echo 'text to print as it is'</code></li> <li><code>echo -e \"interpret escape characters\"</code></li> <li><code>echo \"$var\"</code> - prints the variable var</li> </ul>"},{"location":"operating-systems/linux/shells/shell-build-in/echo/#escape-characters","title":"Escape characters","text":"<ul> <li><code>\\a</code> - bell</li> <li><code>\\b</code> - backspace</li> <li><code>\\c</code> - no newline</li> <li><code>\\f</code> - formfeed</li> <li><code>\\n</code> - new line</li> <li><code>\\r</code> - carriage return</li> <li><code>\\t</code> - tab</li> <li><code>\\v</code> - vertical tab</li> <li><code>\\\\</code> - back slash</li> <li><code>\\0n</code> - ascii charcater represented by octal value n</li> </ul>"},{"location":"operating-systems/linux/sound/pactl/","title":"pactl","text":"<ul> <li><code>pacmd list-sinks</code></li> <li><code>pacmixer</code></li> <li><code>pactl</code> - Control a running PulseAudio sound server</li> <li><code>pactl load-module module-combine-sink</code></li> <li><code>pactl unload-module module-combine-sink</code></li> </ul> <pre><code>pacmd list-sinks | \n    awk '/^\\s+name: /{indefault = $2 == \"&lt;'\"$(getdefaultsinkname)\"'&gt;\"} /^\\s+volume: / &amp;&amp; indefault {print $5; exit}'\n</code></pre> <pre><code>pacmd list-sinks | \n    awk  '/^\\s+name: /{indefault = $2 == \"&lt;'\"$(getdefaultsinkname)\"'&gt;\"} \\s+volume: / &amp;&amp; indefault {print $5; exit}' | \n    sed  's/%//'\n</code></pre> <pre><code>pacmd list-sinks | \n    awk  '/^\\s+name: /{indefault = $2 == \"&lt;'\"alsa_output.pci-0000_00_1f.3.analog-stereo\"'&gt;\"} \\s+volume: / &amp;&amp; indefault {print $5; exit}' | \n    sed  's/%//'\n</code></pre> <pre><code>pacmd stat | \n    awk -F\": \" '/^Default sink name: /{print $2}'\n</code></pre>"},{"location":"operating-systems/linux/systemd/bluetoothctl/","title":"bluetoothctl","text":"<p>link</p> <pre><code>[bluetooth]# power on\n[bluetooth]# agent on\n[bluetooth]# default-agent\n[bluetooth]# scan on\n</code></pre>"},{"location":"operating-systems/linux/systemd/loginctl/","title":"loginctl","text":"<ul> <li><code>loginctl session-status</code></li> <li><code>loginctl terminate-session $XDG_SESSION_ID</code></li> </ul>"},{"location":"operating-systems/linux/virtual-machines/","title":"Virtual Machine on linux","text":""},{"location":"operating-systems/linux/virtual-machines/#hypervisor","title":"Hypervisor","text":"<ul> <li>A hypervisor, also known as a virtual machine monitor (VMM) or virtualizer, is a    type of computer software, firmware or hardware that creates and runs virtual machines.</li> <li>https://en.wikipedia.org/wiki/Hypervisor</li> </ul> <p>Here is a list of some, (note that some of there allow use to view VM generated by other Hypervisor)</p>"},{"location":"operating-systems/linux/virtual-machines/#qemu","title":"QEMU","text":"<ul> <li>QEMU is an CLI and userspace program to manage emulation and virtualization and    can use KVM when it creates virtual machines.</li> <li>https://en.wikipedia.org/wiki/QEMU</li> </ul>"},{"location":"operating-systems/linux/virtual-machines/#virsh","title":"virsh","text":""},{"location":"operating-systems/linux/virtual-machines/#gnome-boxed","title":"GNOME Boxed","text":"<ul> <li>https://en.wikipedia.org/wiki/GNOME_Boxes</li> </ul>"},{"location":"operating-systems/linux/virtual-machines/#kvm-kernel-based-virtual-machine","title":"KVM (Kernel-based Virtual Machine)","text":"<ul> <li>KVM is the technology in the Linux kernel for using accelerated virtualization.</li> <li>Kernel-based Virtual Machine (KVM) is a free and open-source virtualization module in    the Linux kernel that allows the kernel to function as a hypervisor.</li> <li>https://en.wikipedia.org/wiki/Kernel-based_Virtual_Machine</li> </ul>"},{"location":"operating-systems/linux/virtual-machines/#libvirt","title":"libvirt","text":"<ul> <li>libvirt provides an abstracted api for storage, network, computer, and virtualization.    So other programs or people can manage it by one interface instead of manually</li> <li>Libvirt offers a single API to manage different hypervisors and virtualization technologies,    including KVM and QEMU. This means that administrators and tools can use the same commands and    API calls to manage VMs regardless of the underlying hypervisor.</li> <li>https://en.wikipedia.org/wiki/Libvirt</li> </ul>"},{"location":"operating-systems/linux/virtual-machines/#virt-manager","title":"virt-manager","text":"<ul> <li>A graphical interface for managing virtual machines, which uses libvirt in the background.</li> <li>https://en.wikipedia.org/wiki/Virt-manager</li> <li>https://virt-manager.org/</li> </ul>"},{"location":"operating-systems/linux/virtual-machines/#virsh_1","title":"<code>virsh</code>","text":"<ul> <li>A command-line tool provided by libvirt for managing VMs.</li> <li>Manage network resources:<ul> <li><code>sudo virsh net-list --all</code></li> <li><code>sudo virsh net-start default</code> - start default network</li> <li><code>sudo virsh net-autostart default</code> - to autostart on boot</li> </ul> </li> <li>https://libvirt.org/manpages/virsh.html</li> </ul>"},{"location":"operating-systems/windows/","title":"Windows","text":""},{"location":"operating-systems/windows/#outline","title":"Outline","text":"<ul> <li>Software</li> <li>Manual</li> </ul>"},{"location":"operating-systems/windows/#resources","title":"Resources","text":"<ul> <li>Awesome Windows</li> <li>Command Line Tricks</li> <li>Microsoft Open Source Projects</li> <li>Windows Terminal Colour Schemes - just copy paste the theme you like</li> <li>Rainmeter - desktop customizations</li> <li>oh-my-posh - for powershell</li> <li>posh-git</li> </ul>"},{"location":"operating-systems/windows/powershell/","title":"Powershell","text":"<p>If you want to run the loadup script at powershell startup. Proceed with your own risk.</p> <pre><code>Set-ExecutionPolicy -ExecutionPolicy Unrestricted\n</code></pre>"},{"location":"operating-systems/windows/powershell/#about-powershell","title":"About Powershell","text":"<ul> <li>so powershell is the new open source version of shell that   microsoft is working on.</li> <li>it is cross compatible, that is can run on linux too</li> <li> <p>it is better than cmd, because you can pipe one commands another</p> </li> <li> <p>PowerShell is a task automation and configuration management framework from Microsoft</p> </li> <li> <p>consisting of a command-line shell and the associated scripting language.</p> </li> <li> <p>Initially a Windows component only, known as Windows PowerShell,   it was made open-source and cross-platform on 18 August 2016   with the introduction of PowerShell Core.</p> </li> <li> <p>The former is built on the .NET Framework, the latter on .NET Core.</p> </li> </ul>"},{"location":"operating-systems/windows/powershell/#types-of-powershell","title":"Types of powershell","text":"<ul> <li> <p>yes, there are two version of powershell desktop, and powershell core</p> <ul> <li>one built on top of .net framework - this one comes with windows</li> <li>another uses .net core - this you can install</li> </ul> </li> <li> <p>what is the difference?</p> <ul> <li>so the one that comes with windows, it has additional modules, which can be only be supported by windows.</li> <li>the core version - this have some generic modules which all operating systems can support</li> </ul> </li> </ul>"},{"location":"operating-systems/windows/powershell/#how-to-check-which-version-you-are-running","title":"How to check which version you are running","text":"<ul> <li><code>$PSVersionTable</code></li> <li>this will give output as follows</li> </ul> <pre><code>Name                           Value\n----                           -----\nPSVersion                      5.1.19041.1645 &lt;--------this is the version\nPSEdition                      Desktop &lt;---------------this is the type\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nBuildVersion                   10.0.19041.1645\nCLRVersion                     4.0.30319.42000\nWSManStackVersion              3.0\nPSRemotingProtocolVersion      2.3\nSerializationVersion           1.1.0.1\n</code></pre>"},{"location":"operating-systems/windows/powershell/#documentation","title":"Documentation","text":"<ul> <li>https://docs.microsoft.com/en-us/powershell/scripting/how-to-use-docs?view=powershell-7.2</li> </ul>"},{"location":"operating-systems/windows/powershell/#configuration","title":"Configuration","text":"<ul> <li>so this is complicated, there are different config files</li> <li> <p>the config files are called Profiles in powershell</p> </li> <li> <p>so how many types of profiles can there be - 4</p> <ul> <li>All Users, All Hosts</li> <li>All Users, Current Host</li> <li>Current User, All Hosts</li> <li>Current User, Current Host</li> </ul> </li> <li> <p>so if you see <code>Current User, Current Host</code> maybe the best to start with</p> </li> </ul>"},{"location":"operating-systems/windows/powershell/#where-are-these-located","title":"where are these located","text":"<ul> <li> <p>for powershell desktop (v5)</p> <ul> <li>All Users, All Hosts<ul> <li><code>$PSHOME\\Profile.ps1</code></li> </ul> </li> <li>All Users, Current Host<ul> <li><code>$PSHOME\\Microsoft.PowerShell_profile.ps1</code></li> </ul> </li> <li>Current User, All Hosts<ul> <li><code>$Home\\[My ]Documents\\WindowsPowerShell\\Profile.ps1</code></li> </ul> </li> <li>Current user, Current Host<ul> <li><code>$Home\\[My ]Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1</code></li> </ul> </li> </ul> </li> <li> <p>for powershell core</p> <ul> <li>All Users, All Hosts<ul> <li>Windows - <code>$PSHOME\\Profile.ps1</code></li> <li>Linux - <code>/usr/local/microsoft/powershell/7/profile.ps1</code></li> <li>macOS - <code>/usr/local/microsoft/powershell/7/profile.ps1</code></li> </ul> </li> <li>All Users, Current Host<ul> <li>Windows - <code>$PSHOME\\Microsoft.PowerShell_profile.ps1</code></li> <li>Linux - <code>/usr/local/microsoft/powershell/7/Microsoft.Powershell_profile.ps1</code></li> <li>macOS - <code>/usr/local/microsoft/powershell/7/Microsoft.Powershell_profile.ps1</code></li> </ul> </li> <li>Current User, All Hosts<ul> <li>Windows - <code>$Home\\[My ]Documents\\PowerShell\\Profile.ps1</code></li> <li>Linux - <code>~/.config/powershell/profile.ps1</code></li> <li>macOS - <code>~/.config/powershell/profile.ps1</code></li> </ul> </li> <li>Current user, Current Host<ul> <li>Windows - <code>$Home\\[My ]Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1</code></li> <li>Linux - <code>~/.config/powershell/Microsoft.Powershell_profile.ps1</code></li> <li>macOS - <code>~/.config/powershell/Microsoft.Powershell_profile.ps1</code></li> </ul> </li> </ul> </li> </ul> <p>Note: <code>$PSHOME</code> indicate the installation directory of the powershell</p> <p>So you don't want to deal with this all, there are variable too</p> <ul> <li>Current User, Current Host<ul> <li><code>$PROFILE</code></li> </ul> </li> <li>Current User, Current Host<ul> <li><code>$PROFILE.CurrentUserCurrentHost</code></li> </ul> </li> <li>Current User, All Hosts<ul> <li><code>$PROFILE.CurrentUserAllHosts</code></li> </ul> </li> <li>All Users, Current Host<ul> <li><code>$PROFILE.AllUsersCurrentHost</code></li> </ul> </li> <li>All Users, All Hosts<ul> <li><code>$PROFILE.AllUsersAllHosts</code></li> </ul> </li> </ul> <p>So, type <code>$PROFILE</code> and find the directory to put your config file in.</p>"},{"location":"operating-systems/windows/powershell/#basics","title":"Basics","text":""},{"location":"operating-systems/windows/powershell/#install-modules","title":"Install modules","text":"<ul> <li>install modules from <code>$PSGallery</code></li> <li>https://docs.microsoft.com/en-us/powershell/module/powershellget/install-module?view=powershell-7.2</li> <li> <p>e.g.</p> <ul> <li><code>Install-Module -Name PowerShellGet</code></li> </ul> </li> <li> <p>update modulse</p> <ul> <li><code>Update-Module -Name PowerShellGet</code></li> </ul> </li> </ul>"},{"location":"operating-systems/windows/powershell/#variables","title":"Variables","text":"<ul> <li> <p>start with $</p> </li> <li> <p>boolean</p> <ul> <li>$true</li> <li>$false</li> </ul> </li> <li> <p>string</p> <ul> <li>\"Hello<code>r</code>nWorld\"</li> <li> <p>\"Hello{0}World\" -f [environment]::NewLine</p> </li> <li> <p>```</p> </li> </ul> <p>\"Hello World\"</p> <pre><code>- ```\n@\"\nHello\nWorld\n\"@\n</code></pre> </li> </ul>"},{"location":"operating-systems/windows/powershell/#hello-world","title":"hello world","text":"<pre><code>Write-Output \"hello world\"\n\n# debug output can be written as\nWrite-Debug \"hi this is debug\"\n</code></pre> <ul> <li>by default the debug output will not be shown,<ul> <li>to see the debug output set <code>$DebugPreferences = \"Continue\"</code></li> </ul> </li> </ul>"},{"location":"operating-systems/windows/powershell/#conditionals","title":"Conditionals","text":"<ul> <li>conditionals</li> </ul> <pre><code>$condition\nif ( $condiion ) {\n    Write-Output \"The condition was true\"\n}\n</code></pre>"},{"location":"operating-systems/windows/manual/","title":"Documentation for Windows","text":""},{"location":"operating-systems/windows/manual/Registry/","title":"Registry","text":"<p>The Windows Registry is a hierarchical database that stores low-level settings for the Microsoft Windows operating system and for applications that opt to use the registry. The kernel, device drivers, services, Security Accounts Manager, and user interface can all use the registry. The registry also allows access to counters for profiling system performance.</p> <p>In other words, the registry or Windows Registry contains information, settings, options, and other values for programs and hardware installed on all versions of Microsoft Windows operating systems. For example, when a program is installed, a new subkey containing settings such as a program's location, its version, and how to start the program, are all added to the Windows Registry.</p> <p>When introduced with Windows 3.1, the Windows Registry primarily stored configuration information for COM-based components. Windows 95 and Windows NT extended its use to rationalise and centralise the information in the profusion of INI files, which held the configurations for individual programs, and were stored at various locations. It is not a requirement for Windows applications to use the Windows Registry. For example, .NET Framework applications use XML files for configuration, while portable applications usually keep their configuration files with their executables.</p> <p>Read the complete article at [Wikipedia][https://en.wikipedia.org/wiki/Windows_Registry]</p>"},{"location":"operating-systems/windows/manual/Registry/#table-of-contents","title":"Table of Contents","text":"<p>[toc]</p>"},{"location":"operating-systems/windows/manual/Registry/#structure","title":"Structure","text":""},{"location":"operating-systems/windows/manual/Registry/#keys-and-values","title":"Keys and Values","text":"<p>The registry contains two basic elements: keys and values. Registry keys are container objects similar to folders. Registry values are non-container objects similar to files. Keys may contain values and subkeys. Keys are referenced with a syntax similar to Windows' path names, using backslashes to indicate levels of hierarchy. Keys must have a case insensitive name without backslashes</p> <p>The hierarchy of registry keys can only be accessed from a known root key handle (which is anonymous but whose effective value is a constant numeric handle) that is mapped to the content of a registry key preloaded by the kernel from a stored \"hive\", or to the content of a subkey within another root key, or mapped to a registered service or DLL that provides access to its contained subkeys and values.</p> <p>There are seven predefined root keys, traditionally named according to their constant handles defined in the Win32 API, or by synonymous abbreviations (depending on applications):</p> <ul> <li>HKEY_LOCAL_MACHINE or HKLM</li> <li>HKEY_CURRENT_CONFIG or HKCC</li> <li>HKEY_CLASSES_ROOT or HKCR</li> <li>HKEY_CURRENT_USER or HKCU</li> <li>HKEY_USERS or HKU</li> <li>HKEY_PERFORMANCE_DATA (only in Windows NT, but invisible in the Windows Registry Editor)</li> <li>HKEY_DYN_DATA (only in Windows 9x, and visible in the Windows Registry Editor)</li> </ul> Type Id Symbolic Type Name Meaning and encoding of the data stored in registry 0 REG_NONE No type (the stored value, if any) 1 REG_SZ A string value, normally stored and exposed in UTF-16LE (when using the Unicode version of Win32 API functions), usually terminated by a NUL character 2 REG_EXPAND_SZ An \"expandable\" string value that can contain environment variables, normally stored and exposed in UTF-16LE, usually terminated by a NUL character 3 REG_BINARY Binary data (any arbitrary data) 4 REG_DWORD / REG_DWORD_LITTLE_ENDIAN A DWORD value, a 32-bit unsigned integer (numbers between 0 and 4,294,967,295 [232 \u2013 1]) (little-endian) 5 REG_DWORD_BIG_ENDIAN A DWORD value, a 32-bit unsigned integer (numbers between 0 and 4,294,967,295 [232 \u2013 1]) (big-endian) 6 REG_LINK A symbolic link (UNICODE) to another registry key, specifying a root key and the path to the target key 7 REG_MULTI_SZ A multi-string value, which is an ordered list of non-empty strings, normally stored and exposed in UTF-16LE, each one terminated by a NUL character, the list being normally terminated by a second NUL character. 8 REG_RESOURCE_LIST A resource list (used by the Plug-n-Play hardware enumeration and configuration) 9 REG_FULL_RESOURCE_DESCRIPTOR A resource descriptor (used by the Plug-n-Play hardware enumeration and configuration) 10 REG_RESOURCE_REQUIREMENTS_LIST A resource requirements list (used by the Plug-n-Play hardware enumeration and configuration) 11 REG_QWORD / REG_QWORD_LITTLE_ENDIAN A QWORD value, a 64-bit integer (either big- or little-endian, or unspecified) (introduced in Windows XP)"},{"location":"operating-systems/windows/manual/Registry/#root-keys","title":"Root keys","text":"<p>The keys at the root level of the hierarchical database are generally named by their Windows API definitions, which all begin \"HKEY\". They are frequently abbreviated to a three- or four-letter short name  starting with \"HK\" (e.g. HKCU and HKLM). Technically, they are  predefined handles (with known constant values) to specific keys that  are either maintained in memory, or stored in hive files stored in the  local filesystem and loaded by the system kernel at boot time and then  shared (with various access rights) between all processes running on the local system, or loaded and mapped in all processes started in a user  session when the user logs on the system.</p> <p>The HKEY_LOCAL_MACHINE (local machine-specific configuration  data) and HKEY_CURRENT_USER (user-specific configuration data) nodes  have a similar structure to each other; user applications typically look up their settings by first checking for them in  \"HKEY_CURRENT_USER\\Software\\Vendor's name\\Application's  name\\Version\\Setting name\", and if the setting is not found, look  instead in the same location under the HKEY_LOCAL_MACHINE key.</p>"},{"location":"operating-systems/windows/manual/Registry/#hives","title":"Hives","text":"<p>Even though the registry presents itself as an integrated hierarchical database, branches of the registry are actually stored in a number of disk files called hives.\\</p>"},{"location":"operating-systems/windows/manual/Registry/#file-locations","title":"File Locations","text":"<p>The registry is physically stored in several files, which are generally obfuscated from the user-mode APIs used to manipulate the data inside the registry.</p> <p>Depending upon the version of Windows, there will be different files and different locations for these files, but they are all on the local machine.</p> <ul> <li>The location for system registry files in Windows NT is %SystemRoot%\\System32\\Config.</li> <li>The user-specific HKEY_CURRENT_USER user registry hive is stored in Ntuser.dat   inside the user profile. There is one of these per user; if a user has a   roaming profile, then this file will be copied to and from a server at logout   and login respectively.<ul> <li>A second user-specific registry file named UsrClass.dat contains COM   registry entries and does not roam by default.</li> </ul> </li> </ul>"},{"location":"operating-systems/windows/manual/Registry/#rge-files","title":".RGE Files","text":"<p>.reg files have following syntax:</p> <pre><code>[&lt;Hive name&gt;\\&lt;Key name&gt;\\&lt;Subkey name&gt;]\n\"Value name\"=&lt;Value type&gt;:&lt;Value data&gt;\n</code></pre> <p>The Default Value of a key can be edited by using \"@\" instead of \"Value Name\":</p> <pre><code>[&lt;Hive name&gt;\\&lt;Key name&gt;\\&lt;Subkey name&gt;]\n@=&lt;Value type&gt;:&lt;Value data&gt;\n</code></pre> <pre><code>[HKEY_LOCAL_MACHINE\\SOFTWARE\\Foobar]\n\"Value A\"=\"&lt;String value data with escape characters&gt;\"\n\"Value B\"=hex:&lt;Binary data (as comma-delimited list of hexadecimal values)&gt;\n\"Value C\"=dword:&lt;DWORD value integer&gt;\n\"Value D\"=hex(0):&lt;REG_NONE (as comma-delimited list of hexadecimal values)&gt;\n\"Value E\"=hex(1):&lt;REG_SZ (as comma-delimited list of hexadecimal values representing a UTF-16LE NUL-terminated string)&gt;\n\"Value F\"=hex(2):&lt;Expandable string value data (as comma-delimited list of hexadecimal values representing a UTF-16LE NUL-terminated string)&gt;\n\"Value G\"=hex(3):&lt;Binary data (as comma-delimited list of hexadecimal values)&gt; ; equal to \"Value B\"\n\"Value H\"=hex(4):&lt;DWORD value (as comma-delimited list of 4 hexadecimal values, in little endian byte order)&gt;\n\"Value I\"=hex(5):&lt;DWORD value (as comma-delimited list of 4 hexadecimal values, in big endian byte order)&gt;\n\"Value J\"=hex(7):&lt;Multi-string value data (as comma-delimited list of hexadecimal values representing UTF-16LE NUL-terminated strings)&gt;\n\"Value K\"=hex(8):&lt;REG_RESOURCE_LIST (as comma-delimited list of hexadecimal values)&gt;\n\"Value L\"=hex(a):&lt;REG_RESOURCE_REQUIREMENTS_LIST (as comma-delimited list of hexadecimal values)&gt;\n\"Value M\"=hex(b):&lt;QWORD value (as comma-delimited list of 8 hexadecimal values, in little endian byte order)&gt;\n</code></pre> <p>Comments begin with ; in .reg files and can be placed anywhere in the file.</p>"},{"location":"operating-systems/windows/manual/Registry/#some-tricks-smile","title":"Some Tricks.... :smile","text":"<p>How to Customize \"New menu..\"</p> <ul> <li>Open regedit.exe</li> <li>Search for the file extension you want to add to the new menu in the   HKEY_CLASSES_ROOT root key. (e.g.. HKEY_CLASSES_ROOT.md if you want to add   .md file)</li> <li>Now set the default value of the .extension file (.md in this case) to   something sensible (like markdown in this case) i.e. set the default value of   HKEY_CLASSES_ROOT.extension.</li> <li>Now add a new key to it and name it ShellNew.</li> <li>Create a new string value inside it and name it NullFile.</li> <li>Now search for the key named the default value you set for the .extension file   and if it don't exist create it.</li> <li>Set its default value to what you want the text to appear in new menu like   \"New Markdown File\"</li> </ul> <p>This all in a .reg file will look like:</p> <pre><code>; setting the default value of .md to markdown\n[HKEY_CLASSES_ROOT\\.md]\n@=\"markdown\"\n\n; creating a ShellNew key and adding a string value named \"NullFile\"\n[HKEY_CLASSES_ROOT\\.md\\ShellNew]\n\"NullFile\"=\"1\"\n\n;creating and setting the default value of markdown to new markdown file\n[HKEY_CLASSES_ROOT\\markdown]\n@=\"New Markdown File\"\n</code></pre>"},{"location":"operating-systems/windows/manual/dir-structure/","title":"Directory Structure","text":"<ul> <li><code>C:</code> - System Drive<ul> <li><code>Program Files</code> - programs for all users</li> <li><code>Program Files (x86)</code> - 32-bit applications (only present on 64 bit os)</li> <li><code>Program Data</code> - contains system specific settings of applications</li> <li><code>Windows</code> - contains files related to windows<ul> <li><code>Fonts</code> - contains fonts present on system</li> <li><code>Cursors</code> - contains mouse cursors</li> <li><code>System32</code> - contains most windows applications</li> </ul> </li> <li><code>Users</code> - contains all users directories<ul> <li><code>user0</code> - a user directory<ul> <li><code>AppData</code> - contains information about applications<ul> <li><code>Local</code> - contains setting of applications, and specific to single windows system<ul> <li><code>Programs</code> - contains programs which are only install for single users<ul> <li><code>Python</code> - contains python binaries (default location)<ul> <li><code>Python301</code> - a version of python<ul> <li><code>Scripts</code> - contains applications which you install through <code>pip</code></li> </ul> </li> </ul> </li> <li><code>Microsoft VS Code</code> - vscode application</li> <li><code>Microsoft</code><ul> <li><code>Windows</code><ul> <li><code>Fonts</code> - fonts for single user</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>Local Low</code> - contains data for applications with low integrity (e.g. firefox incognito mode)</li> <li><code>Roaming</code> - contains data that will be synced across multiple windows systems<ul> <li><code>Code</code> - vscode<ul> <li><code>User</code> - settings</li> </ul> </li> </ul> </li> </ul> </li> <li><code>Desktop</code> - contains file which are present in the user Desktop</li> <li><code>Documents</code> - contains documents<ul> <li><code>WindowsPowerShell</code> - contains windows powershell config</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"operating-systems/windows/manual/history/","title":"History of windows","text":"<ul> <li>MS-DOS (Not windows but microsoft started with this)</li> <li>Early versions (Windows NT 3.1/3.5/3.51/4.0/2000)</li> <li>Windows XP</li> <li>Windows Vista</li> <li>Windows 7</li> <li>Windows 8 and 8.1</li> <li>Windows 10</li> <li>Windows 11</li> </ul>"},{"location":"operating-systems/windows/manual/windows-7/","title":"Windows 7","text":"<ul> <li>Win=%WinDir%\\</li> <li>Sys=%SystemRoot%\\system32\\</li> <li><code>%System Drive% = C</code></li> <li><code>%System Root% = C:\\Windows\\System 32</code></li> <li><code>%Userprofile% = C:\\users\\\"username\"</code></li> <li>Cursers Locations <code>C:\\Windows\\Cursors</code></li> <li>Fonts <code>C:\\Windows\\Fonts</code></li> <li>Window Media Player <code>C:\\Windows\\ehome\\ehshell</code></li> <li>Themes Sounds <code>C:\\Windows\\Media</code></li> <li>Themes Wallpaper <code>C:\\Windows\\Web</code></li> <li>Aero themes \\ Installed themes <code>C:\\Windows\\Resources          or to install themes* \\Themes</code></li> <li>My Themes <code>C:\\Users\\*User_Name*\\AppData\\Local\\Microsoft\\Windows\\Themes</code></li> <li>Send_To Menu <code>C:\\Users\\*User_Name*\\AppData\\Roaming\\Microsoft\\Windows\\SendTo</code></li> <li>Start_Menu *For a user <code>C:\\Users\\user\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu</code></li> <li>Start_Menu *For all Users <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu</code></li> <li>New_file_Menu <code>C:\\Windows\\ShellNew</code></li> </ul>"},{"location":"operating-systems/windows/manual/wsl/","title":"Window Sub-system for linux","text":"<p><code>WSL1</code> uses picoprocesses for managing the linux processes and was slow. So <code>WSL2</code> is released which is a complete linux running on the <code>ext4</code> filesystem.</p>"},{"location":"operating-systems/windows/manual/wsl/#further-resources","title":"Further Resources","text":"<ul> <li>https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux</li> </ul>"},{"location":"operating-systems/windows/manual/utilities/diskpart/","title":"Diskpart","text":""},{"location":"operating-systems/windows/manual/utilities/diskpart/#formatting-flash-drive","title":"Formatting flash drive","text":"<pre><code>&gt; DISKPART\n\nDISKPART&gt; list disk\nDISKPART&gt; select disk 1\nDISKPART&gt; list partition\nDISKPART&gt; clean\nDISKPART&gt; create partition primary\nDISKPART&gt; active\nDISKPART&gt; select partition 1\nDISKPART&gt; format fs=fat32\n</code></pre> <p>you disk will be successfully repaired.</p>"},{"location":"operating-systems/windows/software/","title":"Software for Windows","text":"<ul> <li>show keyboard keys on screen<ul> <li>Screenkey</li> <li>Carnac - https://github.com/Code52/carnac</li> </ul> </li> </ul>"},{"location":"operating-systems/windows/software/autohotkey/","title":"autohotkey","text":"<ul> <li> <p>helps to crete custom shortcuts and override the default one too.</p> </li> <li> <p>always on top</p> </li> </ul> <pre><code>^SPACE+T::  Winset, Alwaysontop, , A\n</code></pre> <ul> <li>run some application</li> </ul> <pre><code>;F9::Run \"C:\\Users\\Shivanshu\\Desktop\\Command Prompt\"\n;F5::Run \"C:\\Users\\Shivanshu\\AppData\\Local\\hyper\\Hyper\"\n</code></pre> <pre><code>;-caption\n;^\\::\n;WinSet, Style, -0XC00000, A\n;return\n;\n</code></pre> <pre><code>;-caption\n;^/::\n;WinSet, Style, +0XC00000, A\n;return\n;\n</code></pre> <ul> <li>open command prompt in current directory</li> </ul> <pre><code>F9::opencmdhere()\n; Press Win + C to open Command Prompt in the current directory.\n\nopencmdhere() {\n    If WinActive(\"ahk_class CabinetWClass\") || WinActive(\"ahk_class ExploreWClass\") {\n        WinHWND := WinActive()\n        For win in ComObjCreate(\"Shell.Application\").Windows\n            If (win.HWND = WinHWND) {\n  currdir := SubStr(win.LocationURL, 9)\n  currdir := RegExReplace(currdir, \"%20\", \" \")\n                Break\n            }\n    }\n    Run, cmd, % currdir ? currdir : \"C:\\\"\n}\n\n;; this is to open cmd in the current working directory\n\n# +c::opencmdhereadmin()\n\n; Press Win + Shift + C to open admin Command Prompt in the current directory.\n\nopencmdhereadmin() {\n    If WinActive(\"ahk_class CabinetWClass\") || WinActive(\"ahk_class ExploreWClass\") {\n        WinHWND := WinActive()\n        For win in ComObjCreate(\"Shell.Application\").Windows\n            If (win.HWND = WinHWND) {\n  currdir := SubStr(win.LocationURL, 9)\n  currdir := RegExReplace(currdir, \"%20\", \" \")\n  currdir := RegExReplace(currdir, \"/\", \"\\\")\n                Break\n            }\n    }\n\n    Run *RunAs cmd.exe /k pushd %currdir%\n}\n</code></pre>"},{"location":"operating-systems/windows/software/launcher/","title":"Launchers","text":"<p>One of the most important thing for workflow is the launcher, not just application launcher but a launcher which can help you to launch other tasks too.</p> <p>launcher should have ability to add plugins and extension</p> <ul> <li>ueli - electro based - so a resource hog - https://github.com/oliverschwendener/ueli</li> <li>wox - https://github.com/Wox-launcher/Wox<ul> <li>made in C#</li> <li>nice one</li> </ul> </li> <li>flow launcher - https://github.com/Flow-Launcher/Flow.Launcher<ul> <li>made in <code>C#</code></li> <li>best to use in windows</li> <li>it supports only windows, now cross compatibility junk</li> </ul> </li> </ul>"},{"location":"operating-systems/windows/software/package_managers/","title":"Package Mangers","text":"<p>Here are some package managers for windows.</p> <ul> <li><code>Scoop</code></li> <li><code>Chocolatey</code></li> <li><code>Windows Package Manager</code> or <code>winget</code></li> </ul> <ul> <li><code>NuGet</code> package manager for .NET</li> <li><code>PowerShellGallery</code> - The central repository for   sharing and acquiring PowerShell code including PowerShell modules, scripts, and DSC resources.</li> </ul> <ul> <li><code>mingw</code> - Mingw-w64 is an advancement of the original   mingw.org project, created to support the GCC compiler on Windows systems.   It has forked it in 2007 in order to provide support for 64 bits and new APIs.   It has since then gained widespread use and distribution.<ul> <li><code>mysys2</code> - MSYS2 is a collection of tools and libraries   providing you with an easy-to-use environment for building, installing and   running native Windows software.</li> </ul> </li> </ul>"},{"location":"operating-systems/windows/software/sysinternals/","title":"Sysinternals","text":"<ul> <li> <p>https://learn.microsoft.com/en-us/sysinternals/</p> </li> <li> <p>AccessChk - check access for files</p> </li> <li>AccessEnum -</li> <li>AdExplorer - Active Directory Explorer</li> <li>AdInsight</li> <li>AdRestore</li> <li>Autologon - automatically login on starting pc</li> <li>Autoruns - startup programs, programs at boot everything</li> <li>BgInfo - write pc info into background</li> <li>BlueScreen - fake blue screen</li> <li>CacheSet - cache settings</li> <li>ClockRes</li> <li>Contig - defragment individual files</li> <li>Coreinfo -</li> <li>Ctrl2Cap - change caps lock to ctrl key</li> <li>DebugView - show debug output</li> <li>Desktops - create four virtual desktops</li> <li>Disk2vhd -</li> <li>DiskExt</li> <li>DiskMon - logs and displays all hard disk activity</li> <li>DiskView - graphical map of your disk</li> <li>Disk Usage (DU)</li> <li>EFSDump - Encrypting File System</li> <li>FindLinks -  file index and any hard links</li> <li>Handle - cli tool for viewing resources used by a program</li> <li>Hex2dec - convert hex to decimal with cli</li> <li>Junction</li> <li>LDMDump</li> <li>ListDLLs - reports the DLLs loaded into processes</li> <li>LiveKd</li> <li>LoadOrder - order in which drivers are loaded</li> <li>LogonSessions -</li> <li>MoveFile/PendMoves - move a file which you are note able to move on next boot</li> <li>NotMyFault - crash windows</li> <li>NTFSInfo -</li> <li>PipeList</li> <li>PortMon -  monitors and displays all serial and parallel port activity on a system</li> <li>ProcDump - get process dump during high spikes</li> <li>Process Explorer</li> <li>Process Monitor</li> <li>PsExec</li> <li>PsFile</li> <li>PsGetSid</li> <li>PsInfo</li> <li>PsKill</li> <li>PsList</li> <li>PsLoggedOn</li> <li>PsLogList</li> <li>PsPasswd</li> <li>PsPing</li> <li>PsService</li> <li>PsShutdown</li> <li>PsSuspend</li> <li>PsTools</li> <li>RAMMap</li> <li>RDCMan</li> <li>RegDelNull</li> <li>RegHide</li> <li>RegJump</li> <li>Registry Usage (RU)</li> <li>SDelete</li> <li>ShareEnum</li> <li>ShellRunas - run a program as another account</li> <li>Sigcheck - check signature of files</li> <li>Streams</li> <li>Strings - seach unicode strings</li> <li>Sync - sync files to create backup</li> <li>Sysmon - system monitor</li> <li>TCPView - show tcp/ip connections</li> <li>VMMap - memory map for processes, virtual and physical</li> <li>VolumeID - chance drive labels</li> <li>WhoIs - dns whois</li> <li>WinObj - security</li> <li>ZoomIt - zoom object record</li> </ul>"},{"location":"operating-systems/windows/software/terminals/","title":"Terminals","text":"<p>Let's start by clearing some misconceptions.</p> <ul> <li><code>terminal</code> text input/output environment</li> <li><code>console</code> physical terminal</li> <li><code>shell</code> command line interpreter</li> </ul> <p>Read these for better explanations.</p> <ul> <li>Stack Overflow</li> <li>Blog post</li> </ul> <p>So here are some commonly used shell for windows</p> <ul> <li><code>cmd</code> (defaut one) and <code>command.com</code> many hate these</li> <li><code>powershell</code></li> <li><code>Cygwin</code> and <code>git</code> which comes with fake linux like shells and used <code>minTTY</code> as terminal.</li> <li>using <code>WSL</code> you can use any shell from linux</li> </ul> <p>And here is a list of <code>terminal</code>'s you can use</p> <ul> <li><code>conhost</code> old terminal and the default one</li> <li><code>Windows Terminal</code> open source windows terminal</li> <li><code>Hyper</code> electron based</li> <li><code>ConEmu</code></li> <li><code>Putty</code></li> <li><code>minTTY</code></li> </ul> <p>and many more.</p>"},{"location":"operating-systems/windows/software/tool_kit/","title":"Toolkit","text":"<p>Here are some tools that you will find useful while using windows.</p> <ul> <li>Open Hardware Monitor - helps to check the temperature of components, etc.</li> <li>TaskbarX  center icons on taskbar and more...</li> <li>carnac  keyboard logging</li> <li>ditto  advance clipboard manager (otherwise use block)</li> <li>nirsoft utilities  or use a launcher<ul> <li>ShellExView fix the right click menu</li> </ul> </li> <li>Sysinternals  - microsoft utilities to fix system</li> <li>PowerToys  some basic additional programs by microsoft</li> <li>explorer++  explorer alternative</li> <li>ueli  a program launcher</li> <li>processhacker  alternative task manager</li> <li>autohotkey  make keybinding for anything</li> <li>desktop-enhancer  change setting for every new desktop you create</li> <li>desktop-switcher  desktop switcher script using <code>autohotkey</code></li> </ul>"},{"location":"programming/","title":"Programming","text":"<p>A programming language is a system of notation for writing computer programs. Most programming languages are text-based formal languages, but they may also be graphical.</p>"},{"location":"programming/#elements","title":"Elements","text":"<ul> <li>syntax</li> <li>semantics</li> <li>type system</li> <li>standard library and run time system</li> </ul>"},{"location":"programming/#outline","title":"Outline","text":"<ul> <li>Classification</li> <li>Programming Languages</li> <li>Programming Paradigms</li> </ul>"},{"location":"programming/#resources","title":"Resources","text":""},{"location":"programming/classification/","title":"Classification","text":""},{"location":"programming/classification/#list","title":"List","text":"<ul> <li> <p>https://en.wikipedia.org/wiki/List_of_programming_languages_by_type</p> </li> <li> <p>Array languages</p> <ul> <li>These language generalize operation on scalars to apply transparently to vector, matrices and higher dimensional arrays.</li> <li><code>Julia</code>, using broadcasting.</li> <li><code>R</code></li> </ul> </li> <li>Agent-oriented programming languages<ul> <li>Agent-oriented programming allows the developer to build, extend and use software agents, which are abstractions of objects that can message other agents.</li> <li><code>Clojure</code></li> <li><code>F#</code></li> </ul> </li> <li>Aspect-oriented programming languages</li> <li>Assembly languages<ul> <li>instructions appear in a form understandable by humans, although there may not be a one-to-one mapping between an individual statement and an individual instruction.</li> </ul> </li> <li>Authoring languages</li> <li>Concatenative programming languages</li> <li>Constraint programming languages</li> <li>Command-line interface languages<ul> <li>also called batch languages or job control languages.</li> <li><code>sh</code></li> </ul> </li> <li>Compiled languages<ul> <li>typically processed by compilers</li> <li><code>c</code></li> </ul> </li> <li>Concurrent languages<ul> <li>Message passing languages provide language constructs for concurrency. The predominant paradigm for concurrency in mainstream languages such as Java is shared memory concurrency. Concurrent languages that make use of message passing have generally been inspired by process calculi such as communicating sequential processes (CSP) or the \u03c0-calculus.</li> <li><code>java</code></li> <li><code>haskell</code></li> </ul> </li> <li>Curly-bracket languages<ul> <li>statement blocks using the curly bracket or brace characters <code>{</code> and <code>}</code></li> </ul> </li> <li>Dataflow languages</li> <li>Data-oriented languages<ul> <li><code>sql</code></li> </ul> </li> <li>Decision table languages<ul> <li>express the logic of a computation without describing its control flow in detail</li> </ul> </li> <li>Declarative languages</li> <li>Embeddable languages</li> <li>Educational programming languages<ul> <li><code>pascal</code></li> <li><code>racket</code></li> </ul> </li> <li>Esoteric languages<ul> <li><code>brainfuck</code></li> </ul> </li> <li>Extension languages</li> <li>Fourth-generation languages<ul> <li>high-level languages built around database systems</li> <li><code>sql</code></li> </ul> </li> <li>Functional languages<ul> <li>define programs and subroutines as mathematical functions and treat them as first-class</li> <li><code>lisp</code></li> <li><code>haskell</code></li> </ul> </li> <li>Hardware description languages<ul> <li><code>verlog</code></li> </ul> </li> <li>Imperative languages<ul> <li><code>c</code></li> </ul> </li> <li>Interactive mode languages<ul> <li>Have REPL</li> <li><code>python</code></li> </ul> </li> <li>Interpreted languages</li> <li>Iterative languages<ul> <li>use generators</li> <li><code>C++</code></li> <li><code>python</code></li> </ul> </li> <li>Languages by memory management type<ul> <li>Garbage collected languages<ul> <li><code>java</code></li> </ul> </li> <li>Languages with manual memory management<ul> <li><code>c</code></li> </ul> </li> <li>Languages with partial manual memory management<ul> <li><code>eC</code></li> </ul> </li> <li>Languages with optional manual memory management<ul> <li><code>rust</code></li> </ul> </li> </ul> </li> <li>List-based languages \u2013 LISPs</li> <li>Little languages<ul> <li>serve a specialized problem domain</li> <li><code>awk</code></li> </ul> </li> <li>Logic-based languages<ul> <li>specify a set of attributes that a solution must-have, rather than a set of steps to obtain a solution.</li> <li><code>prolog</code></li> </ul> </li> <li>Machine languages</li> <li>Macro languages</li> <li>Metaprogramming languages<ul> <li>writing of programs that write or manipulate other programs, including themselves, as their data or that do part of the work that is otherwise done at run time during compile time.</li> <li><code>c++</code></li> <li><code>lisp</code></li> </ul> </li> <li>Multiparadigm languages</li> <li>Numerical analysis</li> <li>Non-English-based languages</li> <li>Object-oriented class-based languages<ul> <li>Class-based object-oriented programming languages support objects defined by their class. Class definitions include member data. Message passing is a key concept, if not the main concept, in object-oriented languages.</li> <li>Polymorphic functions parameterized by the class of some of their arguments are typically called methods. In languages with single dispatch, classes typically also include method definitions. In languages with multiple dispatch, methods are defined by generic functions. There are exceptions where single dispatch methods are generic functions.</li> <li>Multiple dispatch<ul> <li><code>lisp</code></li> </ul> </li> <li>Single dispatch<ul> <li><code>C++</code></li> <li><code>Java</code></li> </ul> </li> </ul> </li> <li>Object-oriented prototype-based languages<ul> <li>distinction between classes and instances has been removed</li> <li><code>ECMAScript</code></li> </ul> </li> <li>Off-side rule languages<ul> <li>denote blocks of code by their indentation</li> <li><code>python</code></li> </ul> </li> <li>Procedural languages<ul> <li>languages are based on the concept of the unit and scope (the data viewing range) of an executable code statement. A procedural program is composed of one or more units or modules, either user coded or provided in a code library; each module is composed of one or more procedures, also called a function, routine, subroutine, or method, depending on the language.</li> <li><code>c</code></li> </ul> </li> <li>Query languages</li> <li>Reflective languages<ul> <li>let programs examine and possibly modify their high-level structure at runtime or compile-time.</li> <li><code>java</code></li> <li><code>lisp</code></li> </ul> </li> <li>Rule-based languages<ul> <li>instantiate rules when activated by conditions in a set of data</li> </ul> </li> <li>Scripting languages<ul> <li>designed to automate frequently used tasks that usually involve calling or passing commands to external programs</li> </ul> </li> <li>Stack-based languages</li> <li>Synchronous languages<ul> <li>optimized for programming reactive systems, systems that are often interrupted and must respond quickly.</li> </ul> </li> <li>Shading languages<ul> <li>graphics programming language adapted to programming shader effects</li> </ul> </li> <li>Syntax-handling languages<ul> <li>assist with generating lexical analyzers and parsers for context-free grammars</li> <li><code>yaac</code></li> <li><code>lex</code></li> </ul> </li> <li>System languages</li> <li>Transformation languages</li> <li>Visual languages</li> <li>Wirth languages</li> <li>XML-based languages</li> </ul>"},{"location":"programming/classification/#basis-of-paradigms","title":"Basis of paradigms","text":"<ul> <li> <p>https://en.wikipedia.org/wiki/Comparison_of_multi-paradigm_programming_languages</p> </li> <li> <p>Actor-based</p> </li> <li>Array</li> <li>Aspect-oriented</li> <li>Class-based</li> <li>Concatenative</li> <li>Concurrent</li> <li>Dataflow</li> <li>Declarative</li> <li>Differentiable</li> <li>Domain-specific<ul> <li>web<ul> <li>html</li> <li>css</li> </ul> </li> <li>database<ul> <li>sql</li> </ul> </li> <li>embedded<ul> <li>lua</li> </ul> </li> <li>data science<ul> <li>R</li> <li>julia</li> </ul> </li> </ul> </li> <li>Dynamic<ul> <li>python</li> <li>javascript</li> </ul> </li> <li>Esoteric</li> <li>Event-driven</li> <li>Extensible</li> <li>Functional<ul> <li>haskell</li> <li>f sharp</li> <li>scala</li> <li>clojure</li> <li>ocaml</li> <li>elixir</li> <li>elm</li> </ul> </li> <li>Imperative</li> <li>Logic</li> <li>Macro</li> <li>Metaprogramming</li> <li>Object-based</li> <li>Object-oriented</li> <li>Pipeline</li> <li>Procedural</li> <li>Prototype-based</li> <li>Reflective</li> <li>Rule-based</li> <li>Scripting<ul> <li>bash</li> <li>powershell</li> </ul> </li> <li>Stack-oriented</li> <li>Static<ul> <li>java</li> <li>c# - microsoft</li> <li>typescript</li> <li>kotlin - type inference</li> <li>swift - type inference</li> <li>dart - type inference</li> <li>go</li> <li>garbage collector</li> <li>c</li> <li>c++</li> <li>rust<ul> <li>borrow checking</li> </ul> </li> </ul> </li> <li>Synchronous</li> <li>Tactile</li> <li>Template</li> </ul>"},{"location":"programming/classification/#some-modern-programming","title":"Some modern programming","text":"<ul> <li>v<ul> <li>systems language</li> </ul> </li> <li>zig<ul> <li>low level</li> </ul> </li> <li>nim<ul> <li>tunable garbage collector</li> </ul> </li> <li>carbon<ul> <li>c++</li> </ul> </li> <li>solidity<ul> <li>smart contacts</li> </ul> </li> <li>hack<ul> <li>php interop</li> </ul> </li> </ul>"},{"location":"programming/classification/#some-historical-programming","title":"Some Historical Programming","text":"<ul> <li>fortran</li> <li>lisp</li> <li>algol</li> <li>cobol</li> <li>apl<ul> <li>a programming language</li> </ul> </li> <li>pascal</li> <li>simula - oop</li> <li>erlang</li> <li>ada</li> <li>prolog, meat language</li> </ul>"},{"location":"programming/terms/","title":"Key Terms","text":""},{"location":"programming/terms/#interpreter-and-compiler","title":"Interpreter and Compiler","text":"<ul> <li> <p>a programming language can be compiled and interpreted   but it is not a property of programming language   it is up to us to decide whether we want to make   it a compiler for it or a interpreter</p> </li> <li> <p>interpreter executes the program line by line</p> <ul> <li>this is a simplification</li> </ul> </li> <li> <p>compiler - make a executable or a object file form the source code</p> <ul> <li>which can then be executed</li> </ul> </li> <li> <p>a programming language is compiled/interpreted</p> <ul> <li>this means that usually the source code of that programming</li> <li>is compiled/interpreted</li> </ul> </li> <li> <p>https://stackoverflow.com/questions/1326071/is-java-a-compiled-or-an-interpreted-programming-language</p> </li> <li> <p>To summarize, depending on the execution environment, bytecode can be:</p> <ul> <li>compiled ahead of time and executed as native code (similar to most C++ compilers)</li> <li>compiled just-in-time and executed</li> <li>interpreted</li> <li>directly executed by a supported processor (bytecode is the native instruction set of some CPUs)</li> </ul> </li> </ul>"},{"location":"programming/terms/#type-system","title":"Type System","text":"<ul> <li>https://en.wikipedia.org/wiki/Type_system</li> </ul>"},{"location":"programming/terms/#static-typed-vs-dynamic-typed-language","title":"Static typed vs Dynamic typed language","text":"<ul> <li> <p>https://stackoverflow.com/questions/1517582/what-is-the-difference-between-statically-typed-and-dynamically-typed-languages</p> </li> <li> <p>in static typed language the type of variable is determined before runtime</p> </li> <li> <p>for the dynamic typed language the type of variable is determined at runtime</p> </li> <li> <p>some statically typed language support a feature called type inference</p> <ul> <li>this is different form dynamic typed</li> <li>here the type is still guessed by the compiler before runtime unlike</li> <li>dynamically typed where it is decided during runtime</li> </ul> </li> </ul>"},{"location":"programming/terms/#weak-typed-vs-strong-typed-language","title":"Weak typed vs Strong typed language","text":"<ul> <li>weak typed means that you can perform operations between two types<ul> <li>there is presence of implicit type casting</li> </ul> </li> <li>strong type means that you can not perform operation between two types<ul> <li>like you cannot add string to int,</li> <li>you can use some functions to typecast</li> </ul> </li> </ul>"},{"location":"programming/terms/#memory-management","title":"Memory Management","text":"<ul> <li>https://en.wikipedia.org/wiki/Memory_management</li> </ul> <p>How we manage memory programming language, it lies in the spectrum of automatic management and manual management. Some programming languages have manual memory management (using garbage collector), some have manual memory allocation methods (like <code>malloc</code> in C) and some have a tunable memory management system (like that of rust).</p>"},{"location":"programming/multithreading/","title":"Multithreading","text":"<ul> <li>https://en.wikipedia.org/wiki/Thread_(computing)</li> <li>Mutual Exclusion https://en.wikipedia.org/wiki/Mutual_exclusion<ul> <li>Software Solutions<ul> <li>Dekker's algorithm</li> <li>Peterson's algorithm</li> <li>Lamport's bakery algorithm</li> <li>Szyma\u0144ski's algorithm</li> <li>Taubenfeld's black-white bakery algorithm</li> <li>Maekawa's algorithm</li> </ul> </li> <li>Types of Mutual Exclusion devices, based on the solutions<ul> <li>Locks (mutexes)</li> <li>Readers--writer locks</li> <li>Recursive locks</li> <li>Semaphores</li> <li>Monitors</li> <li>Message passing</li> <li>Tuple space</li> </ul> </li> </ul> </li> <li>https://en.wikipedia.org/wiki/Concurrency_control</li> <li>https://en.wikipedia.org/wiki/Critical_section</li> </ul>"},{"location":"programming/programming-languages/","title":"Programming Languages","text":"<ul> <li>C</li> <li>C++</li> <li>Java</li> <li>Python</li> <li>Scala</li> <li>lua</li> <li>julia</li> <li>ruby</li> <li>rust</li> <li>R</li> <li>php</li> <li>javascript</li> </ul>"},{"location":"programming/programming-languages/C/","title":"C","text":"<p>C is a powerful, low-level programming language that is widely used in various domains, particularly where performance and direct hardware control are crucial.</p>"},{"location":"programming/programming-languages/C/#where-is-c-programming-language-used","title":"Where is C programming language used","text":""},{"location":"programming/programming-languages/C/#system-programming","title":"System Programming","text":"<ul> <li>Examples: Operating systems, device drivers, and system utilities.</li> <li>Details: C is used to develop operating systems like Linux, Windows, and macOS. It is also used for writing device drivers that interact directly with hardware, such as network or graphics card drivers.</li> </ul>"},{"location":"programming/programming-languages/C/#embedded-systems","title":"Embedded Systems","text":"<ul> <li>Examples: Microcontrollers, automotive software, and IoT devices.</li> <li>Details: C is used to program embedded systems that control hardware devices like washing machines, medical devices, and industrial machines. It's commonly used in automotive software for engine control units (ECUs) and other vehicle systems.</li> </ul>"},{"location":"programming/programming-languages/C/#game-development","title":"Game Development","text":"<ul> <li>Examples: Game engines, graphics rendering, and real-time simulations.</li> <li>Details: C is used in the development of game engines like Unreal Engine, which require high performance and low-level access to memory. It\u2019s also used in creating real-time simulations and graphics rendering.</li> </ul>"},{"location":"programming/programming-languages/C/#high-performance-computing","title":"High-Performance Computing","text":"<ul> <li>Examples: Supercomputers, scientific simulations, and large-scale computations.</li> <li>Details: C is used in applications requiring high performance and efficiency, such as climate modeling, molecular dynamics, and simulations of physical phenomena. Scientific libraries like <code>BLAS</code> and <code>LAPACK</code>, used for linear algebra operations, are written in C.</li> </ul>"},{"location":"programming/programming-languages/C/#compilers-and-interpreters","title":"Compilers and Interpreters","text":"<ul> <li>Examples: GCC (GNU Compiler Collection), LLVM.</li> <li>Details: C is commonly used to write compilers and interpreters for other programming languages, including itself. GCC, one of the most widely used C compilers, is written in C.</li> </ul>"},{"location":"programming/programming-languages/C/#networking","title":"Networking","text":"<ul> <li>Examples: Network protocols, routers, and network utilities.</li> <li>Details: C is used to implement network protocols (like TCP/IP), network servers, and other networking software. Routers and switches often run on software written in C due to its efficiency and speed.</li> </ul>"},{"location":"programming/programming-languages/C/#databases","title":"Databases","text":"<ul> <li>Examples: MySQL, SQLite, PostgreSQL.</li> <li>Details: C is used in the development of database management systems (DBMS) that require high performance and reliability. MySQL and PostgreSQL, two of the most popular databases, are written in C.</li> </ul>"},{"location":"programming/programming-languages/C/#operating-system-components","title":"Operating System Components","text":"<ul> <li>Examples: File systems, kernel modules, and system libraries.</li> <li>Details: C is used for developing critical components of operating systems, such as file systems that manage how data is stored and retrieved, and kernel modules that extend the functionality of the operating system.</li> </ul>"},{"location":"programming/programming-languages/C/#embedded-firmware","title":"Embedded Firmware","text":"<ul> <li>Examples: BIOS, UEFI firmware, and hardware control software.</li> <li>Details: C is used to write the firmware that controls the basic functions of hardware devices, such as the BIOS/UEFI in computers, which initializes hardware during the boot process.</li> </ul>"},{"location":"programming/programming-languages/C/#cross-platform-software","title":"Cross-Platform Software","text":"<ul> <li>Examples: Portable software libraries, cross-platform applications.</li> <li>Details: C is often used to develop software that needs to run on multiple operating systems. Libraries like GTK (used in GNOME) and applications like VLC media player are written in C to ensure compatibility across different platforms.</li> </ul>"},{"location":"programming/programming-languages/C/#real-time-systems","title":"Real-Time Systems","text":"<ul> <li>Examples: Aerospace software, telecommunications, and robotics.</li> <li>Details: C is used in real-time systems where timing is critical, such as flight control software, telecommunications switching systems, and robotic control systems.</li> </ul> <p>So you can see that C is used almost everywhere. If you are using a library, part of it will always will be in C.</p>"},{"location":"programming/programming-languages/C/#some-software-developed-in-c","title":"Some software developed in C","text":"<p>Here are some live repos you can see which uses C:</p> <ul> <li>Linux Kernel - https://github.com/torvalds/linux</li> <li>A game engine - https://github.com/erincatto/box2d</li> <li><code>jq</code> a tool used for json data - https://github.com/jqlang/jq</li> <li>libevent - a notification library - https://github.com/libevent/libevent</li> <li>cJSON - a lightweight json parser - https://github.com/DaveGamble/cJSON</li> <li>vlc - a famous music player - https://github.com/videolan/vlc</li> <li>mpv - a video player - https://github.com/mpv-player/mpv</li> <li>audacity - a audio editor - https://github.com/audacity/audacity</li> <li>ffmpeg - https://github.com/FFmpeg/FFmpeg</li> <li>zathura - a pdf reader - https://github.com/pwmt/zathura</li> <li>gnome - a desktop environment - https://github.com/GNOME/gnome-desktop</li> </ul> <p>You got the point! It is almost everywhere.</p>"},{"location":"programming/programming-languages/C/resources/","title":"Resources","text":""},{"location":"programming/programming-languages/C/resources/#documentation","title":"Documentation","text":"<ul> <li>https://en.cppreference.com/w/c</li> </ul>"},{"location":"programming/programming-languages/C/resources/#learning","title":"Learning","text":"<ul> <li>https://c-faq.com/</li> <li>https://www.learn-c.org/</li> <li>https://www.cprogramming.com/</li> </ul>"},{"location":"programming/programming-languages/C/resources/#collection","title":"Collection","text":"<ul> <li>https://github.com/oz123/awesome-c</li> </ul>"},{"location":"programming/programming-languages/C/resources/#pointers","title":"Pointers","text":"<ul> <li>decipher c pointers - https://cdecl.org/</li> </ul>"},{"location":"programming/programming-languages/C/build-tools/","title":"Build Systems","text":""},{"location":"programming/programming-languages/C/build-tools/#make","title":"make","text":"<ul> <li>simple one, but gets complex as your project size increases</li> <li>Documentation - https://www.gnu.org/software/make/manual/make.html</li> </ul>"},{"location":"programming/programming-languages/C/build-tools/#cmake","title":"CMake","text":"<ul> <li>Doc - https://cmake.org/documentation/</li> </ul>"},{"location":"programming/programming-languages/C/compilers/compilers/","title":"Compilers","text":""},{"location":"programming/programming-languages/C/compilers/compilers/#gcc","title":"gcc","text":"<ul> <li>GNU C Compiler</li> </ul> <p>Some basic flags related to gcc</p> <p>For compiling</p> <ul> <li><code>-c</code> compile without linking files</li> <li><code>-o &lt;filename&gt;</code> for output file name</li> <li><code>-I &lt;directory&gt;</code> add directories to be searched for the header files</li> <li><code>-L &lt;directory&gt;</code> add directory to be searched for the libraries</li> <li><code>-l&lt;library&gt;</code> links a library</li> </ul> <p>For debugging</p> <ul> <li><code>-g</code> for debugging level</li> <li><code>-ggdb</code> for gdb</li> </ul> <p>For optimization</p> <ul> <li><code>-O0</code> No optimization (default).</li> <li><code>-O1</code> Basic optimization.</li> <li><code>-O2</code> Moderate optimization.</li> <li><code>-O3</code> Maximum optimization.</li> <li><code>-Os</code> Optimization for size.</li> </ul> <p>For warnings and error</p> <ul> <li><code>-Wall</code> - all warning as error</li> <li><code>-Wextra</code> Enables extra warning messages.</li> <li><code>-Werror</code> Treats all warnings as errors.</li> </ul> <p>Setting standard</p> <ul> <li><code>-std=&lt;standard&gt;</code> Specifies the standard to which the code should conform <code>-std=c99</code>, <code>-std=c11</code></li> </ul> <p>Others</p> <ul> <li><code>-v</code> Displays the commands being executed by the compiler.</li> <li><code>-pthread</code> Enables multi-threading with the POSIX threads library.</li> <li><code>-static</code> Produces a statically linked executable.</li> </ul>"},{"location":"programming/programming-languages/C/compilers/compilers/#msvc","title":"msvc","text":"<ul> <li>Microsoft visual studio compiler</li> </ul>"},{"location":"programming/programming-languages/C/compilers/compilers/#llvm","title":"LLVM","text":"<ul> <li>used in making compilers</li> </ul>"},{"location":"programming/programming-languages/C/compilers/compilers/#how-to-link-libraries","title":"How to link libraries","text":""},{"location":"programming/programming-languages/C/compilers/compilers/#finding-libraries-ldconfig","title":"Finding Libraries <code>ldconfig</code>","text":"<p>List all installed libraries on the system. <code>ldconfig -p | grep libcurl</code></p> <p>After that you can grep some particular one <code>ldconfig -p | grep libcurl</code></p> <ul> <li>Doc - https://man7.org/linux/man-pages/man8/ldconfig.8.html</li> </ul>"},{"location":"programming/programming-languages/C/compilers/compilers/#pkg-config","title":"<code>pkg-config</code>","text":"<p>Suppose you want to know how to link a library <code>libcurl</code> You can use <code>pkg-config --cflags --libs libcurl</code>. This will give you what to add to you gcc command. <code>-I/usr/include/x86_64-linux-gnu -lcurl</code></p> <ul> <li>Doc - https://www.freedesktop.org/wiki/Software/pkg-config/</li> </ul>"},{"location":"programming/programming-languages/C/compilers/debuggers/","title":"Debuggers","text":""},{"location":"programming/programming-languages/C/compilers/debuggers/#gdb","title":"gdb","text":"<p>gdb - GNU Debugger</p>"},{"location":"programming/programming-languages/C/compilers/debuggers/#breakpoints","title":"Breakpoints","text":"<ul> <li> <p>breakpoints are the points where debugger will stop the program execution, and then you can inspect the memory i.e. variables</p> </li> <li> <p><code>b main</code> - puts breakpoint at the beginning of the program</p> </li> <li><code>b</code> - puts breakpoint at the current line</li> <li><code>b N</code> - puts breakpoint at the line N</li> <li><code>b +N</code> - puts breakpoint N lines down from the current line</li> <li><code>b fN</code> - puts the breakpoint at the beginning of the function <code>fN</code></li> <li><code>d N</code> - deletes the breakpoint number N</li> <li><code>info breaks</code> - list breakpoints</li> </ul>"},{"location":"programming/programming-languages/C/compilers/debuggers/#continues-or-run-till-error","title":"Continues or run till error","text":"<ul> <li><code>r</code> - runs the program until a breakpoint or error</li> <li><code>c</code> - continues running the program until the next breakpoint is reached</li> </ul>"},{"location":"programming/programming-languages/C/compilers/debuggers/#run-until-next-function","title":"Run until next function","text":"<ul> <li><code>f</code> - runs until the next function is finished</li> </ul>"},{"location":"programming/programming-languages/C/compilers/debuggers/#step","title":"Step","text":"<ul> <li><code>s</code> - runs the next line of program</li> <li><code>s N</code> - runs next N lines of the program</li> </ul>"},{"location":"programming/programming-languages/C/compilers/debuggers/#skip-over","title":"Skip over","text":"<ul> <li><code>n</code> - like <code>s</code> but does not step into functions</li> <li><code>u N</code> - runs until you get N lines in the front of the current line</li> </ul>"},{"location":"programming/programming-languages/C/compilers/debuggers/#inspecting","title":"Inspecting","text":"<ul> <li><code>p var</code> - prints the current value of the variable <code>var</code></li> </ul>"},{"location":"programming/programming-languages/C/libraries/","title":"Libraries","text":"<p>Library is a collections of functions and structures (collection of implementations of behavior) which are made so that we can use them again and again to avoid writing the whole functionality again.</p>"},{"location":"programming/programming-languages/C/summary/","title":"Summary","text":"<ul> <li>Programming Methodology</li> <li>Arrays</li> <li>Stack</li> <li>Queue</li> <li>Linked Lists</li> <li>Trees</li> <li>Hashing Techniques</li> </ul>"},{"location":"programming/programming-languages/C/summary/#programming-methodology","title":"Programming Methodology","text":"<ul> <li> <p>Data Segments in memory</p> <ul> <li>Text(Code) Segments - contains code of the compiled program<ul> <li>it i sread only to prevent modification of the program</li> <li>when a function is put onto stack, it is copied form the code Segments to the stack Segments</li> </ul> </li> <li>Initialized Data Segments<ul> <li>initialized data Segments stores global, static,constant and teh variable with extern keyword the are initialized beforehand.</li> <li>can be classified into<ul> <li>read-only area</li> <li>read-write area</li> </ul> </li> </ul> </li> <li>Uninitialized data Segments(bss)<ul> <li>data is initialized to 0 before the programs starts executing</li> <li>contains all global and static variables that are not initialized or inititalized to 0</li> </ul> </li> <li>Heap<ul> <li>used for dynamic memory allocation</li> <li>grows upward</li> </ul> </li> <li>Stack<ul> <li>used to store all local varables and used to pass apguments to the functions along with   return address of the instruction which is to be executed after function is over.</li> <li>grows downward</li> </ul> </li> </ul> </li> <li> <p>Scope of Variable</p> <ul> <li>Static scoping - used in C<ul> <li>defined in terms of the physical structure of the program</li> <li>binding are resolved at the time of execution of a program</li> </ul> </li> <li>Dynamic scoping - used in Lisp<ul> <li>used mostly in interpreted languages</li> <li>binding depends on the flow of control at the run time and the order in which functions   are called, refers to the closest active binding.</li> </ul> </li> </ul> </li> <li> <p>C variables</p> <ul> <li>have name - identifiers rule</li> <li>have type</li> <li>have address</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/C/summary/#precedence-and-associativity-of-operators","title":"Precedence and associativity of operators","text":"<ul> <li><code>()</code>, <code>[]</code>, <code>-&gt;</code>, <code>.</code>, <code>++</code>, <code>--</code> LtoR Postfix</li> <li><code>!</code>, <code>~</code>, <code>++</code>, <code>--</code>, <code>+</code>, <code>-</code>, <code>*</code>, <code>&amp;</code>, <code>sizeof</code> RtoL Prefix, Unary, Pointers</li> <li><code>*</code>, <code>/</code>, <code>%</code> LtoR Multiplicative</li> <li><code>+</code>, <code>-</code> LtoR Additive</li> <li><code>&lt;&lt;</code>, <code>&gt;&gt;</code> LtoR Shift</li> <li><code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code> LtoR Relational</li> <li><code>==</code>, <code>!=</code> LtoR Equality</li> <li><code>&amp;</code> LtoR Bitwise AND</li> <li><code>^</code> LtoR Bitwise XOR</li> <li><code>|</code> LtoR Bitwise OR</li> <li><code>&amp;&amp;</code> LtoR Logical AND </li> <li><code>||</code> LtoR Logical OR </li> <li><code>?:</code> RtoL Conditional </li> <li><code>=</code>, <code>+=</code>, <code>-=</code>, <code>/=</code>, <code>%=</code>, <code>*=</code>, <code>^=</code>, <code>|=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code> , <code>&amp;=</code> RtoL Assignment </li> <li><code>,</code> LtoR Comma</li> </ul>"},{"location":"programming/programming-languages/C/summary/#lvalue-0-stands-for-left-value","title":"LValue 0 stands for left value","text":"<p>In any assignment statement the leftvalue should me a variable not constant.</p>"},{"location":"programming/programming-languages/C/summary/#pointers","title":"Pointers","text":"<ul> <li><code>int *ptr</code><ul> <li>pointer to a variable</li> </ul> </li> <li><code>const int* ptr</code><ul> <li>pointer to a contant</li> <li>can be changed to point to another pointer, but you cannot change the value<ul> <li><code>*ptr = 200;</code> wrong, error assignment of read-only location <code>*ptr</code></li> </ul> </li> </ul> </li> <li><code>int *const ptr;</code><ul> <li>constant pointer to a variable</li> <li>cannot be used to point to another variable</li> <li><code>ptr = &amp;a;</code> wrong, error assignment of read-only variable <code>ptr</code></li> </ul> </li> <li><code>const int *const ptr</code><ul> <li>constant pointer to constant variable</li> <li>cannot change value, cannot point to another variable</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/C/summary/#mostly-used-header-files-in-c","title":"Mostly used header files in C","text":"<ul> <li><code>stdio.h</code> this contains i/o functions</li> <li><code>conio.h</code> not standard made by Microsoft</li> <li><code>string.h</code> contains the strings functions</li> <li><code>stdlib.h</code> general functions used in C</li> <li><code>math.h</code> contains all math related functions</li> <li><code>time.h</code> time and clock related function</li> <li><code>ctype.h</code> - character handling functions</li> <li><code>stdarg.h</code> - used for variable length arguments</li> <li><code>signal.h</code> - signal handling</li> <li><code>setjmp.h</code> - all jump functions</li> <li><code>locale.h</code> - locale related functions</li> <li><code>errno.h</code> - error handling</li> <li><code>assert.h</code> - for diganostics</li> </ul>"},{"location":"programming/programming-languages/C/summary/#c-standard-library","title":"C standard Library","text":"<ul> <li><code>assert.h</code></li> <li><code>ctype.h</code></li> <li><code>errno.h</code></li> <li><code>float.h</code></li> <li><code>limits.h</code></li> <li><code>locale.h</code></li> <li><code>math.h</code></li> <li><code>setjmp.h</code></li> <li><code>signal.h</code></li> <li><code>stdarg.h</code></li> <li><code>stddef.h</code></li> <li><code>stdio.h</code></li> <li><code>stdlib.h</code></li> <li><code>string.h</code></li> <li><code>time.h</code></li> </ul>"},{"location":"programming/programming-languages/C/summary/#recursion","title":"Recursion","text":"<p>Some recursive algorithms</p> <ul> <li><code>Fibonacci Series</code></li> <li><code>Factorial finding</code></li> <li><code>Binary Search</code></li> <li><code>Tree Traversals</code></li> <li><code>Graph Traversals</code></li> <li><code>Dynamic Programming</code></li> <li><code>Divide Conquer Algorithms</code></li> </ul>"},{"location":"programming/programming-languages/C/summary/#backtracking","title":"Backtracking","text":"<ul> <li>Backtracking is the method of exhaustive search using divide and conquer.</li> </ul> <p>e.g.</p> <ul> <li>Generate all strings of n bits</li> </ul> <pre><code>char A[n];\nvoid binary(int n){\n    if(n &lt; 1) printf(\"%s\", A);\n    else {\n        A[n-1] = '0';\n        binary(n-1);\n        A[n-1] = '1';\n        binary(n-1);\n    }\n}\n</code></pre>"},{"location":"programming/programming-languages/C/summary/#storage-class","title":"Storage Class","text":"<ul> <li>Auto</li> <li>Register</li> <li>Static</li> <li>Extern</li> </ul>"},{"location":"programming/programming-languages/C/summary/#dechipering-pointers","title":"Dechipering Pointers","text":"<p><code>void (*ptr)(int (*)[2], int (*) void))</code></p> <ul> <li><code>ptr</code> is a<ul> <li>pointer to function, whose<ul> <li>first parameter is a<ul> <li><code>pointer</code> to<ul> <li>an array of size 2 of type <code>int</code>,</li> </ul> </li> </ul> </li> <li>and second parameter is a<ul> <li>pointer to a function<ul> <li>which accept no arguments and</li> <li>return a <code>int</code> value,</li> </ul> </li> </ul> </li> </ul> </li> <li>and return type is <code>void</code>.</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/C/summary/#pointer-types","title":"Pointer Types","text":"<ul> <li>Dangling pointer<ul> <li>A pointer pointing to memory location that has been deleted and freed</li> <li>ways to create<ul> <li>de-allocation of memeory</li> <li>pointer pointing to a local variable when local variable is not static</li> <li>pointed variable goes out of scope</li> </ul> </li> </ul> </li> <li>NULL Pointer - points to nothing</li> <li>Wild Pointer - pointer not initialized not even to NULL.</li> <li>Void pointer<ul> <li>has no type associated with it,</li> <li>pointer arithmetic is not allowed, but can be done</li> <li>cannot be dereferenced</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/C/summary/#memory-leak","title":"Memory Leak","text":"<p>When programmers forget to free the memory.</p>"},{"location":"programming/programming-languages/C/summary/#array-decaying","title":"Array Decaying","text":"<p>When array are passed to functions they get decayed to pointers.</p> <ul> <li><code>int a[]</code> - <code>int *a</code></li> <li><code>int a[10][10]</code> - <code>int *a[10]</code>, not to <code>int **a</code></li> <li><code>int a[10][10][10]</code> - <code>int *a[10][10]</code> not to <code>int ***a</code></li> </ul>"},{"location":"programming/programming-languages/C/summary/#pointer-to-structure","title":"Pointer to Structure","text":"<ul> <li><code>p-&gt;name</code> is same as <code>(*p).name</code> but not as <code>*p.name</code> which is <code>*(p.name)</code></li> </ul>"},{"location":"programming/programming-languages/C/summary/linking/","title":"Linking","text":"<p>The process of combining the many source file and libraries together is called linking. It can be done in two ways:</p> <ul> <li>Dynamic</li> <li>Static</li> </ul> <p>I will use these files to explain:</p> <ul> <li><code>complex_no.c</code></li> </ul> <pre><code>#include \"complex_no.h\"\n\ncomplex create_complex(double re, double im){\n    complex temp;\n    temp.re = re;\n    temp.im = im;\n    return temp;\n}\n\ncomplex c_add(complex a, complex b) {\n    return create_complex(a.re + b.re, a.im + b.im);\n}\n\ncomplex c_subtract(complex a, complex b) {\n    return create_complex(a.re - b.re, a.im - b.im);\n}\n\ncomplex c_multiply(complex a, complex b) {\n    return create_complex(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re);\n}\n\ncomplex c_divide(complex a, complex b) {\n    double d = b.re * b.re + b.im * b.im;\n    return create_complex((a.re * b.re + a.im * b.im) / d, (a.re * b.im - a.im * b.re) / d);\n}\n</code></pre> <ul> <li><code>complex_no.h</code></li> </ul> <pre><code>struct complex {\n    double re; // real part\n    double im; // imaginarty part\n};\ntypedef struct complex complex;\n\ncomplex c_add(complex, complex);\ncomplex c_subtract(complex, complex);\ncomplex c_multiply(complex, complex);\ncomplex c_divide(complex, complex);\ncomplex create_complex(double, double);\n</code></pre> <ul> <li><code>main.c</code></li> </ul> <pre><code>#include \"complex_no.h\"\n#include &lt;stdio.h&gt;\nint main() {\n    complex a = create_complex(1,2);\n    complex b = create_complex(3,4);\n    complex c = c_add(a, b);\n    return 0;\n}\n</code></pre>"},{"location":"programming/programming-languages/C/summary/linking/#static-linking","title":"Static Linking","text":"<p>In static linking, the entire code from the linked libraries is copied into the final executable at compile-time. This means that the resulting executable contains all the necessary code, making it independent of external libraries during runtime. However, it can lead to larger executable sizes and reduced flexibility.</p>"},{"location":"programming/programming-languages/C/summary/linking/#create-static-library","title":"Create static library","text":"<ul> <li>Create a source file and its header file.</li> <li>Compile the source file to create a object file:<ul> <li><code>gcc -c [filename.c] -o [filename.o]</code></li> <li>In our case, <code>gcc -c complex_no.c -o complex_no.o</code></li> </ul> </li> <li>Archive a collection of those object files to make a library file.<ul> <li>Start archive name with <code>lib</code>and end it with <code>.a</code> extension.</li> <li><code>ar -rcs lib[archive_name].a [files_to_archive]</code></li> <li>In our case <code>ar -rcs libcomplex_no.a complex_no.o</code></li> <li><code>ar</code> is archival utility<ul> <li><code>r</code> - replace existing or insert new file(s) into the archive</li> <li><code>c</code> - do not warn if the library had to be created</li> <li><code>s</code> - create an archive index</li> </ul> </li> </ul> </li> </ul>"},{"location":"programming/programming-languages/C/summary/linking/#linking-static-library","title":"Linking static library","text":"<ul> <li><code>gcc [file.c] -I [library header file location] -L [library location] -l[library name] -o [output_file]</code></li> <li>In our case, <code>gcc main.c -I ./complex -L ./complex -lcomplex_no -o complex</code></li> </ul>"},{"location":"programming/programming-languages/C/summary/linking/#dynamic-linking","title":"Dynamic Linking","text":"<p>With dynamic linking, the final executable contains references to external libraries but does not include the actual library code. The dynamic linking happens at runtime when the executable is loaded into memory. This results in smaller executable sizes, and multiple programs can share the same library code in memory. Changes in the shared library can affect all programs using it.</p>"},{"location":"programming/programming-languages/C/summary/linking/#create-dynamic-library","title":"Create Dynamic Library","text":"<ul> <li>Create a source file and its header file. (<code>complex_no.c</code>, <code>complex_no.h</code>)</li> <li>Compile the source file to create a object file:<ul> <li><code>gcc -I [header_file_location] -fPIC -c [filename.c] -o [filename.o]</code></li> <li>In our case, <code>gcc -I -fPCI -c complex_no.c -o complex_no.o</code></li> <li><code>-fPIC</code> is flag for Position Independent Code.</li> </ul> </li> <li>Convert it to a dynamic link library(<code>.dll</code>) for windows, and shared object (<code>.so</code>) on linux<ul> <li>Windows, <code>gcc -shared [filename.o] -o [filename.dll]</code></li> <li>Linux, <code>gcc -shared [filename.o] -o [filename.so]</code></li> <li>In our case,<ul> <li>Windows, <code>gcc -shared complex_no.o -o complex_no.dll</code></li> <li>Linux, <code>gcc -shared complex_no.o -o complex_no.so</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"programming/programming-languages/C/summary/linking/#linking-dynamic-library","title":"Linking dynamic library","text":"<ul> <li>Compile main program to object file<ul> <li><code>gcc -I [header_file_location] -c [file.c] -o [file.o]</code></li> <li>In our case, <code>gcc -c main.c -o main.o</code></li> </ul> </li> <li>Create a binary executable, by linking <code>dll</code>/<code>so</code> and object file<ul> <li><code>gcc [file.o] -L [library_location] -l[filename] -o [output_file]</code></li> <li>In our case, <code>gcc main.o -L ./ -lcomplex_no -o main</code></li> </ul> </li> <li>While running the executable, make sure the file is in same directory as shared library, or   on linux it is present in <code>$LD_LIBRARY_PATH</code> env variable, and on <code>$PATH</code> for windows.</li> </ul>"},{"location":"programming/programming-languages/C/summary/undefined-behavior/","title":"Undefined Behavior","text":""},{"location":"programming/programming-languages/C/summary/undefined-behavior/#sequence-points","title":"Sequence Points","text":"<ul> <li>a point in the execution of a C program where it is sure that, all side effects of previous   evolutions are performed, and no side effects from the subsequent evaluations have yet been   performed.</li> </ul> <p>e.g.</p> <pre><code>int f1(){printf(\"made\"); return 1;}\nint f2(){printf(\"easy\"); return 1;}\nint main(){\n    int p = f1() + f2();  // either f1() or f2() can be executed first\n    // so output may be 'easymade' or ' madeeasy'\n    return 0;\n}\n</code></pre> <p>Operators like <code>+</code> , <code>-</code>, <code>/</code>, <code>*</code>, <code>&amp;</code>, <code>|</code> ... does not have any predefined standard for evaluation for its operands.</p>"},{"location":"programming/programming-languages/C/summary/undefined-behavior/#references","title":"References","text":"<ul> <li>https://en.wikipedia.org/wiki/Undefined_behavior</li> <li>https://en.cppreference.com/w/c/language/behavior</li> </ul>"},{"location":"programming/programming-languages/CPP/","title":"C++","text":"<p>C++ is an extension of the C programming language, offering object-oriented features while maintaining the efficiency of C. It is widely used in various domains where performance, scalability, and complex system architecture are crucial.</p>"},{"location":"programming/programming-languages/CPP/#where-c-programming-is-used","title":"Where C++ Programming is used","text":""},{"location":"programming/programming-languages/CPP/#game-development","title":"Game Development","text":"<ul> <li>Examples: Game engines like Unreal Engine, game development for consoles and PC.</li> <li>Details: C++ is heavily used in game development due to its high performance and direct access to system resources. It powers major game engines like Unreal Engine, which is used in popular games like Fortnite and Gears of War.</li> </ul>"},{"location":"programming/programming-languages/CPP/#systemoperating-systems","title":"System/Operating Systems","text":"<ul> <li>Examples: Operating systems, device drivers, and system utilities.</li> <li>Details: C++ is used in the development of operating systems and system-level software. For instance, Microsoft Windows has components written in C++. It\u2019s also used in writing device drivers that need to interact closely with hardware.</li> </ul>"},{"location":"programming/programming-languages/CPP/#embedded-systems","title":"Embedded Systems","text":"<ul> <li>Examples: Automotive software, robotics, and IoT devices.</li> <li>Details: C++ is used in embedded systems for applications that require both high performance and the use of object-oriented principles. Automotive software, such as control systems in cars, often relies on C++.</li> </ul>"},{"location":"programming/programming-languages/CPP/#high-performance-computing","title":"High-Performance Computing","text":"<ul> <li>Examples: Scientific computing, simulations, and financial modeling.</li> <li>Details: C++ is used for computationally intensive applications like scientific simulations, where performance and efficiency are critical. For example, C++ is used in large-scale financial modeling systems and real-time trading platforms.</li> </ul>"},{"location":"programming/programming-languages/CPP/#software-development-tools","title":"Software Development Tools","text":"<ul> <li>Examples: Compilers, IDEs, and debuggers.</li> <li>Details: Many software development tools, such as compilers (like GCC) and Integrated Development Environments (IDEs) like Microsoft Visual Studio, are written in C++ because of its performance and flexibility.</li> </ul>"},{"location":"programming/programming-languages/CPP/#web-browsers","title":"Web Browsers","text":"<ul> <li>Examples: Chrome, Firefox, and Safari.</li> <li>Details: C++ is used in the development of web browsers and rendering engines. For example, Google Chrome\u2019s V8 JavaScript engine and Mozilla Firefox\u2019s Gecko engine are written in C++ to ensure high-speed performance.</li> </ul>"},{"location":"programming/programming-languages/CPP/#database-management-systems","title":"Database Management Systems","text":"<ul> <li>Examples: MySQL, MongoDB, Oracle Database.</li> <li>Details: C++ is used in the development of database management systems that require high performance, such as MySQL and MongoDB. It is also used in Oracle Database, one of the most widely used enterprise databases.</li> </ul>"},{"location":"programming/programming-languages/CPP/#real-time-systems","title":"Real-Time Systems","text":"<ul> <li>Examples: Telecommunications, aerospace, and defense systems.</li> <li>Details: C++ is employed in real-time systems where timing is critical, such as telecommunications switching systems, flight control software, and military defense systems.</li> </ul>"},{"location":"programming/programming-languages/CPP/#graphics-and-visualization","title":"Graphics and Visualization","text":"<ul> <li>Examples: 3D modeling software, CAD tools, and VR/AR systems.</li> <li>Details: C++ is used in graphics-intensive applications like 3D modeling (e.g., Autodesk Maya), computer-aided design (CAD) tools, and virtual reality (VR) and augmented reality (AR) systems due to its ability to handle complex calculations and data structures efficiently.</li> </ul>"},{"location":"programming/programming-languages/CPP/#networking","title":"Networking","text":"<ul> <li>Examples: Network simulation tools, server software, and protocol implementation.</li> <li>Details: C++ is used in developing networking software, such as simulation tools for network design and analysis, as well as server software that needs to handle a large number of concurrent connections efficiently.</li> </ul>"},{"location":"programming/programming-languages/CPP/#audio-and-video-processing","title":"Audio and Video Processing","text":"<ul> <li>Examples: Media players, audio processing tools, and video editing software.</li> <li>Details: C++ is commonly used in the development of audio and video processing applications, like Adobe Premiere and VLC Media Player, where real-time processing and high performance are required.</li> </ul>"},{"location":"programming/programming-languages/CPP/#financial-systems","title":"Financial Systems","text":"<ul> <li>Examples: Trading platforms, risk management systems, and financial analytics.</li> <li>Details: C++ is widely used in the financial industry for building high-frequency trading platforms, risk management systems, and tools for financial analytics that require low-latency and high throughput.</li> </ul>"},{"location":"programming/programming-languages/CPP/#artificial-intelligence-and-machine-learning","title":"Artificial Intelligence and Machine Learning","text":"<ul> <li>Examples: TensorFlow, Caffe, and OpenCV.</li> <li>Details: C++ is used in developing AI and machine learning libraries where performance is critical. For example, TensorFlow\u2019s core is written in C++ to optimize the performance of deep learning models.</li> </ul>"},{"location":"programming/programming-languages/CPP/#some-software-developed-in-c","title":"Some Software Developed in C++","text":"<p>Some repos of softwares utilizing C++:</p> <ul> <li>OpenCV - computer vision tool - https://github.com/opencv/opencv</li> <li>Imagemagick - a image manipulation tool - https://github.com/ImageMagick/ImageMagick</li> <li>Krita - a tool for artists - https://github.com/KDE/krita</li> <li>Godot - a game engine - https://github.com/godotengine/godot</li> <li>Chromium - open source web browser - https://github.com/chromium/chromium</li> <li>Audacious - a music player - https://github.com/audacious-media-player/audacious</li> <li>Flameshot - a screenshot tool - https://github.com/flameshot-org/flameshot</li> </ul>"},{"location":"programming/programming-languages/CPP/resources/","title":"Resources","text":""},{"location":"programming/programming-languages/CPP/resources/#documentation","title":"Documentation","text":"<ul> <li>https://en.cppreference.com/w/</li> <li>https://isocpp.org/</li> <li>https://www.learncpp.com/</li> <li>https://cplusplus.com/reference/stl/</li> <li>https://learn.microsoft.com/en-us/cpp/?view=msvc-170</li> </ul>"},{"location":"programming/programming-languages/CPP/build-tools/","title":"Build Systems","text":"<ul> <li>Cmake</li> <li>Ninja</li> <li>Meson</li> <li>make</li> </ul>"},{"location":"programming/programming-languages/CPP/build-tools/cmake/","title":"CMake","text":""},{"location":"programming/programming-languages/CPP/build-tools/cmake/#linux-setup-for-c-development","title":"Linux Setup for C++ Development","text":"<ul> <li>CMake</li> <li>Codelite</li> <li>g++</li> <li> <p>GNU toolchain</p> </li> <li> <p>Sample Cmake file</p> </li> </ul> <p><code>CMakeLists.txt</code></p> <pre><code>cmake_minimum_required (VERSION 3.5)\n\nproject (HelloWorld)\n\nset (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Werror -std=c++14\")\nset (source_dir \"${PROJECT_SOURCE_DIR}/src/\")\n\nfile (GLOB source_files \"${source_dir}/*.cpp*\")\n\nadd_executable (HelloWorld ${source_files})\n</code></pre> <ul> <li>Generate a project</li> </ul> <pre><code>#!/bin/sh\ncmake -G \"CodeLite - Unix Makefiles\" -DCMAKE_BUILD_TYPE=Debug # can also use ninja\n</code></pre>"},{"location":"programming/programming-languages/CPP/compilers/","title":"Compilers in C++","text":"<p>There are three major compilers for C++:</p> <ul> <li>GCC</li> <li>LLVM</li> <li>Microsoft Visual C++ (include with microsoft visual studio)</li> <li>MinGW</li> </ul> <p>They all provide compiler for C and C++.</p>"},{"location":"programming/programming-languages/CPP/compilers/#gcc","title":"GCC","text":"<ul> <li>to use gcc on linux you only have to install the gcc toolchain from your package   manager</li> <li>to use gcc on windows you have to install it through MinGW or through Cigwin   or through WSL (in this case you are using linux.)</li> </ul>"},{"location":"programming/programming-languages/CPP/compilers/#llvm","title":"LLVM","text":"<ul> <li>install it's binary</li> <li>for it to run you have to install gcc or visual studio too</li> <li>becuase of some library dependecies</li> </ul>"},{"location":"programming/programming-languages/CPP/compilers/#visual-studio-c","title":"Visual Studio C++","text":"<ul> <li>install the community edition</li> </ul>"},{"location":"programming/programming-languages/CPP/compilers/debuggers/","title":"Debuggers","text":"<ul> <li>gdb</li> </ul>"},{"location":"programming/programming-languages/CPP/compilers/mingw/","title":"MinGW","text":"<ul> <li>MinGW, mingw32<ul> <li>https://en.wikipedia.org/wiki/MinGW</li> </ul> </li> <li>Mingw-w64<ul> <li>https://en.wikipedia.org/wiki/Mingw-w64</li> <li>https://www.mingw-w64.org/</li> </ul> </li> <li>tdm gcc<ul> <li>https://jmeubank.github.io/tdm-gcc/about/</li> </ul> </li> <li>mysys<ul> <li>https://www.msys2.org/</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/CPP/libraries/","title":"Libraries","text":""},{"location":"programming/programming-languages/CPP/libraries/sfml/","title":"Simple and Fast Multimedia Library (SFML)","text":"<p>SFML provides a simple interface to the various components of your PC, to ease the development of games and multimedia applications. It is composed of five modules: system, window, graphics, audio and network.</p> <p>https://www.sfml-dev.org/</p>"},{"location":"programming/programming-languages/CPP/libraries/sfml/#installation","title":"Installation","text":"<ul> <li>Use some C++ package manager</li> <li>Use operating system package manger<ul> <li><code>apt install libsfml-dev</code></li> </ul> </li> <li>Manually<ul> <li>Linux<ul> <li>Installing: Build from source, by cloning it's repo and follow it's install instructions.<ul> <li>Install dependencies <code>sudo apt-get -y install libx11-dev libudev-dev xorg-dev freeglut3-dev libalut-dev libvorbis-dev libflac-dev</code></li> <li>Build</li> </ul> </li> <li>Using<ul> <li>Compile File <code>g++ -c filename.cpp -I&lt;sfml-install-path&gt;/include -o main.o</code></li> <li>Linking <code>g++ main.o -o outputfilename -L&lt;sfml-install-path&gt;/lib -lsfml-graphics -lsfml-window -lsfml-system -lsfml-audio -lsfml-network</code></li> <li>Execute <code>export LD_LIBRARY_PATH=&lt;sfml-install-path&gt;/lib &amp;&amp; ./outputfilename</code></li> </ul> </li> </ul> </li> <li>Windows<ul> <li>Installing: Download the compiled library zip or download the source and build it.</li> <li>Using<ul> <li>Compile <code>g++ -c filename.cpp -I&lt;sfml-install-path&gt;/include</code></li> <li>Linking <code>g++ main.o -o outfilename -L&lt;sfml-install-path&gt;/lib  -lsfml-graphics -lsfml-window -lsfml-system -lsfml-audio -lsfml-network</code></li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"programming/programming-languages/CPP/libraries/standard_io/","title":"Standard I/O Library","text":""},{"location":"programming/programming-languages/CPP/libraries/standard_io/#standard-io-classes","title":"Standard I/O Classes","text":"<ul> <li><code>basic_ios</code> - provides general purpose I/O operations</li> </ul> <ul> <li><code>basic_streambuf</code> - low level support for I/O operation</li> <li><code>basic_istream</code> - support for input operations</li> <li><code>basic_ostream</code> - support for output operations</li> <li><code>basic_iostream</code> - support for input/output operations</li> </ul> <ul> <li><code>basic_filebuf</code> - low level support for file I/O</li> <li><code>basic_ifstream</code> - support for file input</li> <li><code>basic_ofstream</code> - support for file output</li> <li><code>basic_fstream</code> - support for file I/O</li> </ul> <ul> <li><code>basic_stringbuf</code> - low level support for string based I/O</li> <li><code>basic_istringstream</code> - support for string based input</li> <li><code>basic_ostringstream</code> - support for string based output</li> <li><code>basic_stringstream</code> - support for string based input/output</li> </ul> Template Class Character-Based Class Wide-Character-Based Class <code>basic_ios</code> <code>ios</code> <code>wios</code> <code>basic_istream</code> <code>istream</code> <code>wistream</code> <code>basic_ostream</code> <code>ostream</code> <code>wostream</code> <code>basic_iostream</code> <code>iostream</code> <code>wiostream</code> <code>basic_ifstream</code> <code>ifstream</code> <code>wifstream</code> <code>basic_ofstream</code> <code>ofstream</code> <code>wofstream</code> <code>basic_fstream</code> <code>fstream</code> <code>wfstream</code> <code>basic_istringstream</code> <code>istringstream</code> <code>wistringstream</code> <code>basic_ostringstream</code> <code>ostringstream</code> <code>wostringstream</code> <code>basic_stringstream</code> <code>stringstream</code> <code>wstringstream</code> <code>basic_streambuf</code> <code>streambuf</code> <code>wstreambuf</code> <code>basic_filebuf</code> <code>filebuf</code> <code>wfilebuf</code> <code>basic_stringbuf</code> <code>stringbuf</code> <code>wstringbuf</code>"},{"location":"programming/programming-languages/CPP/libraries/standard_io/#io-headers","title":"I/O Headers","text":"<ul> <li><code>fstream</code> - File I/O</li> <li><code>iomanip</code> - Parametrized I/O manipulators</li> <li><code>ios</code> - Basic I/O support</li> <li><code>iosfwd</code> - forward declarations used by I/O system</li> <li><code>iostream</code> - general I/O</li> <li><code>istream</code> - basic input support</li> <li><code>ostream</code> - basic output support</li> <li><code>sstream</code> - string based streams</li> <li><code>streambuf</code> - low level I/O support</li> </ul>"},{"location":"programming/programming-languages/CPP/libraries/stl/","title":"Standard template library","text":""},{"location":"programming/programming-languages/CPP/libraries/stl/#outline","title":"Outline","text":"<ul> <li>Generic Programming</li> <li>Container</li> <li>Algorithms</li> <li>Iterators</li> <li>Example</li> </ul>"},{"location":"programming/programming-languages/CPP/libraries/stl/#theory-behind-containers","title":"Theory behind containers","text":"<ul> <li>Vector<ul> <li>based on simple array, but if memory fills memory relocation happen with double the size </li> </ul> </li> <li>Lists<ul> <li>based on double linked list using pointers</li> </ul> </li> <li>Forward List<ul> <li>based on single linked list using pointers</li> </ul> </li> <li>Dequeue<ul> <li>is a mix of different data structures</li> <li>don't usually use this</li> <li>usually map of chunks of vectors</li> <li>for \\(O(1)\\) insertion in beginning and end and also for random access</li> </ul> </li> <li>Priority Queue<ul> <li>uses heap data structure</li> <li>internally how heap is represented may be changed</li> </ul> </li> <li>Maps<ul> <li>based on Red Black trees or AVL trees</li> </ul> </li> <li>Multi-maps<ul> <li>based on Red Black tress or AVL trees</li> </ul> </li> <li>Unordered map<ul> <li>based on hash tables, efficiency can be improved by improving hash functions</li> </ul> </li> <li>Unordered multimaps<ul> <li>based n hash tables</li> </ul> </li> <li>Set<ul> <li>based on Red Black tress, AVL trees</li> </ul> </li> <li>Unordered set<ul> <li>based on hash tables</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/CPP/libraries/stl/algorithms/","title":"STL Algorithms","text":""},{"location":"programming/programming-languages/CPP/libraries/stl/algorithms/#how-stl-algorithm-work","title":"How stl algorithm work?","text":"<ul> <li>we either have to pass the iterators to them, or   start and end pointers, and sometimes the   container to the algorithm, which is a template function.</li> </ul>"},{"location":"programming/programming-languages/CPP/libraries/stl/algorithms/#some-basic-algorithms","title":"Some basic algorithms","text":"<ul> <li>binary_search() - return true or false if a element is found or not, on a sorted container.</li> <li>upper_bound() - Returns an iterator pointing to the first element in the range <code>[first,last)</code>   which compares greater than val. https://cplusplus.com/reference/algorithm/upper_bound/</li> <li>lower_bound() - Returns an iterator pointing to the first element in the range <code>[first,last)</code>   which does not compare less than val. https://cplusplus.com/reference/algorithm/lower_bound/</li> <li>find() - return true of false after linear search</li> </ul>"},{"location":"programming/programming-languages/CPP/libraries/stl/algorithms/#writing-algorithms","title":"Writing algorithms","text":"<ul> <li>Writing generic algorithms:</li> </ul> <pre><code>template &lt;class T, class iter&gt;s\nvoid bubble_sort(iter begin, iter end, bool (&amp;compare)(T, T)) {\n  while(begin != end){\n    end--;\n    bool flag = true;\n    for(iter j=begin; j&lt;end;j++){\n      if (!compare(*j, *(j + 1))) {\n        flag = false;\n        T temp = *j;\n        *j = *(j + 1);\n        *(j + 1) = temp;\n      }\n    }\n    if(flag){\n      return;\n    }\n  }\n}\n</code></pre> <ul> <li>using functors, overloading</li> </ul> <pre><code>template &lt;class iterator, class T, class comp&gt;\niterator search(iterator begin, iterator end, T key, comp cmp) {\n  while (begin != end) {\n    if (cmp(*begin, key)) {\n      return begin;\n    }\n    begin++;\n  }\n  return end;\n}\n</code></pre> <ul> <li>a generic sort</li> </ul> <pre><code>template &lt;class X&gt; void sort(X a[],int n){\n    X t;\n    for(int i=0;i&lt;n;i++){\n        for(int j=0;j&lt;n-i-1;j++){\n            if(a[j]&gt;a[j+1]){\n                //swap\n                X temp;\n                temp = a[j];\n                a[j] = a[j+1];\n                a[j+1] = temp;\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"programming/programming-languages/CPP/libraries/stl/containers/","title":"STL Containers","text":"<ul> <li>containers store data in data structure</li> <li>containers are classes, they have data stored inside a data structure</li> <li>they have method to manipulate that data structure</li> </ul>"},{"location":"programming/programming-languages/CPP/libraries/stl/containers/#types-of-containers","title":"Types of containers","text":"<ul> <li>sequential containers - you can traverse them one by one in a sequential manner<ul> <li><code>array</code></li> <li><code>vector</code></li> <li><code>deque</code></li> <li><code>forward_list</code></li> <li><code>list</code></li> </ul> </li> <li>associative containers - contains sorted data and can be quickly searched   usually implemented using some tree<ul> <li><code>set</code></li> <li><code>map</code></li> <li><code>multiset</code></li> <li><code>multimap</code></li> </ul> </li> <li>unordered associative containers - can be searched in \\(O(1)\\) time,   and implemented using a hash table, are not sorted therefore<ul> <li><code>unordered_set</code></li> <li><code>unordered_map</code></li> <li><code>unordered_multimap</code></li> <li><code>unordered_multiset</code></li> </ul> </li> <li>containers adapters - are sequential containers but with different interfaces<ul> <li><code>stack</code></li> <li><code>queue</code></li> <li><code>priority_queue</code></li> </ul> </li> </ul> <p><code>bitset</code> <code>deque</code> <code>list</code> <code>map</code> <code>multimap</code> <code>multiset</code> <code>priority_queue</code> <code>queue</code> <code>set</code> <code>stack</code> <code>vector</code></p>"},{"location":"programming/programming-languages/CPP/libraries/stl/containers/#vector","title":"<code>vector</code>","text":"<ul> <li>library: <code>&lt;vector&gt;</code></li> <li>vector is a sequential</li> <li>ref: https://en.cppreference.com/w/cpp/container/vector</li> </ul>"},{"location":"programming/programming-languages/CPP/libraries/stl/containers/#complexity","title":"Complexity","text":"<ul> <li>Random access - \\(O(1)\\)</li> <li>Insertion and removal of elements at end - amortized \\(O(1)\\)</li> <li>Insertion and removal of elements - linear in distance to the end of the vector - \\(O(n)\\)</li> </ul>"},{"location":"programming/programming-languages/CPP/libraries/stl/containers/#member-function","title":"Member Function","text":"<ul> <li><code>assign()</code></li> <li><code>assign_range()</code></li> <li><code>get_allocator()</code></li> </ul>"},{"location":"programming/programming-languages/CPP/libraries/stl/containers/#element-access","title":"Element access","text":"<ul> <li><code>at()</code></li> <li><code>operator[]</code></li> <li><code>front()</code></li> <li><code>back()</code></li> </ul>"},{"location":"programming/programming-languages/CPP/libraries/stl/containers/#iterators","title":"Iterators","text":"<p><code>vector&lt;T&gt;::iterator</code></p> <ul> <li><code>begin()</code> - return iterator to the first element.</li> <li><code>end()</code> - return the iterator to the theoretical element that follows the last element in the vector.</li> <li><code>rbegin()</code> - reverse iterator to the last element of the vector.</li> <li><code>rend()</code> - reverse iterator to the theoretical element preceding the first element in the vector.</li> </ul> <p>There is also a variant starting with <code>c</code>, <code>cbegin()</code> which is a <code>const</code> iterator, i.e. you cannot change values using it.</p>"},{"location":"programming/programming-languages/CPP/libraries/stl/containers/#modifiers","title":"Modifiers","text":"<ul> <li><code>clear()</code></li> <li><code>insert()</code></li> <li><code>insert_range()</code></li> <li><code>erase()</code></li> <li><code>push_back()</code></li> <li><code>pop_back()</code></li> <li><code>clear()</code></li> </ul>"},{"location":"programming/programming-languages/CPP/libraries/stl/containers/#tricks-and-tips","title":"Tricks and tips","text":"<ul> <li>how to input in a vector</li> </ul> <pre><code>vector&lt;int&gt; v;\nint temp;\nwhile(counter-- &amp;&amp; cin &gt;&gt; temp){\n    v.push_back(temp);\n}\n</code></pre> <ul> <li>comparator in c++</li> </ul> <pre><code>// sort using custom comparator\nsort(v.begin(), v.end());\n\nclass compare {\npublic:\n    bool operator()(int a, int b) {\n        return a &gt; b;\n    }\n};\n\nsort(v,begin(), v.end(), compare());\n</code></pre>"},{"location":"programming/programming-languages/CPP/libraries/stl/containers/#priority_queue","title":"<code>priority_queue</code>","text":"<ul> <li>library: <code>&lt;queue&gt;</code></li> <li>can be treated as heap</li> <li>ref: https://en.cppreference.com/w/cpp/container/priority_queue</li> </ul>"},{"location":"programming/programming-languages/CPP/libraries/stl/containers/#tricks-and-tips_1","title":"Tricks and tips","text":"<ul> <li>custom comparator<ul> <li>https://stackoverflow.com/questions/16111337/declaring-a-priority-queue-in-c-with-a-custom-comparator</li> </ul> </li> </ul> <pre><code>priority_queue&lt;int, vector&lt;int&gt;, less&lt;int&gt;&gt; maxh; // max heap\npriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; minh; // min heap\n// first you pass the type, then you pass the container, then you pass the comparator\n</code></pre> <pre><code>// how to heapify a vector in -- time complexity O(n)\nvector&lt;int&gt; vec={3, 1, 4, 1, 5};\n\n// max heap pq heapify\npriority_queue&lt;int, vector&lt;int&gt;, less&lt;int&gt;&gt; pq (std::less&lt;int&gt;(), vec); \n// pass the comparator and the vector\n\n// min heap pq heapify\npriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; minh(std::greater&lt;int&gt;(), vec);\n\n// for certain range make heap\npriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; minh(vec.cbegin(), vec.cend());\n</code></pre>"},{"location":"programming/programming-languages/CPP/libraries/stl/containers/#unordered_map","title":"<code>unordered_map</code>","text":"<pre><code>// traversal of unordered map\nunordered_map&lt;int, int&gt; m;\nfor(auto i:m){\n    cout &lt;&lt; (*i).first &lt;&lt; \" \" &lt;&lt; (*i).second &lt;&lt; endl;\n}\n</code></pre>"},{"location":"programming/programming-languages/CPP/libraries/stl/containers/#insert-elements-in-map","title":"Insert elements in map","text":"<pre><code>// default value is 0\nunordered_map&lt;int, int&gt; m;\nfor(int i=0;i&lt;n;i++){\n  cin &gt;&gt; t;\n  m[t] += 1;\n}\n\nauto found = ta.find(m);\nif(found == ta.end()) {\n  ta.emplace(m, it.second);\n}\nelse {\n  found-&gt;second += it.second;\n}\n</code></pre>"},{"location":"programming/programming-languages/CPP/libraries/stl/containers/#constants-in-cpp","title":"constants in cpp","text":"<pre><code>// iterate over constants, this will reduce time as the values are not copied\nfor (const auto &amp;it : ot) {\n  // you code\n}\n</code></pre>"},{"location":"programming/programming-languages/CPP/libraries/stl/example/","title":"Implementing a container, (example)","text":"<p>A simple insight on how you can also implement your own container:</p> <pre><code>template &lt;class T&gt;\nclass Vector {\npublic:\n    typedef T *iterator;\n\n    Vector();\n    Vector(unsigned int size);\n    Vector(unsigned int size, const T &amp;initial);\n    Vector(const Vector&lt;T&gt; &amp;v);\n    ~Vector();\n\n    unsigned int capacity() const;\n    unsigned int size() const;\n    bool empty() const;\n    iterator begin();\n    iterator end();\n    T &amp;front();\n    T &amp;back();\n    void push_back(const T &amp;value);\n    void pop_back();\n\n    void reserve(unsigned int capacity);\n    void resize(unsigned int size);\n\n    T &amp;operator[](unsigned int index);\n    Vector&lt;T&gt; &amp;operator=(const Vector&lt;T&gt; &amp;);\n    void clear();\n\nprivate:\n    unsigned int my_size;\n    unsigned int my_capacity;\n    T *buffer;\n};\n\n// Your code goes here ...\ntemplate &lt;class T&gt;\nVector&lt;T&gt;::Vector() {\n    my_capacity = 0;\n    my_size = 0;\n    buffer = 0;\n}\n\ntemplate &lt;class T&gt;\nVector&lt;T&gt;::Vector(const Vector&lt;T&gt; &amp;v) {\n    my_size = v.my_size;\n    my_capacity = v.my_capacity;\n    buffer = new T[my_size];\n    for (unsigned int i = 0; i &lt; my_size; i++)\n        buffer[i] = v.buffer[i];\n}\n\ntemplate &lt;class T&gt;\nVector&lt;T&gt;::Vector(unsigned int size) {\n    my_capacity = size;\n    my_size = size;\n    buffer = new T[size];\n}\n\ntemplate &lt;class T&gt;\nVector&lt;T&gt;::Vector(unsigned int size, const T &amp;initial) {\n    my_size = size;\n    my_capacity = size;\n    buffer = new T[size];\n    for (unsigned int i = 0; i &lt; size; i++)\n        buffer[i] = initial;\n    // T();\n}\n\ntemplate &lt;class T&gt;\nVector&lt;T&gt; &amp;Vector&lt;T&gt;::operator=(const Vector&lt;T&gt; &amp;v) {\n    delete[] buffer;\n    my_size = v.my_size;\n    my_capacity = v.my_capacity;\n    buffer = new T[my_size];\n    for (unsigned int i = 0; i &lt; my_size; i++)\n        buffer[i] = v.buffer[i];\n    return *this;\n}\n\ntemplate &lt;class T&gt;\ntypename Vector&lt;T&gt;::iterator Vector&lt;T&gt;::begin() {\n    return buffer;\n}\n\ntemplate &lt;class T&gt;\ntypename Vector&lt;T&gt;::iterator Vector&lt;T&gt;::end() {\n    return buffer + size();\n}\n\ntemplate &lt;class T&gt;\nT &amp;Vector&lt;T&gt;::front() { return buffer[0]; }\n\ntemplate &lt;class T&gt;\nT &amp;Vector&lt;T&gt;::back() { return buffer[my_size - 1]; }\n\ntemplate &lt;class T&gt;\nvoid Vector&lt;T&gt;::push_back(const T &amp;v) {\n    if (my_size &gt;= my_capacity)\n        reserve(my_capacity + 5);\n    buffer[my_size++] = v;\n}\n\ntemplate &lt;class T&gt;\nvoid Vector&lt;T&gt;::pop_back() { my_size--; }\n\ntemplate &lt;class T&gt;\nvoid Vector&lt;T&gt;::reserve(unsigned int capacity) {\n    if (buffer == 0) {\n        my_size = 0;\n        my_capacity = 0;\n    }\n    T *Newbuffer = new T[capacity];\n    // assert(Newbuffer);\n    unsigned int l_Size = capacity &lt; my_size ? capacity : my_size;\n    // copy (buffer, buffer + l_Size, Newbuffer);\n\n    for (unsigned int i = 0; i &lt; l_Size; i++)\n        Newbuffer[i] = buffer[i];\n\n    my_capacity = capacity;\n    delete[] buffer;\n    buffer = Newbuffer;\n}\n\ntemplate &lt;class T&gt;\nunsigned int Vector&lt;T&gt;::size() const //\n{\n    return my_size;\n}\n\ntemplate &lt;class T&gt;\nvoid Vector&lt;T&gt;::resize(unsigned int size) {\n    reserve(size);\n    my_size = size;\n}\n\ntemplate &lt;class T&gt;\nT &amp;Vector&lt;T&gt;::operator[](unsigned int index) {\n    return buffer[index];\n}\n\ntemplate &lt;class T&gt;\nunsigned int Vector&lt;T&gt;::capacity() const {\n    return my_capacity;\n}\n\ntemplate &lt;class T&gt;\nVector&lt;T&gt;::~Vector() { delete[] buffer; }\ntemplate &lt;class T&gt;\nvoid Vector&lt;T&gt;::clear() {\n    my_capacity = 0;\n    my_size = 0;\n    buffer = 0;\n}\n</code></pre> <pre><code>template &lt;typename T&gt; \nclass stack {\n  vector&lt;T&gt; arr;\n\npublic:\n  bool empty(){\n    return arr.empty();\n  }\n  T pop() {\n    T temp = arr[arr.size() - 1];\n    arr.pop_back();\n    return temp;\n  }\n  T top() { return arr[arr.size() - 1]; }\n  void push(T value) { arr.push_back(value); }\n};\n</code></pre> <p>or</p> <pre><code>const int SIZE = 10;\n\n// create generic class stack\ntemplate &lt;class StackType&gt; class stack{\n    StackType stack[SIZE]; // holds the stack\n    int tos; //index of top of stack\n    public:\n        stack(){tos =0;}\n        void push(StackType ob);\n        StackType pop();\n};\n// push an object\ntemplate &lt;class StackType&gt; void stack&lt;StackType&gt;::push(StackType ob){\n    if(tos==SIZE){\n        cout &lt;&lt; \"Stack overflow\";\n        return;\n    }\n    stack[tos]=ob;\n    tos++;\n}\ntemplate &lt;class StackType&gt; StackType stack&lt;StackType&gt;::pop(){\n    if(tos==0){\n        cout &lt;&lt;\"stack is empty\";\n    } \n    tos--;\n    return stack[tos];\n}\n</code></pre>"},{"location":"programming/programming-languages/CPP/libraries/stl/generic_programming/","title":"Generic Programming","text":""},{"location":"programming/programming-languages/CPP/libraries/stl/generic_programming/#templates","title":"Templates","text":"<ul> <li>template for a function</li> </ul> <pre><code>template &lt;class X&gt;\nvoid function_name(X &amp;a, X &amp;b){\n    X temp;\n    temp = a;\n    a = b;\n    b = temp;\n}\n</code></pre> <ul> <li>template of a class</li> </ul> <pre><code>template &lt;class X&gt;\nclass class_name{\n    X var1;\n    public:\n        void printX(X var);\n};\n</code></pre> <ul> <li>multiple types in template</li> </ul> <pre><code>template &lt;class T1, class T2&gt;\nclass class_name{\n    T1 var1;\n    T2 var2;\n    public:\n        void print(T1 var);\n};\n</code></pre>"},{"location":"programming/programming-languages/CPP/libraries/stl/generic_programming/#functors","title":"Functors","text":"<ul> <li>will always have a overloaded <code>()</code> operator<ul> <li>so <code>class(x)</code> will be same as <code>class.operator()(x)</code></li> </ul> </li> <li>can be treated as they are function pointers</li> </ul> <p>e.g. a functor to add 1 to element</p> <pre><code>class increment {\nprivate:\n    int num;\npublic:\n    increment(int n){num = n;}\n    int operator()(int arr_num) const { return num + arr_num;}\n};\n\nint main(){\n    int arr[] = {1,2,3,4};\n    transform(arr, arr+4, increment(4));\n    return 0;\n}\n</code></pre>"},{"location":"programming/programming-languages/CPP/libraries/stl/generic_programming/#lambda-functions","title":"Lambda functions","text":"<ul> <li>are inline functions</li> </ul> <pre><code>//lambda function to print vector\nfor_each(v.begin(), v.end(), [](int i){\n    std::cout &lt;&lt; i &lt;&lt; \" \";\n})\n</code></pre> <ul> <li>generic structure of the lambda function</li> </ul> <pre><code>[ capture clause ] (parameters) -&gt; return-type {\n  //definition of method\n}\n</code></pre>"},{"location":"programming/programming-languages/CPP/libraries/stl/iterators/","title":"Iterators","text":"<ul> <li>to access data inside the container they provide iterators</li> <li>iterators are pointer to the data inside the container</li> <li>you can increment it for sequential containers to get   another data item</li> </ul>"},{"location":"programming/programming-languages/CPP/summary/miscellaneous/","title":"Miscellaneous","text":"<ul> <li>oop</li> <li>derived from c</li> <li>c with classes, but now it's much more</li> <li> <p>low level access to memory</p> </li> <li> <p>Advantages</p> <ul> <li>fast</li> <li>more low level access</li> </ul> </li> <li>Disadvantages<ul> <li>memory leaks</li> <li>oop drawbacks, due to multiple inheritance</li> <li>porting to other platform is time consuming</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/CPP/summary/miscellaneous/#common-mistakes","title":"Common Mistakes","text":"<ul> <li>Reading bullschildt http://www.lysator.liu.se/c/schildt.html</li> <li>https://stackoverflow.com/questions/2934904/order-of-evaluation-in-c-function-parameters</li> <li>https://stackoverflow.com/questions/17358445/why-does-right-shifting-negative-numbers-in-c-bring-1-on-the-left-most-bits</li> <li>https://stackoverflow.com/questions/562303/the-definitive-c-book-guide-and-list/579795#579795</li> <li>https://stackoverflow.com/questions/2397984/undefined-unspecified-and-implementation-defined-behavior</li> </ul>"},{"location":"programming/programming-languages/CPP/summary/miscellaneous/#oop-in-c","title":"OOP in C++","text":"<ul> <li>Classes<ul> <li>templates for objects</li> <li>when a class is instantiated it becomes a object</li> </ul> </li> <li>Object<ul> <li>instance of the class</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/CPP/summary/miscellaneous/#faq-and-common-misconceptions","title":"FAQ and common misconceptions","text":"<ul> <li>C++ is C with classes<ul> <li>although this is correct but this does not means all the C features are available   in C++ also</li> <li>you should follow C++ standard and not something that works in a particular compiler</li> <li><code>#include&lt;bits/stdc++.h&gt;</code> this is <code>g++</code> specific library, so if you use it on   some other compiler it will not work.</li> <li>other difference are in initialization of variable sized array, in g++ the declaration   <code>int a[v] = {0};</code> will work but it will not work in every compiler, because it is not in   C++ specification. C++ don't support variable length arrays.</li> </ul> </li> <li> <p>out of scope vector</p> <ul> <li>https://stackoverflow.com/questions/59071549/can-i-keep-vector-data-even-after-out-of-scope</li> <li> <p>https://stackoverflow.com/questions/15704565/efficient-way-to-return-a-stdvector-in-c</p> </li> <li> <p><code>cpp   vector&lt;int&gt; getNo(){     vector&lt;int&gt; ans = {1,2,3};     return ans;   }</code></p> </li> <li> <p>here when the function <code>getNo</code> is called it creates a vector and when it return   it returns a copy of vector and not the actual created vector ans.   OR   it can be moved too, instead of returning, some other compiler optimization are also done.</p> </li> <li>how to pass a 2-D matrix</li> <li>https://stackoverflow.com/questions/8767166/passing-a-2d-array-to-a-c-function</li> <li>often time you will notice some online contest giving you arrays instead if vectors</li> <li>this is confusing because we are not able to see further implementation detail.</li> <li> <p>the most confusing one is <code>int **arr</code> passed in function</p> </li> <li> <p><code>cpp   int arr[12][12];   void pass(int a[][10]){}</code></p> </li> <li> <p><code>cpp   int *arr[10];   for(int i=0;i&lt;10;i++) arr[i] = new int[10];   void pass(int *a[10]){}</code></p> </li> <li> <p><code>cpp   // this is the way they pass these function online   int **arr;   arr = new int *[10]; // arr is an array of 10 (pointers to arr)   for(int i=0;i&lt;10;i++) arr[i] = new int[10];   void pass(int **arr){}</code></p> </li> </ul> </li> <li> <p>how to create a variable sized array</p> <ul> <li>https://stackoverflow.com/questions/15013077/arrayn-vs-array10-initializing-array-with-variable-vs-numeric-literal</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/CPP/summary/miscellaneous/#typecasting-error","title":"Typecasting error","text":"<ul> <li>first store result in a variable then use it inside if else   because of type conversions, note that size return unsigned numbers for   all containers.</li> </ul> <pre><code>long n;\nlong temp;\n\n// this will give -1 if n = temp*s.length()\nlong answer = n - temp * s.length() - 1; \n\n// this will give 18446744073709551615\ncout &lt;&lt; n - temp * s.length() - 1;\n\n// reason because s.length() gives a unsigned number\n</code></pre> <ul> <li>data types limits in c++</li> </ul> data exact range approx <code>short int</code> -32,768 to 32,767 -3E4 - 3E4 <code>unsigned short int</code> 0 to 65,535 0 - 6E4 <code>unsigned int</code> 0 to 4,294,967,295 0 - 4E9 <code>int</code> -2,147,483,648 to 2,147,483,647 -2E9 - 2E9 <code>long int</code> -2,147,483,648 to 2,147,483,647 -2E9 - 2E9 <code>unsigned long int</code> 0 to 4,294,967,295 0 - 4E9 <code>long long int</code> -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 -9E18 - 9E18 <code>unsigned long long int</code> 0 to 18,446,744,073,709,551,615 0 - 1E19 <code>signed char</code> -128 to 127 -1E2 - 1E2 <code>unsigned char</code> 0 to 255 0 - 2E2"},{"location":"programming/programming-languages/CPP/summary/strings/","title":"Strings","text":""},{"location":"programming/programming-languages/CPP/summary/strings/#split-strings","title":"Split strings","text":"<pre><code>std::vector&lt;std::string&gt; split(std::string text, char delim) {\n    std::string line;\n    std::vector&lt;std::string&gt; vec;\n    std::stringstream ss(text);\n    while(std::getline(ss, line, delim)) {\n        vec.push_back(line);\n    }\n    return vec;\n}\n</code></pre> <pre><code>std::vector&lt;std::string&gt; spikt(){\n    std::string s = \"What is the right way to split a string into a vector of strings\";\n    std::stringstream ss(s);\n    std::istream_iterator&lt;std::string&gt; begin(ss), end;\n    std::vector&lt;std::string&gt; vstrings(begin, end);\n    std::copy(vstrings.begin(), vstrings.end(), std::ostream_iterator&lt;std::string&gt;(std::cout, \"\\n\"));\n    return vstrings;\n}\n</code></pre>"},{"location":"programming/programming-languages/Python/","title":"Python","text":"<p>Python is a versatile programming language used in various domains.</p>"},{"location":"programming/programming-languages/Python/#where-is-python-programming-used","title":"Where is Python programming used","text":""},{"location":"programming/programming-languages/Python/#web-development","title":"Web Development","text":"<ul> <li>Used for backend development and statics sites</li> <li>Frameworks: <code>Django</code>, <code>Flask</code></li> <li>Many statics site generators are also there like <code>mkdocs</code></li> </ul>"},{"location":"programming/programming-languages/Python/#data-science-and-machine-learning","title":"Data Science and Machine Learning","text":"<ul> <li>due to huge number of existing libraries and simplicity of python</li> <li>Libraries: <code>Pandas</code>, <code>NumPy</code>, <code>Scikit-learn</code>, <code>TensorFlow</code></li> </ul>"},{"location":"programming/programming-languages/Python/#automation-and-scripting-used-extensively-for-gui-testing-also","title":"Automation and Scripting, used extensively for gui testing also","text":"<ul> <li>Tools: <code>Selenium</code>, <code>PyAutoGUI</code></li> </ul>"},{"location":"programming/programming-languages/Python/#software-development","title":"Software Development","text":"<ul> <li>Tools: <code>PyQt</code>, <code>Tkinter</code></li> </ul>"},{"location":"programming/programming-languages/Python/#game-development-not-used-that-much-in-professional-game-development","title":"Game Development, not used that much in professional game development","text":"<ul> <li>Libraries: <code>Pygame</code>, <code>Panda3D</code></li> </ul>"},{"location":"programming/programming-languages/Python/#networking-and-security","title":"Networking and Security","text":"<ul> <li>Libraries: <code>Scapy</code>, <code>Paramiko</code></li> <li>Example: Writing tools for network monitoring, penetration testing, and automating security tasks. Python can be used to automate SSH connections, analyze network packets, or create custom security tools.</li> </ul>"},{"location":"programming/programming-languages/Python/#embedded-systems","title":"Embedded Systems","text":"<ul> <li>Tools: <code>MicroPython</code>, <code>CircuitPython</code></li> <li>Example: Programming microcontrollers and small hardware devices. Python is used to control hardware like LEDs, sensors, and motors in IoT devices.</li> </ul>"},{"location":"programming/programming-languages/Python/#artificial-intelligence-ai-and-deep-learning","title":"Artificial Intelligence (AI) and Deep Learning","text":"<ul> <li>Libraries: <code>Keras</code>, <code>PyTorch</code>, <code>OpenAI Gym</code></li> </ul>"},{"location":"programming/programming-languages/Python/#devops-and-cloud-computing","title":"DevOps and Cloud Computing","text":"<ul> <li>Tools: <code>Ansible</code>, <code>Boto3</code></li> </ul>"},{"location":"programming/programming-languages/Python/#some-software-developed-in-python","title":"Some software developed in Python","text":"<p>Here are some repos you can visit to see python in action</p> <ul> <li>Youtube Downloader - https://github.com/ytdl-org/youtube-dl</li> <li>Caliber - a ebook manager - https://github.com/kovidgoyal/calibre</li> </ul>"},{"location":"programming/programming-languages/Python/resources/","title":"Resources","text":""},{"location":"programming/programming-languages/Python/resources/#documentation","title":"Documentation","text":"<ul> <li>https://www.python.org/</li> <li>https://pycom.io/</li> <li>https://docs.python-guide.org/</li> </ul>"},{"location":"programming/programming-languages/Python/resources/#tutorials","title":"Tutorials","text":"<ul> <li>https://realpython.com/</li> <li>https://docs.quantifiedcode.com/python-anti-patterns/index.html</li> <li>https://book.pythontips.com/en/latest/index.html</li> <li>https://python.libhunt.com/</li> </ul>"},{"location":"programming/programming-languages/Python/resources/#videos","title":"Videos","text":"<ul> <li>https://www.youtube.com/watch?v=XGF3Qu4dUqk</li> </ul>"},{"location":"programming/programming-languages/Python/resources/#books","title":"Books","text":""},{"location":"programming/programming-languages/Python/libraries/","title":"Libraries","text":"<ul> <li>matplotlib</li> <li>numpy</li> <li>opencv</li> <li>pandas</li> <li>pillow</li> <li>scikitlearn</li> <li>splitfolders</li> <li>tensorflow</li> </ul>"},{"location":"programming/programming-languages/Python/libraries/automation/","title":"Automation using python","text":"<ul> <li><code>BeautifulSoup</code> - web scraping</li> <li><code>Selenium</code> - browser automation</li> <li><code>OpenPyXL</code> - for excel files</li> <li><code>docx</code> <code>python-docx</code> - for microsoft word files</li> <li><code>threading</code> - for multithreading</li> <li><code>schedule</code> - for scheduling</li> <li><code>smtplib</code> - for SMTP mail transfer</li> <li><code>imapclient</code> - for receiving mails IMAP</li> <li><code>pyautogui</code> - for gui automation</li> </ul>"},{"location":"programming/programming-languages/Python/libraries/pandas/","title":"Pandas","text":"<pre><code># Import Pandas\nimport pandas as pd\n\n# Creating DataFrames\ndf = pd.DataFrame(data)            # Create a DataFrame from data\ndf = pd.read_csv('file.csv')       # Read from a CSV file\ndf = pd.read_excel('file.xlsx')    # Read from an Excel file\n\n# Basic DataFrame Operations\ndf.head()                          # Display first 5 rows\ndf.tail()                          # Display last 5 rows\ndf.shape                           # Number of rows and columns\ndf.info()                          # Summary of DataFrame\ndf.columns                         # List of column names\ndf.index                           # Index information\ndf.describe()                      # Summary statistics\n\n# Selection and Indexing\ndf['column_name']                  # Select a column\ndf[['col1', 'col2']]               # Select multiple columns\ndf.loc[row_label]                  # Select row by label\ndf.iloc[row_index]                 # Select row by integer index\ndf.loc[condition]                  # Select rows based on condition\ndf.iloc[condition]                 # Select rows based on condition\n\n# Filtering Data\ndf[df['column_name'] &gt; value]      # Filter rows based on condition\ndf.query('condition')              # Filter using SQL-like queries\n\n# Sorting\ndf.sort_values('column_name')      # Sort DataFrame by column\ndf.sort_values(['col1', 'col2'])   # Sort by multiple columns\ndf.sort_index()                    # Sort by index\n\n# Aggregation\ndf['column_name'].sum()            # Sum of values in column\ndf['column_name'].mean()           # Mean of values in column\ndf.groupby('group_col').agg(func)  # Apply aggregate function to groups\n\n# Missing Data\ndf.isna()                          # Boolean mask for missing values\ndf.dropna()                        # Drop rows with missing values\ndf.fillna(value)                   # Fill missing values\n\n# Creating and Modifying Columns\ndf['new_column'] = values          # Create a new column\ndf['new_col'] = df['col'] + 1      # Perform operations on columns\n\n# Data Cleaning\ndf['column_name'] = df['column_name'].str.strip()  # Remove leading/trailing spaces\ndf['column_name'] = df['column_name'].str.lower()  # Convert to lowercase\n\n# Merging DataFrames\npd.merge(df1, df2, on='common_col')              # Merge based on a common column\npd.concat([df1, df2], axis=0)                   # Concatenate along rows\n\n# Grouping and Aggregation\ndf.groupby('column_name').agg({'col1': 'mean', 'col2': 'sum'})\n\n# Pivot Tables\ndf.pivot_table(values='value_col', index='index_col', columns='col_to_pivot')\n\n# Reshaping Data\ndf.melt(id_vars=['col1'], value_vars=['col2'])  # Convert wide data to long format\ndf.pivot(index='index_col', columns='col_to_pivot', values='value_col')\n\n# DateTime Operations\ndf['datetime_col'] = pd.to_datetime(df['datetime_col'])  # Convert to datetime\ndf.set_index('datetime_col', inplace=True)       # Set datetime column as index\n\n# Save DataFrames\ndf.to_csv('file.csv', index=False)         # Save to CSV\ndf.to_excel('file.xlsx', index=False)      # Save to Excel\n</code></pre>"},{"location":"programming/programming-languages/Python/libraries/pillow/","title":"pillow","text":"<ul> <li>open a image</li> </ul> <pre><code>image = 'your image path\nim = Image.open(image)\nim.show()\n</code></pre> <ul> <li>save image to the same image</li> </ul> <pre><code>image = 'your image path\nim = Image.open(image)\nim.show()\nim.save(image)\n</code></pre>"},{"location":"programming/programming-languages/Python/libraries/splitfolders/","title":"split folders","text":"<ul> <li>split folders into test train and validation</li> </ul> <pre><code>splitfolders.ratio(input, output=output, seed=223, ratio=(.55, 0.25,0.2)) \n</code></pre>"},{"location":"programming/programming-languages/Python/libraries/tensorflow/","title":"tensorflow","text":"<ul> <li>import tensorflow</li> </ul> <pre><code>import tensorflow as tf\n</code></pre> <ul> <li>import keras from tensorflow</li> </ul> <pre><code>from tensorflow import keras\n</code></pre> <ul> <li>generate different types of images from given images</li> </ul> <pre><code>from tensorflow.keras.preprocessing.image import ImageDataGenerator\n</code></pre>"},{"location":"programming/programming-languages/Python/libraries/testing/","title":"Testing","text":"<p>A key to building software that meets requirements without defects is testing. Software testing helps developers know they are building the right software. When tests are run as part of the development process (often with continuous integration tools), they build confidence and prevent regressions in the code.</p> <p>Visit the following resources to learn more:</p> <ul> <li>What is Software Testing?</li> <li>Testing Pyramid</li> <li>Automate Quality, Security Checks for Python Library Dependencies</li> </ul>"},{"location":"programming/programming-languages/Python/libraries/testing/#pyunit-unittest","title":"PyUnit / Unittest","text":"<p>PyUnit is an easy way to create unit testing programs and UnitTests with Python. (Note that docs.python.org uses the name \"unittest\", which is also the module name.)</p> <p>Visit the following resources to learn more:</p> <ul> <li>How To Use unittest to Write a Test Case for a Function in Python</li> <li>PyUnit Docs</li> <li>A Gentle Introduction to Unit Testing in Python</li> </ul>"},{"location":"programming/programming-languages/Python/libraries/testing/#pytest","title":"pytest","text":"<p>pytest is a mature full-featured Python testing tool that helps you write better programs.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Official Docs</li> <li>Pytest Tutorial</li> </ul>"},{"location":"programming/programming-languages/Python/libraries/testing/#doctest","title":"Doctest","text":"<p>Python's standard library comes equipped with a test framework module called doctest. The doctest module programmatically searches Python code for pieces of text within comments that look like interactive Python sessions. Then, the module executes those sessions to confirm that the code referenced by a doctest runs as expected.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Doctest module reference</li> <li>How To Write Doctests in Python</li> </ul>"},{"location":"programming/programming-languages/Python/libraries/testing/#nose","title":"Nose","text":"<p>Nose is another opensource testing framework that extends <code>unittest</code> to provide a more flexible testing framework.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Introduction to Nose</li> <li>Getting Started With Nose In Python</li> </ul>"},{"location":"programming/programming-languages/Python/libraries/web-frameworks/","title":"Web Frameworks","text":"<p>Frameworks automate the common implementation of common solutions which gives the flexibility to the users to focus on the application logic instead of the basic routine processes.</p> <p>Frameworks make the life of web developers easier by giving them a structure for app development. They provide common patterns in a web application that are fast, reliable and easily maintainable. Visit the following resources to learn more:</p> <ul> <li>Pyscript: A Browser-Based Python Framework for the 99%</li> </ul>"},{"location":"programming/programming-languages/Python/libraries/web-frameworks/#fastapi","title":"FastAPI","text":"<p>FastAPI is a Web framework for developing RESTful APIs in Python. FastAPI is based on Pydantic and type hints to validate, serialize, and deserialize data and automatically auto-generate OpenAPI documents.</p> <ul> <li>Official Documentation</li> </ul>"},{"location":"programming/programming-languages/Python/libraries/web-frameworks/#synchronous-frameworks","title":"Synchronous Frameworks","text":"<p>Synchronous frameworks in python handle the flow of data in a synchronous manner. On a synchronous request, you make the request and stop executing your program until you get a response from the HTTP server (or an error if the server can't be reached, or a timeout if the sever is taking way, way too long to reply) The interpreter is blocked until the request is completed (until you got a definitive answer of what happened with the request: did it go well? was there an error? a timeout?... ).</p> <p>Visit the following resources to learn more:</p> <ul> <li>Sync vs. Async Python: What is the Difference?</li> </ul>"},{"location":"programming/programming-languages/Python/libraries/web-frameworks/#django","title":"Django","text":"<p>Django is a free and open-source, Python-based web framework that follows the model-template-views architectural pattern. It is maintained by the Django Software Foundation, an independent organization established in the US as a 501 non-profit</p> <p>Visit the following resources to learn more:</p> <ul> <li>Django Official Website</li> <li>Official Getting Started Guide</li> <li>Python Django Tutorial for Beginners</li> <li>Is Django synchronous or asynchronous?</li> </ul>"},{"location":"programming/programming-languages/Python/libraries/web-frameworks/#directory-structure","title":"Directory structure","text":"<ul> <li><code>manage.py</code> - main file to run server, make apps</li> <li><code>projectname</code> - main folder for the project<ul> <li><code>url.py</code> - contains the mapping of the url to the project</li> <li><code>settings.py</code> - contains the setting of the installed apps, you can add apps here</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/Python/libraries/web-frameworks/#basic-commands","title":"Basic commands","text":"<ul> <li>how to start new project <code>django-admin startproject projectname</code></li> <li>how to create new app inside the project <code>python manage.py startapp appname</code></li> </ul>"},{"location":"programming/programming-languages/Python/libraries/web-frameworks/#templating","title":"Templating","text":"<ul> <li><code>{}</code></li> <li><code>{% %}</code></li> </ul>"},{"location":"programming/programming-languages/Python/libraries/web-frameworks/#models","title":"Models","text":"<ul> <li>after creating models you should do migrations<ul> <li><code>python manage.py migrate</code></li> </ul> </li> <li>finish making migrations<ul> <li><code>python manage.py makemigrations app_name</code></li> </ul> </li> </ul>"},{"location":"programming/programming-languages/Python/libraries/web-frameworks/#flask","title":"Flask","text":"<p>Flask is a micro web framework written in Python. It is classified as a microframework because it does not require particular tools or libraries. It has no database abstraction layer, form validation, or any other components where pre-existing third-party libraries provide common functions.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Flask - Official Website</li> <li>Flask - Official Tutorial</li> </ul>"},{"location":"programming/programming-languages/Python/libraries/web-frameworks/#pyramid","title":"Pyramid","text":"<p>Pyramid is a general, open source, web application development framework built in python. It allows python developer to create web applications with ease. Pyramid is backed by the enterprise knowledge Management System KARL (a George Soros project).</p> <p>Visit the following resources to learn more:</p> <ul> <li>Pyramid - Official Website</li> <li>Pyramid Documentation</li> <li>Pyramid Framework Introduction</li> </ul>"},{"location":"programming/programming-languages/Python/libraries/web-frameworks/#asynchronous","title":"Asynchronous","text":"<p>Asynchronous programming is a type of parallel programming in which a unit of work is allowed to run separately from the primary application thread. When the work is complete, it notifies the main thread about completion or failure of the worker thread. This style is mostly concerned with the asynchronous execution of tasks. Python has several asynchronous frameworks that are used to implement asynchronous programming.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Top 5 Asynchronous Web Frameworks for Python</li> </ul>"},{"location":"programming/programming-languages/Python/libraries/web-frameworks/#gevent","title":"gevent","text":"<p>gevent is a Python library that provides a high-level interface to the event loop. It is based on non-blocking IO (libevent/libev) and lightweight greenlets. Non-blocking IO means requests waiting for network IO won't block other requests; greenlets mean we can continue to write code in synchronous style.</p> <p>Visit the following resources to learn more:</p> <ul> <li>gevent - Official Website</li> <li>GitHub Repository</li> <li>gevent For the Working Python Developer</li> </ul>"},{"location":"programming/programming-languages/Python/libraries/web-frameworks/#aiohttp","title":"AIOHTTP","text":"<p>aiohttp is a Python 3.5+ library that provides a simple and powerful asynchronous HTTP client and server implementation.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Official Docs</li> <li>Python Asyncio, Requests, Aiohttp | Make faster API Calls</li> <li>Creating a RESTful API with Python and aiohttp</li> </ul>"},{"location":"programming/programming-languages/Python/libraries/web-frameworks/#tornado","title":"Tornado","text":"<p>Tornado is a scalable, non-blocking web server and web application framework written in Python. It was developed for use by FriendFeed; the company was acquired by Facebook in 2009 and Tornado was open-sourced soon after.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Tornado - Official Website</li> <li>A Step-by-Step Tutorial on Python Tornado</li> <li>Tornado Python Framework</li> </ul>"},{"location":"programming/programming-languages/Python/libraries/web-frameworks/#sanic","title":"Sanic","text":"<p>Sanic is a Python 3.7+ web server and web framework that's written to go fast. It allows the usage of the async/await syntax added in Python 3.5, which makes your code non-blocking and speedy.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Sanic Official Website</li> <li>Introduction to Sanic Web Framework \u2013 Python</li> </ul>"},{"location":"programming/programming-languages/Python/package-managers/","title":"Package Managers","text":"<p>Package managers allow you to manage the dependencies (external code written by you or someone else) that your project needs to work correctly.</p> <p><code>PyPI</code> and <code>Pip</code> are the most common contenders but here are some other options available as well:</p> <ul> <li>Poetry : Manages dependencies via isolation</li> <li>PIPX : Isolation-based app deployment, so you don't have to affect the system or user PIP libraries. It enables you to try individual python CLI tools without affecting other dependencies.</li> </ul>"},{"location":"programming/programming-languages/Python/package-managers/#pypi","title":"PyPI","text":"<p>PyPI, typically pronounced pie-pee-eye, is a repository containing several hundred thousand packages. These range from trivial Hello, World implementations to advanced deep learning libraries.</p> <p>Visit the following resources to learn more:</p> <ul> <li>PyPI Official Website</li> <li>Getting Started with Pip and PyPI in Python</li> <li>How to Publish an Open-Source Python Package to PyPI</li> </ul>"},{"location":"programming/programming-languages/Python/package-managers/#pip","title":"pip","text":"<p>The standard package manager for Python is pip. It allows you to install and manage packages that aren't part of the Python standard library.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Using Pythons pip to Manage Your Projects Dependencies</li> <li> <p>Python PIP Introduction</p> </li> <li> <p><code>pip search [pkgname]</code> search for a package</p> </li> <li><code>pip install [pkgname]</code> install a package</li> <li><code>pip show [pkgname]</code> show details about package</li> <li><code>pip uninstall [pkgname]</code> uninstall particular package</li> <li><code>pip list</code> show installed packages</li> <li><code>pip list --outdated</code> show outdated packages</li> <li><code>pip freeze [pkgname]</code> freeze particular package at current version</li> </ul>"},{"location":"programming/programming-languages/Python/package-managers/#how-to-install","title":"How to install","text":"<ul> <li>interpreter - <code>python2</code> <code>python3</code><ul> <li><code>sudo apt install python3</code></li> <li><code>sudo apt install python2</code></li> </ul> </li> <li>packages - <code>pip</code><ul> <li><code>sudo apt install pip3</code></li> <li><code>sudo apt install pip</code></li> </ul> </li> <li>virtual environments<ul> <li><code>conda</code></li> <li><code>venv</code></li> </ul> </li> </ul>"},{"location":"programming/programming-languages/Python/package-managers/#where-are-packages-installed","title":"Where are packages installed","text":"<ul> <li>the versions of the packages you install from the system package manager   and that you install for the <code>pip</code> will differ<ul> <li>System package manager packages will also be used by other programs   distribution packages are in - <code>/usr/lib/python3/dist-packages</code></li> <li>other packages will be in - <code>~/.local/lib/site-packages</code></li> </ul> </li> <li>install the packages with <code>pip</code> in the user directory<ul> <li><code>pip install pkgname --user</code></li> </ul> </li> </ul>"},{"location":"programming/programming-languages/Python/package-managers/#conda","title":"Conda","text":"<p>Conda is an open source package management system and environment management system that runs on Windows, macOS, and Linux. Conda quickly installs, runs and updates packages and their dependencies. Conda easily creates, saves, loads and switches between environments on your local computer. It was created for Python programs, but it can package and distribute software for any language.</p> <p>Conda as a package manager helps you find and install packages. If you need a package that requires a different version of Python, you do not need to switch to a different environment manager, because conda is also an environment manager. With just a few commands, you can set up a totally separate environment to run that different version of Python, while continuing to run your usual version of Python in your normal environment.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Conda Docs</li> </ul> <p>Conda is an open-source, cross-platform, language-agnostic package manager and environment management system. Conda is a cli tool to manage different virtual environments, it is a python package.</p> <ul> <li>Miniconda is python + conda installed</li> <li>Anaconda is python + conda + anaconda metapackage installed</li> <li>anaconda metapackage contains many packages which are used in data science</li> <li>anaconda navigator is gui frontend to manage packages using conda</li> <li>conda gets it's packages from channels</li> <li>you can choose the channels, and the default one is the anaconda one</li> </ul>"},{"location":"programming/programming-languages/Python/package-managers/#getting-started","title":"Getting Started","text":"<ul> <li><code>conda info</code> : Verify Conda is installed, check version number</li> <li><code>conda update -n base conda</code> : Update Conda to the current version</li> <li><code>conda update anaconda</code> : Update all packages to the latest version of Anaconda.</li> <li><code>conda -v</code> : see current conda version</li> <li><code>conda update conda</code> : update conda</li> </ul>"},{"location":"programming/programming-languages/Python/package-managers/#working-with-environments","title":"Working with Environments","text":"<ul> <li><code>conda create --name ENVNAME python=3.6 \"PKG1&gt;7.6\" PKG2</code> : Create a new environment named ENVNAME with specific version of Python and packages installed.</li> <li><code>conda info -e</code> : List the environments available</li> <li><code>conda activate ENVNAME</code> : Activate a named Conda environment</li> <li><code>conda activate /path/to/environment-dir</code> : Activate a Conda environment at a particular location on disk</li> <li><code>conda deactivate</code> : Deactivate current environment</li> <li><code>conda list</code> : List all packages and versions in the active environment</li> <li><code>conda list --name ENVNAME</code> : List all packages and versions in a named environment</li> <li><code>conda list --revisions</code> : List all revisions made within the active environment</li> <li><code>conda list --name ENVNAME --revisions</code> : List all revisions made in a specified environment</li> <li><code>conda install --name ENVNAME --revision REV_NUMBER</code> : Restore an environment to a previous revision</li> <li> <p><code>conda remove --name ENVNAME --all</code> : Delete an entire environment</p> </li> <li> <p><code>conda search \"^python$\"</code> : list the available version of python available locally</p> </li> <li><code>conda install pip</code> :   install pip in currently active environment</li> </ul>"},{"location":"programming/programming-languages/Python/package-managers/#jupyter-notebook","title":"Jupyter Notebook","text":"<ul> <li><code>python -m ipykernel install --user --name=shivanshu</code> : install the ipykernel so that the environment can run the jupyter notebook</li> </ul>"},{"location":"programming/programming-languages/Python/summary/advance/","title":"Advance Python","text":""},{"location":"programming/programming-languages/Python/summary/advance/#regular-expressions","title":"Regular Expressions","text":"<p>A regular expression is a sequence of characters that specifies a search pattern in text. Usually such patterns are used by string-searching algorithms for \"find\" or \"find and replace\" operations on strings, or for input validation.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Regular Expressions in Python</li> <li>Python Regular Expressions</li> <li>Python - Regular Expressions</li> </ul>"},{"location":"programming/programming-languages/Python/summary/advance/#decorators","title":"Decorators","text":"<p>decorator is a design pattern in Python that allows a user to add new functionality to an existing object without modifying its structure. Decorators are usually called before the definition of a function you want to decorate.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Python Decorators</li> <li>Decorators in Python</li> <li>Decorators in Python</li> </ul>"},{"location":"programming/programming-languages/Python/summary/advance/#lambdas","title":"Lambdas","text":"<p>Python Lambda Functions are anonymous function means that the function is without a name. As we already know that the def keyword is used to define a normal function in Python. Similarly, the lambda keyword is used to define an anonymous function in Python.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Python Lambda Functions</li> <li>Lambdas in Python</li> </ul>"},{"location":"programming/programming-languages/Python/summary/advance/#iterators","title":"Iterators","text":"<p>An iterator is an object that contains a countable number of values. An iterator is an object that can be iterated upon, meaning that you can traverse through all the values. Technically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods iter() and next() .</p> <p>Visit the following resources to learn more:</p> <ul> <li>Iterators in Python</li> <li>Python Iterators</li> </ul>"},{"location":"programming/programming-languages/Python/summary/advance/#list-comprehensions","title":"List Comprehensions","text":"<p>List comprehensions are a concise way to create a list using a single line of code in Python. They are a powerful tool for creating and manipulating lists, and they can be used to simplify and shorten code.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Python - List Comprehension</li> <li>Python List Comprehensions</li> </ul>"},{"location":"programming/programming-languages/Python/summary/advance/#generator-compressions","title":"Generator Compressions","text":"<p>Generator comprehensions are a concise way to create a generator using a single line of code in Python. They are similar to list comprehensions, but instead of creating a list, they create a generator object that produces the values on-demand, as they are needed.</p> <p>Generator comprehensions are a useful tool for creating generators that generate a large sequence of values, as they allow you to create the generator without creating the entire sequence in memory at once. This can be more efficient and use less memory, especially for large sequences.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Python Generator Expressions</li> <li>List Comprehensions in Python and Generator Expressions</li> <li>Python | Generator Expressions</li> </ul>"},{"location":"programming/programming-languages/Python/summary/advance/#python-paradigms","title":"Python Paradigms","text":"<p>Python is a multi-paradigm programming language, which means that it supports several programming paradigms. Some of the main paradigms supported by Python are:</p> <ul> <li>Imperative programming: This paradigm focuses on telling the computer what to do, step by step. Python supports imperative programming with features such as variables, loops, and control structures.</li> <li>Object-oriented programming (OOP): This paradigm is based on the idea of objects and their interactions. Python supports OOP with features such as classes, inheritance, and polymorphism.</li> <li>Functional programming: This paradigm is based on the idea of functions as first-class citizens, and it emphasizes the use of pure functions and immutable data. Python supports functional programming with features such as higher-order functions, lambda expressions, and generators.</li> <li>Aspect-oriented programming: This paradigm is based on the idea of separating cross-cutting concerns from the main functionality of a program. Python does not have built-in support for aspect-oriented programming, but it can be achieved using libraries or language extensions.</li> </ul> <p>Python's support for multiple paradigms makes it a versatile and flexible language, and it allows developers to choose the paradigm that best fits their needs.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Programming Paradigms in Python</li> </ul>"},{"location":"programming/programming-languages/Python/summary/advance/#oop","title":"OOP","text":"<p>In Python, object-oriented Programming (OOPs) is a programming paradigm that uses objects and classes in programming. It aims to implement real-world entities like inheritance, polymorphisms, encapsulation, etc. in the programming. The main concept of OOPs is to bind the data and the functions that work on that together as a single unit so that no other part of the code can access this data.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Object Oriented Programming in Python</li> <li>Python OOP Concepts</li> <li>Object Oriented Programming (OOP) In Python - Beginner Crash Course</li> <li>OOP in Python One Shot</li> </ul>"},{"location":"programming/programming-languages/Python/summary/advance/#methods-and-dunder","title":"Methods and Dunder","text":"<p>A method in python is somewhat similar to a function, except it is associated with object/classes. Methods in python are very similar to functions except for two major differences.</p> <ul> <li>The method is implicitly used for an object for which it is called.</li> <li>The method is accessible to data that is contained within the class.</li> </ul> <p>Dunder or magic methods in Python are the methods having two prefix and suffix underscores in the method name. Dunder here means \u201cDouble Under (Underscores)\u201d. These are commonly used for operator overloading. Few examples for magic methods are: init, add, len, repr etc.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Method vs Function in Python</li> <li>Dunder or magic methods in Python</li> <li>Python - Magic or Dunder Methods</li> </ul>"},{"location":"programming/programming-languages/Python/summary/advance/#inheritance","title":"Inheritance","text":"<p>Inheritance allows us to define a class that inherits all the methods and properties from another class.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Python Inheritance</li> <li>Inheritance in Python</li> </ul>"},{"location":"programming/programming-languages/Python/summary/advance/#classes","title":"Classes","text":"<p>A class is a user-defined blueprint or prototype from which objects are created. Classes provide a means of bundling data and functionality together. Creating a new class creates a new type of object, allowing new instances of that type to be made. Each class instance can have attributes attached to it for maintaining its state. Class instances can also have methods (defined by their class) for modifying their state.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Classes in Python</li> <li>Python Classes and Objects</li> <li>Python Classes and Objects</li> </ul>"},{"location":"programming/programming-languages/Python/summary/advance/#modules","title":"Modules","text":"<p>Modules refer to a file containing Python statements and definitions. A file containing Python code, for example: <code>example.py</code>, is called a module, and its module name would be example. We use modules to break down large programs into small manageable and organized files. Furthermore, modules provide reusability of code.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Python Modules</li> <li>Python Modules - Geeks for Geeks</li> <li>Modules in Python</li> </ul>"},{"location":"programming/programming-languages/Python/summary/advance/#builtin-modules","title":"Builtin Modules","text":"<p>Python interpreter has a number of built-in functions. They are always available for use in every interpreter session. Many of them have been discussed in previously. For example <code>print()</code> and <code>input()</code> for I/O, number conversion functions (<code>int()</code>, <code>float()</code>, <code>complex()</code>), data type conversions (<code>list()</code>, <code>tuple()</code>, <code>set()</code>) etc.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Python Modules</li> <li>Python - Built-In Modules</li> </ul>"},{"location":"programming/programming-languages/Python/summary/advance/#custom-modules","title":"Custom Modules","text":"<p>Modules refer to a file containing Python statements and definitions. A file containing Python code, for example: <code>example.py</code>, is called a module, and its module name would be example. We use modules to break down large programs into small manageable and organized files. Furthermore, modules provide reusability of code.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Python Modules</li> <li>Python Modules - Geeks for Geeks</li> <li>Modules in Python</li> </ul>"},{"location":"programming/programming-languages/Python/summary/basics/","title":"Python Basics","text":""},{"location":"programming/programming-languages/Python/summary/basics/#basic-syntax","title":"Basic Syntax","text":"<p>Setup the environment for python and get started with the basics.</p> <p>Visit the following resources to learn more:</p> <ul> <li>W3Schools - Python</li> <li>Python for Beginners - Learn Python in 1 Hour</li> <li>Python Basics</li> <li>Learn X in Y Minutes / Python</li> </ul>"},{"location":"programming/programming-languages/Python/summary/basics/#variables","title":"Variables","text":"<p>Variables are used to store information to be referenced and manipulated in a computer program. They also provide a way of labeling data with a descriptive name, so our programs can be understood more clearly by the reader and ourselves. It is helpful to think of variables as containers that hold information. Their sole purpose is to label and store data in memory. This data can then be used throughout your program.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Variables in Python</li> <li>W3Schools \u2014 Python Variables</li> <li>Python Variables - Geeks for Geeks</li> <li>Python Data Types</li> <li>Basic Data Types in Python</li> <li>Python for Beginners: Data Types</li> </ul>"},{"location":"programming/programming-languages/Python/summary/basics/#literals","title":"Literals","text":"<ul> <li>r prefixed string are raw, it treats <code>\\</code> as raw character</li> </ul> <pre><code>s = r'c:\\path'\n</code></pre>"},{"location":"programming/programming-languages/Python/summary/basics/#conditionals","title":"Conditionals","text":"<p>Conditional Statements in Python perform different actions depending on whether a specific condition evaluates to true or false. Conditional Statements are handled by IF-ELIF-ELSE statements and MATCH-CASE statements in Python.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Python Conditional Statements: IF\u2026Else, ELIF &amp; Switch Case</li> <li>Conditional Statements in Python</li> <li>How to use a match statement in Python</li> </ul>"},{"location":"programming/programming-languages/Python/summary/basics/#typecasting","title":"Typecasting","text":"<p>The process of converting the value of one data type (integer, string, float, etc.) to another data type is called type conversion. Python has two types of type conversion: Implicit and Explicit.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Type Conversion and Casting</li> <li>Type Casting in Python with Examples</li> <li>Python Exceptions: An Introduction</li> <li>Errors and Exceptions</li> <li>Python Exception Handling</li> <li>Python Try Except</li> </ul>"},{"location":"programming/programming-languages/Python/summary/basics/#functions","title":"Functions","text":"<p>In programming, a function is a reusable block of code that executes a certain functionality when it is called. Functions are integral parts of every programming language because they help make your code more modular and reusable.</p> <p>In Python, you define a function with the <code>def</code> keyword, then write the function identifier (name) followed by parentheses and a colon.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Python Functions \u2013 How to Define and Call a Function</li> <li>Python Functions - W3Schools</li> <li>Python Functions</li> <li>Built-in Functions in Python</li> </ul>"},{"location":"programming/programming-languages/Python/summary/basics/#lists-tuples-sets-and-dictionaries","title":"Lists, Tuples, Sets, and Dictionaries","text":"<p>Lists: are just like dynamic sized arrays, declared in other languages (vector in C++ and ArrayList in Java). Lists need not be homogeneous always which makes it the most powerful tool in Python.</p> <p>Tuple: A Tuple is a collection of Python objects separated by commas. In some ways, a tuple is similar to a list in terms of indexing, nested objects, and repetition but a tuple is immutable, unlike lists that are mutable.</p> <p>Set: A Set is an unordered collection data type that is iterable, mutable, and has no duplicate elements. Python\u2019s set class represents the mathematical notion of a set.</p> <p>Dictionary: In python, Dictionary is an ordered (since Py 3.7) [unordered (Py 3.6 &amp; prior)] collection of data values, used to store data values like a map, which, unlike other Data Types that hold only a single value as an element, Dictionary holds key:value pair. Key-value is provided in the dictionary to make it more optimized.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Difference Between List, Tuple, Set and Dictionary in Python</li> <li>Differences and Applications of List, Tuple, Set and Dictionary in Python</li> <li>Tuples vs. Lists vs. Sets in Python</li> <li>Python for Beginners: Lists</li> <li>Python for Beginners: When and How to Use Tuples</li> </ul>"},{"location":"programming/programming-languages/Python/summary/basics/#string-methods","title":"String Methods","text":"<p>Python does not have a character data type, a single character is simply a string with a length of 1. Square bracket can be used to access elements of the string. There are methods which can be used on a string to best utilize it's wide range of functionalities. Below Given resources can be utilised to learn more about them.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Practical String Methods applications</li> <li>Comprehensive Study of String methods</li> <li>String Slicing in Python# Python</li> </ul> <p>Python is a high-level, interpreted, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation. Python is dynamically-typed and garbage-collected.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Official Website: Python</li> <li>Tutorial Series: How to Code in Python</li> <li>Python Wikipedia</li> <li>Googles Python Class</li> <li>W3Schools - Python Tutorial</li> </ul>"},{"location":"programming/programming-languages/Python/summary/data-structures/","title":"Design and Analysis of Algorithms","text":"<ul> <li>how to use python given data structures and make your own?</li> <li>https://www.geeksforgeeks.org/python-data-structures/</li> </ul>"},{"location":"programming/programming-languages/Python/summary/data-structures/#basic-data-structures","title":"Basic Data Structures","text":"<ul> <li>arrays</li> <li>map</li> <li>hash map</li> <li>stack</li> <li>queue</li> <li>set</li> <li>dictionary</li> </ul>"},{"location":"programming/programming-languages/Python/summary/data-structures/#python-and-standard-template-library-of-c","title":"python and standard template library of C++","text":"<p>What should you replace the stl version of C++ in python with:</p> <ul> <li>vector - <code>list</code></li> <li>array - <code>list</code></li> <li>stack - <code>list</code></li> <li>unordered_map - <code>dict</code></li> <li>unordered_set - <code>set</code></li> <li>queue, dequeue - <code>collections.deque</code></li> <li> <p>priority_queue - <code>heapq</code></p> </li> <li> <p>map - no alternative</p> </li> <li>set - no alternative</li> </ul>"},{"location":"programming/programming-languages/Python/summary/data-structures/#function-lookup","title":"Function lookup","text":"<pre><code>import datetime\ns_timer = datetime.datetime.now()\n\nl = [str(i) for i in range(1, 10000000)]\nfor i in l: \n    len(i)\n\ne_timer = datetime.datetime.now()\nprint((e_timer - s_timer).total_seconds())\n</code></pre> <p>But if we do lookup once and use it again and again it is faster.</p> <pre><code>s_timer = datetime.datetime.now()\n\nfn = len\nl = [str(i) for i in range(1, 10000000)]\nfor i in l:\n    fn(i)\n\ne_timer = datetime.datetime.now()\nprint((e_timer - s_timer).total_seconds())\n</code></pre>"},{"location":"programming/programming-languages/Python/summary/data-structures/#lists","title":"lists","text":"<pre><code>l = [1,2,3,4,5,\"hello\"]\nprint(l)\n</code></pre>"},{"location":"programming/programming-languages/Python/summary/data-structures/#dictionary","title":"dictionary","text":"<pre><code>dict = { \"name\": 'hi', \"class\": 10}\n</code></pre>"},{"location":"programming/programming-languages/Python/summary/data-structures/#tuple","title":"tuple","text":"<pre><code>t = (1,2,3,4)\n</code></pre>"},{"location":"programming/programming-languages/Python/summary/data-structures/#set","title":"set","text":"<pre><code>s = {1,2,3,4}\n</code></pre>"},{"location":"programming/programming-languages/Python/summary/data-structures/#frozen-set-immutable","title":"frozen set (immutable)","text":"<pre><code>s = frozenset([1,2,3,3])\n</code></pre>"},{"location":"programming/programming-languages/Python/summary/data-structures/#strings-immutable","title":"strings (immutable)","text":"<pre><code>s = \"hi i am dog\"\ns[0] = \"b\" # will give error\nprint(s)\n</code></pre>"},{"location":"programming/programming-languages/Python/summary/data-structures/#byte-array","title":"byte array","text":"<pre><code>a = bytearray(\"hel\", \"utf-16\")\nprint(a)\n</code></pre> <pre><code>a = bytearray(b'abcdefABCDEF')\nfor i in a:\n    print(i)\n</code></pre>"},{"location":"programming/programming-languages/Python/summary/data-structures/#collections","title":"collections","text":""},{"location":"programming/programming-languages/Python/summary/data-structures/#counter","title":"counter","text":"<pre><code>from collections import Counter\ncounter = Counter([1,2,3,4,5,1,2,3,4,5])\ncounter\n</code></pre>"},{"location":"programming/programming-languages/Python/summary/data-structures/#ordered-dict","title":"ordered dict","text":"<ul> <li>remember the order in which keys were inserted, doubly linked list</li> </ul> <pre><code>from collections import OrderedDict\no = OrderedDict()\no[1] = 100\no[10] = 100\no[2] = 1\n\nfor key,value in o.items():\n    print(key, \" \", value)\n</code></pre>"},{"location":"programming/programming-languages/Python/summary/data-structures/#defaultdict","title":"defaultdict","text":"<ul> <li>give the default initial value</li> </ul> <pre><code>from collections import defaultdict\nd = defaultdict(int)\nl = [1,2,3,4,5,5]\nfor i in l:\n    d[i] += 1\nprint(d)\n</code></pre>"},{"location":"programming/programming-languages/Python/summary/ds-algo/","title":"Python Data Structures and Algorithms","text":""},{"location":"programming/programming-languages/Python/summary/ds-algo/#arrays-and-linked-lists","title":"Arrays and Linked lists","text":"<p>Arrays store elements in contiguous memory locations, resulting in easily calculable addresses for the elements stored and this allows faster access to an element at a specific index. Linked lists are less rigid in their storage structure and elements are usually not stored in contiguous locations, hence they need to be stored with additional tags giving a reference to the next element. This difference in the data storage scheme decides which data structure would be more suitable for a given situation.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Linked Lists vs Arrays</li> <li>Python Array Tutorial</li> <li>Python Arrays</li> <li>Arrays in Python</li> <li>Array Data Structure | Illustrated Data Structures</li> <li>Linked List Data Structure | Illustrated Data Structures</li> </ul>"},{"location":"programming/programming-languages/Python/summary/ds-algo/#heaps-stacks-and-queues","title":"Heaps Stacks and Queues","text":"<p>Stacks: Operations are performed LIFO (last in, first out), which means that the last element added will be the first one removed. A stack can be implemented using an array or a linked list. If the stack runs out of memory, it\u2019s called a stack overflow.</p> <p>Queue: Operations are performed FIFO (first in, first out), which means that the first element added will be the first one removed. A queue can be implemented using an array.</p> <p>Heap: A tree-based data structure in which the value of a parent node is ordered in a certain way with respect to the value of its child node(s). A heap can be either a min heap (the value of a parent node is less than or equal to the value of its children) or a max heap (the value of a parent node is greater than or equal to the value of its children).</p> <p>Visit the following resources to learn more:</p> <ul> <li>Heaps, Stacks, Queues</li> <li>Stack Data Structure | Illustrated Data Structures</li> <li>Queue Data Structure | Illustrated Data Structures</li> <li>Stack in Python</li> <li>How to Implement Python Stack?</li> <li>Queue in Python</li> <li>Python Stacks, Queues, and Priority Queues in Practice</li> <li>Heap Implementation in Python</li> </ul>"},{"location":"programming/programming-languages/Python/summary/ds-algo/#hash-tables","title":"Hash Tables","text":"<p>Hash Table, Map, HashMap, Dictionary or Associative are all the names of the same data structure. It is a data structure that implements a set abstract data type, a structure that can map keys to values.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Hash Table Data Structure | Illustrated Data Structures</li> <li>Hash Tables and Hashmaps in Python</li> <li>Build a Hash Table in Python</li> </ul>"},{"location":"programming/programming-languages/Python/summary/ds-algo/#binary-search-trees","title":"Binary Search Trees","text":"<p>A binary search tree, also called an ordered or sorted binary tree, is a rooted binary tree data structure with the key of each internal node being greater than all the keys in the respective node's left subtree and less than the ones in its right subtree</p> <p>Visit the following resources to learn more:</p> <ul> <li>Tree Data Structure | Illustrated Data Structures</li> <li>How to Implement Binary Search Tree in Python</li> <li>Problem Set</li> </ul>"},{"location":"programming/programming-languages/Python/summary/ds-algo/#recursion","title":"Recursion","text":"<p>Recursion is a method of solving a computational problem where the solution depends on solutions to smaller instances of the same problem. Recursion solves such recursive problems by using functions that call themselves from within their own code.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Recursion in Python</li> <li>Recursion in Python: An Introduction</li> </ul>"},{"location":"programming/programming-languages/Python/summary/ds-algo/#sorting-algorithms","title":"Sorting Algorithms","text":"<p>Sorting refers to arranging data in a particular format. Sorting algorithm specifies the way to arrange data in a particular order. Most common orders are in numerical or lexicographical order.</p> <p>The importance of sorting lies in the fact that data searching can be optimized to a very high level, if data is stored in a sorted manner.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Sorting Algorithms in Python</li> <li>Python - Sorting Algorithms</li> </ul>"},{"location":"programming/programming-languages/Python/summary/ds-algo/#data-structures-and-algorithms","title":"Data Structures and Algorithms","text":"<p>A data structure is a named location that can be used to store and organize data. And, an algorithm is a collection of steps to solve a particular problem. Learning data structures and algorithms allow us to write efficient and optimized computer programs.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Learn DS &amp; Algorithms</li> <li>Data Structures Illustrated</li> </ul>"},{"location":"programming/programming-languages/Python/summary/virtual-environment/","title":"Virual Environment","text":""},{"location":"programming/programming-languages/Python/summary/virtual-environment/#venv","title":"<code>venv</code>","text":"<ul> <li> <p>https://docs.python.org/3/library/venv.html</p> </li> <li> <p>Create</p> <ul> <li><code>python -m venv /path/to/new/virtual/environment</code></li> <li><code>pyvenv.cfg</code> will be created<ul> <li><code>include-system-site-packages</code> will be set to true if system packages are to be used</li> </ul> </li> </ul> </li> <li>Activate<ul> <li>bash/zsh <code>$ source &lt;venv&gt;/bin/activate</code></li> <li>fish <code>$ source &lt;venv&gt;/bin/activate.fish</code></li> <li>csh/tcsh <code>$ source &lt;venv&gt;/bin/activate.csh</code></li> <li>PowerShell <code>$ &lt;venv&gt;/bin/Activate.ps1</code></li> <li>cmd.exe <code>C:\\&gt; &lt;venv&gt;\\Scripts\\activate.bat</code>, windows</li> <li>PowerShell <code>PS C:\\&gt; &lt;venv&gt;\\Scripts\\Activate.ps1</code>, windows</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/Python/summary/virtual-environment/#conda","title":"<code>conda</code>","text":"<ul> <li>in conda you can also set the python version</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/ds-algo/","title":"Data Structures","text":""},{"location":"programming/programming-languages/Python/summary/standard-library/ds-algo/#lists","title":"Lists","text":"<pre><code>a = [1,2,3,4,5]\n</code></pre> <p>Now, basic printing of the elements of list</p> <pre><code>for i in a:\n    print(i)\n</code></pre> <p>Now, if you want index with it you can use enumerate</p> <pre><code>for i,item in enumerate(a):\n    print(str(i) + \":\" + str(item))\n</code></pre> <p>Now you want to reverse the list.</p> <pre><code>a[::-1]\n</code></pre> <p>The above takes \\(O(n)\\) time don't be fooled by the notation.</p> <p>Now you want to sort the list</p> <pre><code>a = [1,2,5,4,3,0]\nsorted(a)\n</code></pre> <p>This will sort the list and return it, this will not modify it, you can use the sort method of the list if you want to modify the same list.</p> <pre><code>a.sort()\na\n</code></pre>"},{"location":"programming/programming-languages/Python/summary/standard-library/ds-algo/#sorting","title":"Sorting","text":""},{"location":"programming/programming-languages/Python/summary/standard-library/ds-algo/#based-on-list-item-items","title":"Based on list item items","text":"<pre><code># here we are sorting based on the third element of the item\nval = [('first', 3, 9), ('second', 4, 6), ('third', 2, 3)]\nval.sort(key = lambda x: x[2], reverse=False)\nprint(val)\n</code></pre>"},{"location":"programming/programming-languages/Python/summary/standard-library/ds-algo/#use-list-comprehension-to-make-dictionary","title":"Use list comprehension to make dictionary","text":"<pre><code>dic = [(str(i)+\" element\", i*2) for i in range(5)]\nprint(dict(dic))\n</code></pre>"},{"location":"programming/programming-languages/Python/summary/standard-library/ds-algo/#filter-function","title":"Filter function","text":"<pre><code>print(list(filter(lambda x: x%2, range(15))))\n</code></pre>"},{"location":"programming/programming-languages/Python/summary/standard-library/ds-algo/#permutations","title":"Permutations","text":"<pre><code>import itertools\nlist(itertools.permutations('HAPPY', 2))\n</code></pre>"},{"location":"programming/programming-languages/Python/summary/standard-library/ds-algo/#list-to-string","title":"List to string","text":"<pre><code>a = [\"This\", \"is\", \"a\", \"list\" ,\"elements.\"]\nprint(\" \".join(a))\n</code></pre>"},{"location":"programming/programming-languages/Python/summary/standard-library/ds-algo/#better-comparison-operators","title":"Better Comparison Operators","text":"<pre><code>n = 16\nresult = 15 &lt; n &lt; 20\nprint(result)\n</code></pre>"},{"location":"programming/programming-languages/Python/summary/standard-library/ds-algo/#time-complexity","title":"Time Complexity","text":"<ul> <li>https://wiki.python.org/moin/TimeComplexity</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/ds-algo/#list","title":"<code>list</code>","text":"Operation Average Case Amortized Worst Case Copy \\(O(n)\\) \\(O(n)\\) Append \\(O(1)\\) \\(O(1)\\) Pop last \\(O(1)\\) \\(O(1)\\) Pop intermediate \\(O(n)\\) \\(O(n)\\) Insert \\(O(n)\\) \\(O(n)\\) Get Item \\(O(1)\\) \\(O(1)\\) Set Item \\(O(1)\\) \\(O(1)\\) Delete Item \\(O(n)\\) \\(O(n)\\) Iteration \\(O(n)\\) \\(O(n)\\) Get Slice \\(O(k)\\) \\(O(k)\\) Del Slice \\(O(n)\\) \\(O(n)\\) Set Slice \\(O(k+n)\\) \\(O(k+n)\\) Extend \\(O(k)\\) \\(O(k)\\) Sort \\(O(n \\log n)\\) \\(O(n \\log n)\\) Multiply \\(O(nk)\\) \\(O(nk)\\) x in s \\(O(n)\\) min(s), max(s) \\(O(n)\\) Get Length \\(O(1)\\) \\(O(1)\\)"},{"location":"programming/programming-languages/Python/summary/standard-library/ds-algo/#collectionsdeque","title":"<code>collections.deque</code>","text":"Operation Average Case Amortized Worst Case Copy \\(O(n)\\) \\(O(n)\\) append \\(O(1)\\) \\(O(1)\\) appendleft \\(O(1)\\) \\(O(1)\\) pop \\(O(1)\\) \\(O(1)\\) popleft \\(O(1)\\) \\(O(1)\\) extend \\(O(k)\\) \\(O(k)\\) extendleft \\(O(k)\\) \\(O(k)\\) rotate \\(O(k)\\) \\(O(k)\\) remove \\(O(n)\\) \\(O(n)\\)"},{"location":"programming/programming-languages/Python/summary/standard-library/json/","title":"json","text":"<ul> <li>load a json file as data type</li> </ul> <pre><code>json.load(open(\"file.json\", \"r+\"))\n</code></pre>"},{"location":"programming/programming-languages/Python/summary/standard-library/os/","title":"os module","text":"<ul> <li>check if a path is already present</li> </ul> <pre><code>path = 'path name'\nos.path.isdir(path)\n</code></pre> <ul> <li>check if a file is already present</li> </ul> <pre><code>path = 'your file path'\nos.path.isfile(path)\n</code></pre> <ul> <li>recurse over the folders in a dir</li> </ul> <pre><code>folder_path = 'your folder'\nfor fldr in os.listdir(folder_path):\n    sub_folder_path = os.path.join(folder_path, fldr)\n    os.listdir(sub_folder_path) # items inside the sub folder\n</code></pre> <ul> <li>rename or move a file</li> </ul> <pre><code>os.rename(source, destination)\nos.replace(source, destination)\n</code></pre> <ul> <li>remove empty directories</li> </ul> <pre><code># removing empty folders\nroot = 'your folder'\nfolders = list(os.walk(root))\n# folder contains of tuples, \n# ([dir_name], [subdirectories], [files list])\nfor folder in folders:\n    if not folder[2] and not folder[1]:\n        os.rmdir(folder[0])\n</code></pre>"},{"location":"programming/programming-languages/Python/summary/standard-library/re/","title":"re","text":"<ul> <li>regex library</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/","title":"Python 3 Standard Library","text":"<ul> <li>https://docs.python.org/3/library/</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#introduction","title":"Introduction","text":"<ul> <li>Notes on availability</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#built-in-functions","title":"Built-in Functions","text":""},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#built-in-constants","title":"Built-in Constants","text":"<ul> <li>Constants added by the <code>site</code> module</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#built-in-types","title":"Built-in Types","text":"<ul> <li>Truth Value Testing</li> <li>Boolean Operations --- <code>and</code>, <code>or</code>, <code>not</code></li> <li>Comparisons</li> <li>Numeric Types --- <code>int</code>, <code>float</code>, <code>complex</code></li> <li>Iterator Types</li> <li>Sequence Types --- <code>list</code>, <code>tuple</code>, <code>range</code></li> <li>Text Sequence Type --- <code>str</code></li> <li>Binary Sequence Types --- <code>bytes</code>, <code>bytearray</code>, <code>memoryview</code></li> <li>Set Types --- <code>set</code>, <code>frozenset</code></li> <li>Mapping Types --- <code>dict</code></li> <li>Context Manager Types</li> <li>Type Annotation Types --- Generic Alias, Union</li> <li>Other Built-in Types</li> <li>Special Attributes</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#built-in-exceptions","title":"Built-in Exceptions","text":"<ul> <li>Exception context</li> <li>Inheriting from built-in exceptions</li> <li>Base classes</li> <li>Concrete exceptions</li> <li>Warnings</li> <li>Exception hierarchy</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#text-processing-services","title":"Text Processing Services","text":"<ul> <li><code>string</code> --- Common string operations</li> <li><code>re</code> --- Regular expression operations</li> <li><code>difflib</code> --- Helpers for computing deltas</li> <li><code>textwrap</code> --- Text wrapping and filling</li> <li><code>unicodedata</code> --- Unicode Database</li> <li><code>stringprep</code> --- Internet String Preparation</li> <li><code>readline</code> --- GNU readline interface</li> <li><code>rlcompleter</code> --- Completion function for GNU readline</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#binary-data-services","title":"Binary Data Services","text":"<ul> <li><code>struct</code> --- Interpret bytes as packed binary data</li> <li><code>codecs</code> --- Codec registry and base classes</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#data-types","title":"Data Types","text":"<ul> <li><code>datetime</code> --- Basic date and time types</li> <li><code>zoneinfo</code> --- IANA time zone support</li> <li><code>calendar</code> --- General calendar-related functions</li> <li><code>collections</code> --- Container datatypes</li> <li><code>collections.abc</code> --- Abstract Base Classes for Containers</li> <li><code>heapq</code> --- Heap queue algorithm</li> <li><code>bisect</code> --- Array bisection algorithm</li> <li><code>array</code> --- Efficient arrays of numeric values</li> <li><code>weakref</code> --- Weak references</li> <li><code>types</code> --- Dynamic type creation and names for built-in types</li> <li><code>copy</code> --- Shallow and deep copy operations</li> <li><code>pprint</code> --- Data pretty printer</li> <li><code>reprlib</code> --- Alternate <code>repr()</code> implementation</li> <li><code>enum</code> --- Support for enumerations</li> <li><code>graphlib</code> --- Functionality to operate with graph-like structures</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#numeric-and-mathematical-modules","title":"Numeric and Mathematical Modules","text":"<ul> <li><code>numbers</code> --- Numeric abstract base classes</li> <li><code>math</code> --- Mathematical functions</li> <li><code>cmath</code> --- Mathematical functions for complex numbers</li> <li><code>decimal</code> --- Decimal fixed point and floating point arithmetic</li> <li><code>fractions</code> --- Rational numbers</li> <li><code>random</code> --- Generate pseudo-random numbers</li> <li><code>statistics</code> --- Mathematical statistics functions</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#functional-programming-modules","title":"Functional Programming Modules","text":"<ul> <li><code>itertools</code> --- Functions creating iterators for efficient looping</li> <li><code>functools</code> --- Higher-order functions and operations on callable objects</li> <li><code>operator</code> --- Standard operators as functions</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#file-and-directory-access","title":"File and Directory Access","text":"<ul> <li><code>pathlib</code> --- Object-oriented filesystem paths</li> <li><code>os.path</code> --- Common pathname manipulations</li> <li><code>fileinput</code> --- Iterate over lines from multiple input streams</li> <li><code>stat</code> --- Interpreting <code>stat()</code> results</li> <li><code>filecmp</code> --- File and Directory Comparisons</li> <li><code>tempfile</code> --- Generate temporary files and directories</li> <li><code>glob</code> --- Unix style pathname pattern expansion</li> <li><code>fnmatch</code> --- Unix filename pattern matching</li> <li><code>linecache</code> --- Random access to text lines</li> <li><code>shutil</code> --- High-level file operations</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#data-persistence","title":"Data Persistence","text":"<ul> <li><code>pickle</code> --- Python object serialization</li> <li><code>copyreg</code> --- Register <code>pickle</code> support functions</li> <li><code>shelve</code> --- Python object persistence</li> <li><code>marshal</code> --- Internal Python object serialization</li> <li><code>dbm</code> --- Interfaces to Unix \"databases\"</li> <li><code>sqlite3</code> --- DB-API 2.0 interface for SQLite databases</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#data-compression-and-archiving","title":"Data Compression and Archiving","text":"<ul> <li><code>zlib</code> --- Compression compatible with gzip</li> <li><code>gzip</code> --- Support for gzip files</li> <li><code>bz2</code> --- Support for bzip2 compression</li> <li><code>lzma</code> --- Compression using the LZMA algorithm</li> <li><code>zipfile</code> --- Work with ZIP archives</li> <li><code>tarfile</code> --- Read and write tar archive files</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#file-formats","title":"File Formats","text":"<ul> <li><code>csv</code> --- CSV File Reading and Writing</li> <li><code>configparser</code> --- Configuration file parser</li> <li><code>netrc</code> --- netrc file processing</li> <li><code>plistlib</code> --- Generate and parse Apple <code>.plist</code> files</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#cryptographic-services","title":"Cryptographic Services","text":"<ul> <li><code>hashlib</code> --- Secure hashes and message digests</li> <li><code>hmac</code> --- Keyed-Hashing for Message Authentication</li> <li><code>secrets</code> --- Generate secure random numbers for managing secrets</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#generic-operating-system-services","title":"Generic Operating System Services","text":"<ul> <li><code>os</code> --- Miscellaneous operating system interfaces</li> <li><code>io</code> --- Core tools for working with streams</li> <li><code>time</code> --- Time access and conversions</li> <li><code>argparse</code> --- Parser for command-line options, arguments and sub-commands</li> <li><code>getopt</code> --- C-style parser for command line options</li> <li><code>logging</code> --- Logging facility for Python</li> <li><code>logging.config</code> --- Logging configuration</li> <li><code>logging.handlers</code> --- Logging handlers</li> <li><code>getpass</code> --- Portable password input</li> <li><code>curses</code> --- Terminal handling for character-cell displays</li> <li><code>curses.textpad</code> --- Text input widget for curses programs</li> <li><code>curses.ascii</code> --- Utilities for ASCII characters</li> <li><code>curses.panel</code> --- A panel stack extension for curses</li> <li><code>platform</code> --- Access to underlying platform's identifying data</li> <li><code>errno</code> --- Standard errno system symbols</li> <li><code>ctypes</code> --- A foreign function library for Python</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#concurrent-execution","title":"Concurrent Execution","text":"<ul> <li><code>threading</code> --- Thread-based parallelism</li> <li><code>multiprocessing</code> --- Process-based parallelism</li> <li><code>multiprocessing.shared_memory</code> --- Shared memory for direct access across processes</li> <li>The <code>concurrent</code> package</li> <li><code>concurrent.futures</code> --- Launching parallel tasks</li> <li><code>subprocess</code> --- Subprocess management</li> <li><code>sched</code> --- Event scheduler</li> <li><code>queue</code> --- A synchronized queue class</li> <li><code>contextvars</code> --- Context Variables</li> <li><code>_thread</code> --- Low-level threading API</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#networking-and-interprocess-communication","title":"Networking and Interprocess Communication","text":"<ul> <li><code>asyncio</code> --- Asynchronous I/O</li> <li><code>socket</code> --- Low-level networking interface</li> <li><code>ssl</code> --- TLS/SSL wrapper for socket objects</li> <li><code>select</code> --- Waiting for I/O completion</li> <li><code>selectors</code> --- High-level I/O multiplexing</li> <li><code>signal</code> --- Set handlers for asynchronous events</li> <li><code>mmap</code> --- Memory-mapped file support</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#internet-data-handling","title":"Internet Data Handling","text":"<ul> <li><code>email</code> --- An email and MIME handling package</li> <li><code>json</code> --- JSON encoder and decoder</li> <li><code>mailbox</code> --- Manipulate mailboxes in various formats</li> <li><code>mimetypes</code> --- Map filenames to MIME types</li> <li><code>base64</code> --- Base16, Base32, Base64, Base85 Data Encodings</li> <li><code>binhex</code> --- Encode and decode binhex4 files</li> <li><code>binascii</code> --- Convert between binary and ASCII</li> <li><code>quopri</code> --- Encode and decode MIME quoted-printable data</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#structured-markup-processing-tools","title":"Structured Markup Processing Tools","text":"<ul> <li><code>html</code> --- HyperText Markup Language support</li> <li><code>html.parser</code> --- Simple HTML and XHTML parser</li> <li><code>html.entities</code> --- Definitions of HTML general entities</li> <li>XML Processing Modules</li> <li><code>xml.etree.ElementTree</code> --- The ElementTree XML API</li> <li><code>xml.dom</code> --- The Document Object Model API</li> <li><code>xml.dom.minidom</code> --- Minimal DOM implementation</li> <li><code>xml.dom.pulldom</code> --- Support for building partial DOM trees</li> <li><code>xml.sax</code> --- Support for SAX2 parsers</li> <li><code>xml.sax.handler</code> --- Base classes for SAX handlers</li> <li><code>xml.sax.saxutils</code> --- SAX Utilities</li> <li><code>xml.sax.xmlreader</code> --- Interface for XML parsers</li> <li><code>xml.parsers.expat</code> --- Fast XML parsing using Expat</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#internet-protocols-and-support","title":"Internet Protocols and Support","text":"<ul> <li><code>webbrowser</code> --- Convenient web-browser controller</li> <li><code>wsgiref</code> --- WSGI Utilities and Reference Implementation</li> <li><code>urllib</code> --- URL handling modules</li> <li><code>urllib.request</code> --- Extensible library for opening URLs</li> <li><code>urllib.response</code> --- Response classes used by urllib</li> <li><code>urllib.parse</code> --- Parse URLs into components</li> <li><code>urllib.error</code> --- Exception classes raised by urllib.request</li> <li><code>urllib.robotparser</code> --- Parser for robots.txt</li> <li><code>http</code> --- HTTP modules</li> <li><code>http.client</code> --- HTTP protocol client</li> <li><code>ftplib</code> --- FTP protocol client</li> <li><code>poplib</code> --- POP3 protocol client</li> <li><code>imaplib</code> --- IMAP4 protocol client</li> <li><code>smtplib</code> --- SMTP protocol client</li> <li><code>uuid</code> --- UUID objects according to RFC 4122</li> <li><code>socketserver</code> --- A framework for network servers</li> <li><code>http.server</code> --- HTTP servers</li> <li><code>http.cookies</code> --- HTTP state management</li> <li><code>http.cookiejar</code> --- Cookie handling for HTTP clients</li> <li><code>xmlrpc</code> --- XMLRPC server and client modules</li> <li><code>xmlrpc.client</code> --- XML-RPC client access</li> <li><code>xmlrpc.server</code> --- Basic XML-RPC servers</li> <li><code>ipaddress</code> --- IPv4/IPv6 manipulation library</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#multimedia-services","title":"Multimedia Services","text":"<ul> <li><code>wave</code> --- Read and write WAV files</li> <li><code>colorsys</code> --- Conversions between color systems</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#internationalization","title":"Internationalization","text":"<ul> <li><code>gettext</code> --- Multilingual internationalization services</li> <li><code>locale</code> --- Internationalization services</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#program-frameworks","title":"Program Frameworks","text":"<ul> <li><code>turtle</code> --- Turtle graphics</li> <li><code>cmd</code> --- Support for line-oriented command interpreters</li> <li><code>shlex</code> --- Simple lexical analysis</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#graphical-user-interfaces-with-tk","title":"Graphical User Interfaces with Tk","text":"<ul> <li><code>tkinter</code> --- Python interface to Tcl/Tk</li> <li><code>tkinter.colorchooser</code> --- Color choosing dialog</li> <li><code>tkinter.font</code> --- Tkinter font wrapper</li> <li>Tkinter Dialogs</li> <li><code>tkinter.messagebox</code> --- Tkinter message prompts</li> <li><code>tkinter.scrolledtext</code> --- Scrolled Text Widget</li> <li><code>tkinter.dnd</code> --- Drag and drop support</li> <li><code>tkinter.ttk</code> --- Tk themed widgets</li> <li><code>tkinter.tix</code> --- Extension widgets for Tk</li> <li>IDLE</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#development-tools","title":"Development Tools","text":"<ul> <li><code>typing</code> --- Support for type hints</li> <li><code>pydoc</code> --- Documentation generator and online help system</li> <li>Python Development Mode</li> <li>Effects of the Python Development Mode</li> <li>ResourceWarning Example</li> <li>Bad file descriptor error example</li> <li><code>doctest</code> --- Test interactive Python examples</li> <li><code>unittest</code> --- Unit testing framework</li> <li><code>unittest.mock</code> --- mock object library</li> <li><code>unittest.mock</code> --- getting started</li> <li>2to3 --- Automated Python 2 to 3 code translation</li> <li><code>test</code> --- Regression tests package for Python</li> <li><code>test.support</code> --- Utilities for the Python test suite</li> <li><code>test.support.socket_helper</code> --- Utilities for socket tests</li> <li><code>test.support.script_helper</code> --- Utilities for the Python execution tests</li> <li><code>test.support.bytecode_helper</code> --- Support tools for testing correct bytecode generation</li> <li><code>test.support.threading_helper</code> --- Utilities for threading tests</li> <li><code>test.support.os_helper</code> --- Utilities for os tests</li> <li><code>test.support.import_helper</code> --- Utilities for import tests</li> <li><code>test.support.warnings_helper</code> --- Utilities for warnings tests</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#debugging-and-profiling","title":"Debugging and Profiling","text":"<ul> <li>Audit events table</li> <li><code>bdb</code> --- Debugger framework</li> <li><code>faulthandler</code> --- Dump the Python traceback</li> <li><code>pdb</code> --- The Python Debugger</li> <li>The Python Profilers</li> <li><code>timeit</code> --- Measure execution time of small code snippets</li> <li><code>trace</code> --- Trace or track Python statement execution</li> <li><code>tracemalloc</code> --- Trace memory allocations</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#software-packaging-and-distribution","title":"Software Packaging and Distribution","text":"<ul> <li><code>distutils</code> --- Building and installing Python modules</li> <li><code>ensurepip</code> --- Bootstrapping the <code>pip</code> installer</li> <li><code>venv</code> --- Creation of virtual environments</li> <li><code>zipapp</code> --- Manage executable Python zip archives</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#python-runtime-services","title":"Python Runtime Services","text":"<ul> <li><code>sys</code> --- System-specific parameters and functions</li> <li><code>sysconfig</code> --- Provide access to Python's configuration information</li> <li><code>builtins</code> --- Built-in objects</li> <li><code>__main__</code> --- Top-level code environment</li> <li><code>warnings</code> --- Warning control</li> <li><code>dataclasses</code> --- Data Classes</li> <li><code>contextlib</code> --- Utilities for <code>with</code>-statement contexts</li> <li><code>abc</code> --- Abstract Base Classes</li> <li><code>atexit</code> --- Exit handlers</li> <li><code>traceback</code> --- Print or retrieve a stack traceback</li> <li><code>__future__</code> --- Future statement definitions</li> <li><code>gc</code> --- Garbage Collector interface</li> <li><code>inspect</code> --- Inspect live objects</li> <li><code>site</code> --- Site-specific configuration hook</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#custom-python-interpreters","title":"Custom Python Interpreters","text":"<ul> <li><code>code</code> --- Interpreter base classes</li> <li><code>codeop</code> --- Compile Python code</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#importing-modules","title":"Importing Modules","text":"<ul> <li><code>zipimport</code> --- Import modules from Zip archives</li> <li><code>pkgutil</code> --- Package extension utility</li> <li><code>modulefinder</code> --- Find modules used by a script</li> <li><code>runpy</code> --- Locating and executing Python modules</li> <li><code>importlib</code> --- The implementation of <code>import</code></li> <li>Using <code>importlib.metadata</code></li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#python-language-services","title":"Python Language Services","text":"<ul> <li><code>ast</code> --- Abstract Syntax Trees</li> <li><code>symtable</code> --- Access to the compiler's symbol tables</li> <li><code>token</code> --- Constants used with Python parse trees</li> <li><code>keyword</code> --- Testing for Python keywords</li> <li><code>tokenize</code> --- Tokenizer for Python source</li> <li><code>tabnanny</code> --- Detection of ambiguous indentation</li> <li><code>pyclbr</code> --- Python module browser support</li> <li><code>py_compile</code> --- Compile Python source files</li> <li><code>compileall</code> --- Byte-compile Python libraries</li> <li><code>dis</code> --- Disassembler for Python bytecode</li> <li><code>pickletools</code> --- Tools for pickle developers</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#ms-windows-specific-services","title":"MS Windows Specific Services","text":"<ul> <li><code>msvcrt</code> --- Useful routines from the MS VC++ runtime</li> <li><code>winreg</code> --- Windows registry access</li> <li><code>winsound</code> --- Sound-playing interface for Windows</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#unix-specific-services","title":"Unix Specific Services","text":"<ul> <li><code>posix</code> --- The most common POSIX system calls</li> <li><code>pwd</code> --- The password database</li> <li><code>grp</code> --- The group database</li> <li><code>termios</code> --- POSIX style tty control</li> <li><code>tty</code> --- Terminal control functions</li> <li><code>pty</code> --- Pseudo-terminal utilities</li> <li><code>fcntl</code> --- The <code>fcntl</code> and <code>ioctl</code> system calls</li> <li><code>resource</code> --- Resource usage information</li> <li><code>syslog</code> --- Unix syslog library routines</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#superseded-modules","title":"Superseded Modules","text":"<ul> <li><code>aifc</code> --- Read and write AIFF and AIFC files</li> <li><code>asynchat</code> --- Asynchronous socket command/response handler</li> <li><code>asyncore</code> --- Asynchronous socket handler</li> <li><code>audioop</code> --- Manipulate raw audio data</li> <li><code>cgi</code> --- Common Gateway Interface support</li> <li><code>cgitb</code> --- Traceback manager for CGI scripts</li> <li><code>chunk</code> --- Read IFF chunked data</li> <li><code>crypt</code> --- Function to check Unix passwords</li> <li><code>imghdr</code> --- Determine the type of an image</li> <li><code>imp</code> --- Access the import internals</li> <li><code>mailcap</code> --- Mailcap file handling</li> <li><code>msilib</code> --- Read and write Microsoft Installer files</li> <li><code>nis</code> --- Interface to Sun's NIS (Yellow Pages)</li> <li><code>nntplib</code> --- NNTP protocol client</li> <li><code>optparse</code> --- Parser for command line options</li> <li><code>ossaudiodev</code> --- Access to OSS-compatible audio devices</li> <li><code>pipes</code> --- Interface to shell pipelines</li> <li><code>smtpd</code> --- SMTP Server</li> <li><code>sndhdr</code> --- Determine type of sound file</li> <li><code>spwd</code> --- The shadow password database</li> <li><code>sunau</code> --- Read and write Sun AU files</li> <li><code>telnetlib</code> --- Telnet client</li> <li><code>uu</code> --- Encode and decode uuencode files</li> <li><code>xdrlib</code> --- Encode and decode XDR data</li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/standard_libraray/#security-considerations","title":"Security Considerations","text":""},{"location":"programming/programming-languages/Python/summary/standard-library/subprocess/","title":"subprocess","text":"<pre><code>program = ['program-name', 'arguments']\nresult = subprocess.run(program, stdout=subprocess.PIPE, input=out.encode('utf-8') )\nif result.returncode == 0:\n    print(\"program ran successfully\")\n</code></pre> <ul> <li><code>subprocess.run()</code> return a object with following properties<ul> <li><code>stdout</code> - string with the output</li> <li><code>returncode</code> - return code of the program</li> <li><code>result.stdout.decode('utf-8')</code> - decode the stdout</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/Python/summary/standard-library/sys/","title":"sys","text":"<ul> <li>get memory usage of some object</li> </ul> <pre><code>import sys\ndic = {'a': 3, 'b': 2, 'c': 1, 'd': 1}\nprint(sys.getsizeof(dic))\n</code></pre>"},{"location":"programming/programming-languages/groovy/","title":"Groovy","text":"<p>Groovy is a versatile and dynamic programming language that runs on the Java Virtual Machine (JVM). It is known for its ease of use, smooth integration with Java, and powerful scripting capabilities. Groovy is commonly used in various domains, especially in areas where scripting, automation, and rapid development are essential.</p>"},{"location":"programming/programming-languages/groovy/#where-is-groovy-scripting-used","title":"Where is Groovy Scripting Used","text":""},{"location":"programming/programming-languages/groovy/#build-automation-and-continuous-integration","title":"Build Automation and Continuous Integration","text":"<ul> <li>Examples: Build scripts, CI/CD pipelines, and project configuration.</li> <li>Details: Groovy is most widely known for its use in build automation tools, particularly Apache Maven and Gradle. Gradle is a powerful build automation system that uses Groovy as its primary scripting language. It is widely used in Java projects, including Android development, to define tasks, dependencies, and build logic in a flexible, declarative manner. Gradle's ability to define complex builds and its integration with CI/CD systems like Jenkins make it popular in enterprise environments.</li> <li>Gradle - https://github.com/gradle/gradle</li> </ul>"},{"location":"programming/programming-languages/groovy/#scripting-and-automation","title":"Scripting and Automation","text":"<ul> <li>Examples: Automating tasks, writing scripts for system management, and simplifying repetitive operations.</li> <li>Details: Groovy is often used as a scripting language to automate tasks, manage system operations, or perform complex batch jobs. Its seamless integration with Java allows developers to script in a Java-like syntax while benefiting from Groovy's simpler, more concise syntax. Jenkins, a popular continuous integration tool, uses Groovy for scripting custom build and deployment pipelines, enabling teams to automate their software delivery processes.</li> </ul>"},{"location":"programming/programming-languages/groovy/#web-development","title":"Web Development","text":"<ul> <li>Examples: Web applications, RESTful APIs, and server-side logic.</li> <li>Details: Groovy is used in web development through frameworks like Grails (formerly known as Groovy on Rails). Grails is a powerful, convention-over-configuration web framework that accelerates the development of web applications by providing a ready-to-use environment. It integrates seamlessly with Java libraries and frameworks while allowing for rapid development with Groovy's expressive syntax. Grails is used to build web applications that require quick iteration and deployment, such as content management systems or enterprise web apps.</li> </ul>"},{"location":"programming/programming-languages/groovy/#testing-and-quality-assurance","title":"Testing and Quality Assurance","text":"<ul> <li>Examples: Automated tests, BDD (Behavior-Driven Development), and test automation.</li> <li>Details: Groovy is popular in the testing domain, particularly for writing automated tests. Spock is a testing and specification framework written in Groovy that supports both unit and integration testing. It is known for its expressive, readable syntax that makes tests easier to write and understand. Spock is often used in combination with Java projects, allowing teams to write robust tests that ensure code quality and reduce the risk of defects.</li> </ul>"},{"location":"programming/programming-languages/groovy/#data-processing","title":"Data Processing","text":"<ul> <li>Examples: ETL (Extract, Transform, Load) processes, data transformation scripts, and data migration.</li> <li>Details: Groovy is used in data processing tasks where scripts are needed to extract, transform, and load data between systems. It can be used to automate data pipelines, perform data cleansing, and migrate data from one format to another. The combination of Groovy's scripting capabilities and its access to Java's rich ecosystem of data processing libraries makes it ideal for these tasks.</li> </ul>"},{"location":"programming/programming-languages/groovy/#domain-specific-languages-dsls","title":"Domain-Specific Languages (DSLs)","text":"<ul> <li>Examples: Custom configuration languages, internal DSLs for applications, and task automation scripts.</li> <li>Details: Groovy is often used to create domain-specific languages (DSLs) because of its flexible and concise syntax. Gradle, for instance, uses a Groovy-based DSL to define build configurations, making it easier for users to express complex build logic in a human-readable format. Groovy DSLs are also used in various enterprise applications to allow non-developers to configure systems or define business rules without needing to write full-fledged code.</li> <li>nextflow - https://github.com/nextflow-io/nextflow</li> </ul>"},{"location":"programming/programming-languages/groovy/#enterprise-applications","title":"Enterprise Applications","text":"<ul> <li>Examples: Backend services, microservices, and enterprise integration.</li> <li>Details: Groovy is used in enterprise applications where rapid development, scripting capabilities, and Java integration are required. It allows developers to write concise code and quickly adapt to changing business requirements. In enterprises, Groovy is often used to script business logic, automate workflows, or build microservices that interact with larger Java-based systems.</li> </ul>"},{"location":"programming/programming-languages/groovy/#rapid-prototyping","title":"Rapid Prototyping","text":"<ul> <li>Examples: Proof of concept applications, early-stage development, and prototypes.</li> <li>Details: Groovy\u2019s ease of use and dynamic nature make it ideal for rapid prototyping. Developers can quickly build and iterate on applications or features without the overhead of a compiled language. This makes Groovy a popular choice for startups and teams that need to validate ideas quickly before investing in more formal development processes.</li> </ul>"},{"location":"programming/programming-languages/groovy/#configuration-and-workflow-management","title":"Configuration and Workflow Management","text":"<ul> <li>Examples: Configuring applications, managing infrastructure as code, and defining workflows.</li> <li>Details: Groovy is used to manage configuration and define workflows in various software systems. For example, Jenkins pipelines are written in Groovy, allowing for sophisticated automation workflows to be defined as code. This approach makes it easier to version, share, and maintain infrastructure and application configurations.</li> </ul>"},{"location":"programming/programming-languages/groovy/#integration-with-java-applications","title":"Integration with Java Applications","text":"<ul> <li>Examples: Extending Java applications, embedding scripting capabilities, and enhancing Java codebases.</li> <li>Details: Groovy is often embedded into existing Java applications to add scripting capabilities or to extend functionality without needing to rewrite the entire application in another language. This makes it possible to introduce dynamic features or automate tasks within a predominantly Java codebase.</li> </ul>"},{"location":"programming/programming-languages/groovy/#mobile-application-development","title":"Mobile Application Development","text":"<ul> <li>Examples: Android applications, mobile backend services, and hybrid apps.</li> <li>Details: Groovy is sometimes used in mobile application development, particularly within the Android ecosystem, where it can be integrated into Gradle build scripts. Groovy allows for more flexible and maintainable build processes, which is essential for complex mobile applications that need to manage dependencies, build variants, and resource files efficiently.</li> </ul>"},{"location":"programming/programming-languages/groovy/#content-management-systems-cms","title":"Content Management Systems (CMS)","text":"<ul> <li>Examples: Custom CMS solutions, enterprise content platforms, and digital publishing.</li> <li>Details: Groovy is used in building and customizing content management systems, particularly when rapid development and ease of customization are important. CMS platforms that are built on the JVM can leverage Groovy for scripting and extending functionality, making it easier for developers to adapt the CMS to specific business needs.</li> </ul>"},{"location":"programming/programming-languages/java/","title":"Java","text":"<p>Java is a widely-used, versatile programming language known for its portability, scalability, and robust ecosystem. It\u2019s used in a variety of domains, from web development to big data processing. Here are some common areas where Java is used, along with examples:</p>"},{"location":"programming/programming-languages/java/#where-is-java-programming-used","title":"Where is Java programming used","text":""},{"location":"programming/programming-languages/java/#web-development","title":"Web Development","text":"<ul> <li>Examples: Enterprise web applications, e-commerce platforms, and content management systems (CMS).</li> <li>Details: Java is used to build large-scale web applications, particularly in enterprise environments. Frameworks like <code>Spring</code> and <code>Hibernate</code> are popular for developing robust web applications. For example, companies like Amazon and LinkedIn use Java for their back-end services.</li> <li>Spring Framework repo - https://github.com/spring-projects/spring-framework</li> <li>Sprint Boot repo - https://github.com/spring-projects/spring-boot</li> </ul>"},{"location":"programming/programming-languages/java/#mobile-application-development","title":"Mobile Application Development","text":"<ul> <li>Examples: Android apps, mobile games, and utility applications.</li> <li>Details: Java is the primary language for Android app development, supported by Android Studio and the Android SDK. Popular Android apps, such as WhatsApp and Spotify, are developed using Java.</li> </ul>"},{"location":"programming/programming-languages/java/#enterprise-software","title":"Enterprise Software","text":"<ul> <li>Examples: Enterprise Resource Planning (ERP) systems, Customer Relationship Management (CRM) systems, and financial software.</li> <li>Details: Java is widely used in enterprise environments for building large-scale, mission-critical applications. It powers many enterprise software solutions, such as SAP, Oracle\u2019s E-Business Suite, and Salesforce.</li> </ul>"},{"location":"programming/programming-languages/java/#big-data","title":"Big Data","text":"<ul> <li>Examples: Hadoop, Apache Kafka, and Apache Spark.</li> <li>Details: Java is a key language in the big data ecosystem. Hadoop, a framework that enables the processing of large data sets across distributed computing environments, is written in Java. Similarly, Apache Kafka, used for real-time data streaming, and Apache Spark, a powerful big data processing engine, are Java-based.</li> <li>Hadoop repo - https://github.com/apache/hadoop</li> <li>Kafka repo - https://github.com/apache/kafka</li> <li>Spark repo - https://github.com/apache/spark, mostly uses Scala(JVM based functional language)</li> </ul>"},{"location":"programming/programming-languages/java/#cloud-computing","title":"Cloud Computing","text":"<ul> <li>Examples: Cloud-native applications, microservices, and distributed systems.</li> <li>Details: Java is used to build cloud-based applications that need to scale and manage distributed computing environments. Platforms like AWS, Google Cloud, and Microsoft Azure support Java for developing cloud-native applications. Spring Boot is a popular framework for developing microservices in Java.</li> </ul>"},{"location":"programming/programming-languages/java/#financial-services","title":"Financial Services","text":"<ul> <li>Examples: Banking systems, trading platforms, and risk management systems.</li> <li>Details: Java is extensively used in the financial sector for developing high-performance trading platforms, online banking systems, and risk management tools. Banks like JPMorgan Chase and Citibank use Java for their core banking applications.</li> </ul>"},{"location":"programming/programming-languages/java/#scientific-applications","title":"Scientific Applications","text":"<ul> <li>Examples: Simulation software, scientific research tools, and data analysis platforms.</li> <li>Details: Java is used in scientific computing for building applications that require large-scale simulations, data analysis, and visualization. For instance, MATLAB\u2019s Java-based user interface and Apache UIMA (used for unstructured information management) are examples of Java in scientific applications.</li> </ul>"},{"location":"programming/programming-languages/java/#internet-of-things-iot","title":"Internet of Things (IoT)","text":"<ul> <li>Examples: IoT platforms, smart devices, and home automation systems.</li> <li>Details: Java is used to develop software for IoT devices and platforms, allowing devices to communicate with each other and process data efficiently. Java ME (Micro Edition) is specifically designed for embedded systems and IoT devices.</li> </ul>"},{"location":"programming/programming-languages/java/#desktop-gui-applications","title":"Desktop GUI Applications","text":"<ul> <li>Examples: IDEs, productivity tools, and media players.</li> <li>Details: Java is used to develop cross-platform desktop applications with graphical user interfaces (GUIs). Tools like Eclipse and NetBeans IDEs, as well as productivity software like LibreOffice and ThinkFree, are examples of Java desktop applications.</li> </ul>"},{"location":"programming/programming-languages/java/#web-servers-and-application-servers","title":"Web Servers and Application Servers","text":"<ul> <li>Examples: Apache Tomcat, JBoss, and WebSphere.</li> <li>Details: Java is commonly used to develop and run web servers and application servers that host web applications and services. Apache Tomcat, an open-source Java servlet container, is widely used for serving Java-based web applications.</li> </ul>"},{"location":"programming/programming-languages/java/#blockchain-and-cryptography","title":"Blockchain and Cryptography","text":"<ul> <li>Examples: Blockchain platforms, cryptocurrency wallets, and secure communication protocols.</li> <li>Details: Java is used in the development of blockchain technologies and applications. For example, the Hyperledger Fabric platform, a popular blockchain framework, uses Java for smart contract development.</li> </ul>"},{"location":"programming/programming-languages/java/resources/","title":"Resources","text":""},{"location":"programming/programming-languages/java/resources/#documentaiton","title":"Documentaiton","text":"<ul> <li>https://www.oracle.com/java/</li> <li>https://docs.oracle.com/en/java/</li> <li>https://docs.oracle.com/javase/tutorial/</li> </ul>"},{"location":"programming/programming-languages/java/resources/#tutorials","title":"Tutorials","text":"<ul> <li>https://www.javacodegeeks.com/core-java-tutorials</li> <li>https://www.infoworld.com/category/java/</li> </ul>"},{"location":"programming/programming-languages/java/resources/#articles","title":"Articles","text":"<ul> <li>https://en.wikipedia.org/wiki/Java_(programming_language)</li> </ul>"},{"location":"programming/programming-languages/java/resources/#books","title":"Books","text":"<ul> <li>https://en.wikibooks.org/wiki/Java_Programming</li> </ul>"},{"location":"programming/programming-languages/java/build-tools/","title":"Build Tools","text":"<ul> <li><code>ant</code></li> <li><code>maven</code></li> <li><code>gradle</code></li> </ul> <p>These are the most common build systems used in java.</p>"},{"location":"programming/programming-languages/java/build-tools/#how-to-install","title":"How to install","text":"<ul> <li>compiler - <code>openjdk</code><ul> <li><code>sudo apt install default-jdk</code></li> <li><code>sudo apt install openjdk-8-jdk</code> - for <code>jdk8</code>, you can choose another one</li> <li><code>sudo update-alternatives --config java</code> - check the available versions in the system</li> </ul> </li> <li>build - <code>apache ant</code> <code>apache maven</code> <code>gradle</code><ul> <li><code>apache maven</code><ul> <li><code>sudo apt install mvn</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"programming/programming-languages/java/build-tools/#gradle","title":"Gradle","text":"<p>Gradle is an open-source build automation tool that helps software engineers to test, build, and release high-performance software products. In addition, Gradle also supports multi-language development. Currently, the supported languages for Gradle include Java, Kotlin, Groovy, Scala, C/C++, and JavaScript.</p>"},{"location":"programming/programming-languages/java/build-tools/#resources","title":"Resources","text":"<ul> <li>Gradle</li> <li>Gradle Tutorial</li> <li>Working with Gradle</li> <li>Gradle</li> <li>Building Java Projects with Gradle</li> </ul>"},{"location":"programming/programming-languages/java/build-tools/#maven","title":"Maven","text":"<p>Maven is an open-source build tool, used primarily for Java projects.</p>"},{"location":"programming/programming-languages/java/build-tools/#resources_1","title":"Resources","text":"<ul> <li>Getting started</li> <li>Building Java Projects with Maven</li> </ul>"},{"location":"programming/programming-languages/java/build-tools/#ant","title":"Ant","text":"<p>Apache Ant is a Java library and command-line tool whose mission is to drive processes described in build files as targets and extension points dependent upon each other. The main known usage of Ant is the build of Java applications. Ant supplies a number of built-in tasks allowing to compile, assemble, test and run Java applications. Ant can also be used effectively to build non Java applications, for instance C or C++ applications. More generally, Ant can be used to pilot any type of process which can be described in terms of targets and tasks.</p>"},{"location":"programming/programming-languages/java/build-tools/#resources_2","title":"Resources","text":"<ul> <li>Apache Ant</li> <li>Apache Ant Tutorial</li> <li>Apache Ant</li> <li>What is Apache Ant?</li> </ul>"},{"location":"programming/programming-languages/java/libraries/JDBC/","title":"Java Database Connectivity","text":"<ul> <li>JDBI3</li> <li>JDBC Template</li> </ul> <p>JDBC is an API(Application programming interface) used in java programming to interact with databases. The classes and interfaces of JDBC allow the application to send requests made by users to the specified database.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Introduction to JDBC</li> <li>IBM: What is JDBC</li> </ul>"},{"location":"programming/programming-languages/java/libraries/JDBC/#jdbi3","title":"JDBI3","text":"<p>Jdbi is an open source Java library (Apache license) that uses lambda expressions and reflection to provide a friendlier, higher level interface than JDBC to access the database.</p>"},{"location":"programming/programming-languages/java/libraries/JDBC/#resources","title":"Resources","text":"<ul> <li>Jdbi  - https://jdbi.org/</li> <li>Jdbi Tutorial - https://www.baeldung.com/jdbi</li> </ul>"},{"location":"programming/programming-languages/java/libraries/JDBC/#jdbc-template","title":"JDBC Template","text":"<p>JDBCTemplate is a central class in Spring's JDBC core package that simplifies the use of JDBC and helps to avoid common errors. It internally uses JDBC API and eliminates many problems with JDBC API. It executes SQL queries or updates, initiating iteration over ResultSets, catching JDBC exceptions, and translating them to the generic. It executes core JDBC workflow, leaving application code to provide SQL and extract results. It handles the exception and provides informative exception messages with the help of exception classes defined in the <code>org.springframework.dao</code> package.</p>"},{"location":"programming/programming-languages/java/libraries/JDBC/#resources_1","title":"Resources","text":"<ul> <li>JDBC Template tutorial - https://www.baeldung.com/spring-jdbc-jdbctemplate</li> </ul>"},{"location":"programming/programming-languages/java/libraries/logging-frameworks/","title":"Logging Frameworks","text":"<ul> <li>logback</li> <li>log4j2</li> <li>SF4J</li> <li>TinyLog</li> </ul> <p>Logging is an important feature that helps developers to trace out the errors. It provides the ability to capture the log file. Logging provides the complete tracing information of the application and also records the critical failure if any occur in an application. There are three components of Logging: Logger, Logging handlers or Appenders and Layouts or logging formatters.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Introduction to Java Logging</li> <li>Java Logger</li> <li>Java Logging Frameworks</li> <li>How to Do Logging In Java</li> </ul>"},{"location":"programming/programming-languages/java/libraries/logging-frameworks/#log4j2","title":"Log4j2","text":"<p>Apache Log4j is a Java-based logging utility. Log4j Java library's role is to log information that helps applications run smoothly, determine what's happening, and help with the debugging process when errors occur. Logging libraries typically write down messages to the log file or a database.</p> <p>Log4j2 is the updated version of the popular and influential log4j library, used extensively throughout the Java ecosystem for so many years. Version 2. x keeps all the logging features of its predecessor and builds on that foundation with some significant improvements, especially in the area of performance.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Official Website</li> <li>Log4j explained: Everything you need to know</li> </ul>"},{"location":"programming/programming-languages/java/libraries/logging-frameworks/#logback","title":"Logback","text":"<p>Logback is one of the most widely used logging frameworks in the Java Community. It's a replacement for its predecessor, Log4j. Logback offers a faster implementation, provides more options for configuration, and more flexibility in archiving old log files.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Official Website</li> </ul>"},{"location":"programming/programming-languages/java/libraries/logging-frameworks/#slf4j","title":"Slf4j","text":"<p>The SLF4J or the Simple Logging Facade for Java is an abstraction layer for various Java logging frameworks, like Log4j 2 or Logback. This allows for plugging different logging frameworks at deployment time without the need for code changes.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Official Website</li> </ul>"},{"location":"programming/programming-languages/java/libraries/logging-frameworks/#tinylog","title":"Tinylog","text":"<p>Tinylog is a lightweight open-source logging framework for Java and Android, optimized for ease of use.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Official Website</li> </ul>"},{"location":"programming/programming-languages/java/libraries/object-relational-mapper/","title":"Object Relational Mapping","text":"<ul> <li>Spring Data JPA</li> <li>Hibernate</li> <li>EBean</li> <li>JPA</li> </ul> <p>A programming method to map objects in Java to relational entities in a database. In other words, converting data between relational databases and object-oriented programming languages. Some popular ORM tools/frameworks in Java are:</p> <ul> <li>Spring Data JPA</li> <li>Hibernate</li> <li>Ebean</li> </ul> <p>Visit the following resources to learn more:</p> <ul> <li>ORM tutorial</li> <li>Java Databases: An Overview of Libraries &amp; APIs</li> </ul>"},{"location":"programming/programming-languages/java/libraries/object-relational-mapper/#jpa","title":"JPA","text":"<p>The Jakarta Persistence API provides Java developers with an object/relational mapping facility for managing relational data in Java applications. JPA is not a tool nor a framework, but a set of interfaces for accessing, persisting, and managing data between Java objects and (a) relational database. Because it is a set of interfaces, it will require an implementation to work with and persist Java objects. This will be ORM. Here are the main features of JPA:</p> <ul> <li>Cleaner, easier, standardized ORM.</li> <li>Supports inheritance, polymorphism, and polymorphic queries.</li> <li>Supports metadata annotations/XML descriptors to define the mapping (between objects and relational database).</li> <li>Supports a rich, SQL-like query language for static and dynamic queries.</li> <li>Pluggable persistence providers like Hibernate, MyBatis, etc.</li> <li>Caching: JPA supports 2 kinds of cache - first and second levels - to support performance tuning.</li> <li>Read more here.</li> </ul> <p>Note: In 2019, JPA was renamed from Java Persistence API to Jakarta Persistence.</p> <p>Visit the following resources to learn more:</p> <ul> <li>TutorialsPoint JPA</li> <li>Official Java doc - Package javax.persistence</li> <li>Pro Jakarta Persistence in Jakarta EE 10</li> <li>Java Persistence with Spring Data and Hibernate by Catalin Tudose</li> </ul>"},{"location":"programming/programming-languages/java/libraries/object-relational-mapper/#spring-data-jpa","title":"Spring data jpa","text":"<p>Spring Data JPA aims to significantly improve the implementation of data access layers by reducing the effort to the amount that's actually needed. As a developer you write your repository interfaces, including custom finder methods, and Spring will provide the implementation automatically.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Spring Data JPA</li> <li>Introduction to Spring Data JPA</li> <li>Spring Data JPA Tutorial</li> <li>Spring Boot -- Spring Data JPA</li> <li>Spring Data JPA Tutorial</li> <li>Spring Boot Tutorial - Spring Data JPA</li> </ul>"},{"location":"programming/programming-languages/java/libraries/object-relational-mapper/#hibernate","title":"Hibernate","text":"<p>Hibernate is an open source object-relational mapping tool that provides a framework to map object-oriented domain models to relational databases for web applications.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Hibernate</li> <li>Hibernate Tutorial</li> </ul>"},{"location":"programming/programming-languages/java/libraries/object-relational-mapper/#ebean","title":"Ebean","text":"<p>Ebean is an object-relational mapping tool written in Java. It supports the standard JPA annotations for declaring entities. However, it provides a much simpler API for persisting. In fact, one of the points worth mentioning about the Ebean architecture is that it is sessionless, meaning it does not fully manage entities.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Ebean</li> <li>Ebean Documentation</li> <li>Guide to Ebean</li> </ul>"},{"location":"programming/programming-languages/java/libraries/testing/","title":"Testing in Java","text":"<ul> <li>Mocking<ul> <li>Mockito</li> </ul> </li> <li>Behavior Testing<ul> <li>Cucumber-JVM</li> <li>Cukes</li> <li>JBehave</li> </ul> </li> <li>Unit Testing<ul> <li>JUnit</li> <li>TestNG</li> </ul> </li> <li>Integration Testing<ul> <li>REST Assured</li> <li>JMeter</li> </ul> </li> </ul> <p>A key to building software that meets requirements without defects is testing. Software testing helps developers know they are building the right software. When tests are run as part of the development process (often with continuous integration tools), they build confidence and prevent regressions in the code.</p> <p>Visit the following resources to learn more:</p> <ul> <li>What is Software Testing?</li> <li>Testing Pyramid</li> </ul>"},{"location":"programming/programming-languages/java/libraries/testing/#mocking","title":"Mocking","text":"<p>Mocking removes external dependencies from a unit test to create a sense of an entire controlled environment. The traditional method of mocks involves mocking all other classes that interact with the class we want to test. The common targets for mocking are:</p> <ul> <li>Database connections</li> <li>Web services</li> <li>Slow Classes</li> <li>Classes with side effects</li> <li>Classes with non-deterministic behavior</li> </ul>"},{"location":"programming/programming-languages/java/libraries/testing/#mockito","title":"Mockito","text":"<p>Mockito is mocking framework for java.</p> <ul> <li>Mockito - Mocking Framework for Java</li> </ul>"},{"location":"programming/programming-languages/java/libraries/testing/#behavior-testing","title":"Behavior Testing","text":""},{"location":"programming/programming-languages/java/libraries/testing/#cukes","title":"Cukes","text":"<p>cukes-rest takes simplicity of Cucumber and provides bindings for HTTP specification. As a sugar on top, cukes-rest adds steps for storing and using request/response content from a file system, variable support in .features, context inflation in all steps and a custom plug-in system to allow users to add additional project specific content.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Cukes Github</li> <li>Getting Started with Cukes-REST</li> </ul>"},{"location":"programming/programming-languages/java/libraries/testing/#jbehave","title":"Jbehave","text":"<p>JBehave is a framework for Behaviour-Driven Development (BDD). BDD is an evolution of test-driven development (TDD) and acceptance-test driven design, and is intended to make these practices more accessible and intuitive to newcomers and experts alike. It shifts the vocabulary from being test-based to behaviour-based, and positions itself as a design philosophy.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Jbehave</li> <li>Jbehave Tutorial</li> </ul>"},{"location":"programming/programming-languages/java/libraries/testing/#unit-testing","title":"Unit Testing","text":""},{"location":"programming/programming-languages/java/libraries/testing/#junit","title":"JUnit","text":"<p>JUnit is a testing framework for Java.</p> <p>Visit the following resources to learn more:</p> <ul> <li>JUnit</li> <li>JUnit Documentation</li> <li>JUnit tutorial</li> <li>Basic JUnit tutorial</li> <li>Testing with JUnit crash course</li> </ul>"},{"location":"programming/programming-languages/java/libraries/testing/#testng","title":"Testng","text":"<p>TestNG is a testing framework inspired from JUnit and NUnit but introducing some new functionalities that make it more powerful and easier to use.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Testng</li> <li>Testng Documentation</li> <li>Testng tutorial</li> </ul>"},{"location":"programming/programming-languages/java/libraries/testing/#integration-testing","title":"Integration Testing","text":""},{"location":"programming/programming-languages/java/libraries/testing/#rest-assured","title":"Rest assured","text":"<p>Testing and validating REST services in Java is harder than in dynamic languages such as Ruby and Groovy. REST Assured brings the simplicity of using these languages into the Java domain.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Rest-assured</li> <li>Rest-assured Documentation</li> </ul>"},{"location":"programming/programming-languages/java/libraries/testing/#jmeter","title":"JMeter","text":"<p>Apache JMeter is an Apache project that can be used as a load testing tool for analyzing and measuring the performance of a variety of services, with a focus on web applications.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Apache JMeter Website</li> </ul>"},{"location":"programming/programming-languages/java/libraries/web-frameworks/","title":"Web frameworks","text":"<ul> <li>Spring</li> <li>Spring Boot</li> <li>Play Framework</li> <li>Spark</li> </ul> <p>Frameworks are tools with pre-written code, that act as a template or skeleton, which can be reused to create an application by simply filling with your code as needed which enables developers to program their application with no overhead of creating each line of code again and again from scratch.</p>"},{"location":"programming/programming-languages/java/libraries/web-frameworks/#spring","title":"Spring","text":"<p>Spring is a powerful open-source Java platform (framework), that is used to create and maintain web applications.</p> <p>Visit the following resources to learn more:</p> <ul> <li>Official Site</li> <li>Quickstart guide</li> <li>Official guides</li> <li>Spring Framework Documentation</li> <li>Different Spring tutorials</li> <li>What is Spring Framework? An Unorthodox Guide</li> </ul>"},{"location":"programming/programming-languages/java/libraries/web-frameworks/#spring-boot","title":"Spring Boot","text":"<p>Spring Boot is an open source, microservice-based Java web framework. The Spring Boot framework creates a fully production-ready environment that is completely configurable using its prebuilt code within its codebase. The microservice architecture provides developers with a fully enclosed application, including embedded application servers.</p>"},{"location":"programming/programming-languages/java/libraries/web-frameworks/#resources","title":"Resources","text":"<ul> <li>Spring Boot</li> <li>What is Spring Boot?</li> <li>Spring Boot Tutorial</li> <li>Learn Spring Boot</li> <li>Spring Boot Tutorial</li> <li>Spring Boot for Beginners</li> </ul>"},{"location":"programming/programming-languages/java/libraries/web-frameworks/#play-framework","title":"Play Framework","text":"<p>Play Framework is a high-productivity web application framework that allows the model-view-controller pattern. It is written in Scala but can also be used for other programming languages that are compiled and run on the JVM. e.g.Java.</p>"},{"location":"programming/programming-languages/java/libraries/web-frameworks/#resources_1","title":"Resources","text":"<ul> <li>Play Framework Website</li> <li>Introduction to Play Framework</li> <li>What is Play Framework?</li> <li>Intro to Play Framework</li> </ul>"},{"location":"programming/programming-languages/java/libraries/web-frameworks/#spark","title":"Spark","text":"<p>Spark is a micro framework for creating web applications in Kotlin and Java 8. Sinatra, a popular Ruby micro framework, was the inspiration for it.</p>"},{"location":"programming/programming-languages/java/libraries/web-frameworks/#resources_2","title":"Resources","text":"<ul> <li>Spark Java</li> <li>Intro to Spark Java Framework</li> <li>What is Spark java?</li> </ul>"},{"location":"programming/programming-languages/java/summary/advance/","title":"Advance Java","text":""},{"location":"programming/programming-languages/java/summary/advance/#memory-management","title":"Memory Management","text":"<ul> <li>to allocate memory to objects we use <code>new</code> keyword</li> <li>memory Deallocation is done by garbage collector in java<ul> <li>this is a separate thread launched with all java programs, which look for object which   don't have any references and remove them from the memory.</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/java/summary/advance/#collection-framework","title":"Collection Framework","text":"<ul> <li>Prebuilt library classes for common data structures</li> </ul>"},{"location":"programming/programming-languages/java/summary/advance/#serialization","title":"Serialization","text":"<ul> <li>Basically a way to pass objects over network, from one process to other, etc.</li> </ul>"},{"location":"programming/programming-languages/java/summary/advance/#networking-and-sockets","title":"Networking and Sockets","text":"<ul> <li>Utility classes provided in java to make network sockets and networking applications</li> <li>You will not directly interact with these classes, but you will encounter several API which will use them.</li> </ul>"},{"location":"programming/programming-languages/java/summary/advance/#generics","title":"Generics","text":"<ul> <li>Reduces the amount of code. This is usually needed in statically typed languages,   where we have to create same functions for different types.   To eliminate this problem generics are used. So now if you have a code which will be same for   different classes, you can use generics.</li> </ul>"},{"location":"programming/programming-languages/java/summary/advance/#streams","title":"Streams","text":"<p>Allows for functional style operations on classes. This it part of package <code>java.util.stream</code>. For collections you can stream them and them preform functional operations like <code>filter</code>, <code>map</code>, <code>reduce</code> and them <code>collect</code> them in the end.</p>"},{"location":"programming/programming-languages/java/summary/advance/#threads","title":"Threads","text":"<p>So you have operating system and your operating system can do context switching between different processes. Now we write some code and there are two parts of our code and we are also doing manual switching between these tasks we have. But what if we can extend the same concept and give this job of switching to operating system. That's what's threads are, they help us creating separate jobs and OS will context switch between them. In case of java we have inbuilt support for threads, because we run our code on top of a virtual machine (JVM) that why this inbuilt support is possible. Otherwise we have to work with different implementation according to the operating systems.</p>"},{"location":"programming/programming-languages/java/summary/advance/#how-jvm-works","title":"How JVM works?","text":"<p>It's basically a small version of virtual machine.</p>"},{"location":"programming/programming-languages/java/summary/fundamentals/","title":"Java Fundamentals","text":""},{"location":"programming/programming-languages/java/summary/fundamentals/#basic-syntax","title":"Basic Syntax","text":"<p>C and C++ inspired syntax. Here is a sample program</p> <pre><code>class Demo{\n    public static void main(String[] args){\n        System.out.println(\"Hello World\");\n    }\n}\n</code></pre>"},{"location":"programming/programming-languages/java/summary/fundamentals/#datatypes-and-variables","title":"DataTypes and Variables","text":"<ul> <li>Same as used in C++</li> <li>Additionally there are wrapper classes for each type, which provided   additional functionalities.   Related to this is the concept of autoboxing and unboxing.</li> </ul>"},{"location":"programming/programming-languages/java/summary/fundamentals/#conditionals","title":"Conditionals","text":"<ul> <li><code>if</code> <code>else</code>, can be nested and laddered</li> <li><code>switch</code> <code>case</code></li> </ul>"},{"location":"programming/programming-languages/java/summary/fundamentals/#loops","title":"Loops","text":"<ul> <li><code>for(initialization; condition; increment){}</code></li> <li><code>while(conditional){}</code></li> <li><code>do{}while(condition);</code></li> </ul>"},{"location":"programming/programming-languages/java/summary/fundamentals/#functions","title":"Functions","text":"<ul> <li>same as other programming languages</li> <li>function have a<ul> <li>name</li> <li>return type</li> <li>arguments list</li> <li>and access level</li> <li>wether it is static or not</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/java/summary/fundamentals/#exception-handling","title":"Exception Handling","text":"<ul> <li>use <code>try</code>, <code>catch</code> and <code>finally</code></li> <li>there is a base <code>Exception</code> class which you can extend to create new exceptions</li> <li>a function can either handle a exception or pass it to the calling function using <code>throws</code></li> </ul>"},{"location":"programming/programming-languages/java/summary/fundamentals/#oop-interfaces-and-classes","title":"OOP, Interfaces, and Classes","text":"<ul> <li>OOP - object oriented programming, is supported by java</li> <li>Interfaces are used to encapsulate and abstract functionalities.<ul> <li>Implementing a interface means you will agree on the functionalities   mentioned in the interface.   This will help to handle objects of even different types.   For example you are making a amplifier whose job is to increase the sound of   the object.   You can either make different functions for different class objects or   you can ask them the implement a common interface and target objects that   implement the interface.</li> </ul> </li> <li>Classes - blueprint of objects, which consists of properties and methods.</li> </ul>"},{"location":"programming/programming-languages/java/summary/fundamentals/#packages","title":"Packages","text":"<ul> <li>package is a namespace that mainly contains classes and interfaces.</li> <li>packages are used to encapsulated pieces of code.</li> <li>a package which is implicitly imported in each java class is <code>java.lang</code> package<ul> <li>the <code>System</code> you use in <code>System.out.println</code> is part of that, so the   full name is <code>java.lang.System.out.println()</code></li> </ul> </li> <li>another common package is <code>java.util</code> which consists of utilities like <code>Scanner</code>, <code>Date</code></li> </ul>"},{"location":"programming/programming-languages/java/summary/fundamentals/#why-use-packages","title":"Why use packages","text":"<ul> <li>helps in distribution, you are sharing compiled classes and interfaces</li> <li>separate functionalities, and helps in testing</li> </ul>"},{"location":"programming/programming-languages/java/summary/fundamentals/#how-to-make-jar-files","title":"How to make jar files","text":"<ul> <li><code>javac -d [destination-dir] [sourcefiles]</code><ul> <li>this will create the corresponding class files in the destination directory   and will follow the same package structure.</li> </ul> </li> <li>now create a mainfest.txt. files, with contents</li> </ul> <pre><code>Main-Class: YourStartingClass\n</code></pre> <ul> <li>now create the jar file <code>jar -cvmf mainfest.txt name.jar *.class</code></li> <li>to run a jar, <code>java -jar file.jar</code></li> </ul>"},{"location":"programming/programming-languages/java/summary/fundamentals/#simple-project-structure","title":"Simple project structure","text":"<pre><code>MyProject\n|---src\n|---|---com\n|-------|---companyname\n|-----------|---Demo.java\n|---build\n|---|---com\n|-------|---companyname\n|-----------|---Demo.class\n</code></pre> <p>Here is how you compile this,</p> <pre><code>cd MyProject\njavac -d ../build com/companyname/*.java\n# run the class\njava build/com/companyname/Demo.java\n\n# To make a jar file \n# put mainfest.txt file in build/com\n# Main-Class: com.companyname.Demo\ncd build\njava -cvmf mainfest.txt demo.jar com\n</code></pre>"},{"location":"programming/programming-languages/java/summary/fundamentals/#data-structures","title":"Data Structures","text":"<ul> <li>Arrays - part of the <code>java.lang</code> package</li> </ul>"},{"location":"programming/programming-languages/java/summary/undefined-behavior/","title":"Undefined Behavior","text":"<p>Unlike C there is no undefined behavior in java.</p> <ul> <li>https://stackoverflow.com/questions/2201688/order-of-execution-of-parameters-guarantees-in-java</li> <li>https://stackoverflow.com/questions/17684991/difference-in-increment-decrement-operator-in-c-and-java</li> </ul>"},{"location":"programming/programming-languages/java/summary/collection/","title":"Collections","text":"<ul> <li>Java doesnt Support Operator Overloading Except for one case i.e   <code>+</code> operator it can be used to add number as well as strings.</li> <li>So you will have to use methods in java collections, no <code>[]</code> operator or no   comparision operators like,<code>&lt;</code> , <code>&gt;</code> , <code>=</code></li> <li>Collections can only work with Objects, so you can't use <code>int</code>, you have to use   wrapper class <code>Integer</code> objects.</li> </ul>"},{"location":"programming/programming-languages/java/summary/collection/#building-blocks","title":"Building Blocks","text":"<ul> <li>Collections are made of java <code>Arrays</code> and some self referential classes.</li> </ul> <pre><code>class Node&lt;T&gt;{\n    T val;\n    Node next;\n}\n</code></pre>"},{"location":"programming/programming-languages/java/summary/collection/Arrays/","title":"Arrays","text":"<ul> <li>First there is a simple concept of array, and they don\u2019t belong to collection they are part of core java.</li> </ul> <pre><code>// declaring and initilizing arrays\n// not the size of array cannot be change once it is declared, just like in c\nint a[] = {1,2,3,4};\nint []aa = {1,2,3,4};\n\nString b[] = {\"shivanshu\", \"shivansh\", \"shiv\"};\nString bb[]; // delcare variable\nbb = new String[]{\"rai\", \"ria\"}; // initilize it\n\n// if you want array with specific length use\nint c[] = new int[100];\n// this will be initialized with default initial values\n// integer - 0\n// string - null\n// character \\u0000\n// boolean - false\n\n// access elements of array\nint no = a[2];\n\n// get length of an array\nint length = a.length; // not this is not a method, a const, no ()\n\n// this is all basic we have\n</code></pre> <ul> <li>now there are other helper classes to manipulate arrays<ul> <li><code>java.util.Arrays</code></li> <li><code>org.apache.commons.lang3.ArrayUtils</code></li> </ul> </li> </ul> <pre><code>// filling array with particular values\nlong array[] = new long[5];\nArrays.fill(array, 30);\n\n// new array by copying another array\nint array[] = { 1, 2, 3, 4, 5 };\nint[] copy = Arrays.copyOf(array, 5);\n</code></pre>"},{"location":"programming/programming-languages/java/summary/collection/List/","title":"List","text":"<p>These internally use arrays.</p> <p>You can see in diagram there are two class for <code>List</code> interface:</p> <ul> <li>these can change size, i.e. they are dynamic in nature, not like the code java one</li> <li>https://www.baeldung.com/java-arraylist-vs-vector</li> <li>Don\u2019t use vector? Why? - https://stackoverflow.com/questions/1386275/why-is-java-vector-and-stack-class-considered-obsolete-or-deprecated</li> </ul> <pre><code>import java.util.*; // for all collections\n\n// all these are same\nList&lt;Integer&gt; l = new ArrayList&lt;&gt;();\nList&lt;integer&gt; ll = new ArrayList&lt;Integer&gt;();\n\n// Also, the type inside &lt;&gt; should be Object, not a primitive types\n// this applys for **all collections**, not just List\n// this is wrong \nList&lt;int&gt; l = new ArrayList&lt;&gt;(); // wrong, not int, use wrapper classes Integer\n\n// add element\nl.add(100); // O(1)\nl.add(3, 100); // at particular index, other elements will shift, O(n)\n\n// accessing elements\nint a = l.get(2);\n\n// updating elements\nl.set(0, 1000);\n\n// removing elements\nl.remove(0); \n\n// get size\nl.size();\n\n// find element\nl.contains(10); // return first index\n\n// remove all elements\nl.clear();\n\n// convert to a object array\nObject a[] = l.toArray(); // can only convert to Object array\n\n// to convert to int array\nint a[] = new int[l.size()]; // create empty array\na = l.toArray(a); // pass it as a parameter and assign back to it\n\n// or you can use normal for loop\n</code></pre> <p>Now to avoid repetition, learn the methods of the interface not particular class, so it applies to class which implement it.</p> <ul> <li><code>List</code>  - classes <code>Vector</code> <code>ArrayList</code> <code>Stack</code> <code>LinkedList</code><ul> <li><code>size()</code></li> <li><code>add()</code></li> <li><code>set()</code></li> <li><code>indexOf()</code> <code>lastIndexOf()</code>, <code>-1</code> if not present</li> <li><code>remove()</code></li> <li><code>get()</code></li> <li><code>contains()</code></li> </ul> </li> </ul>"},{"location":"programming/programming-languages/java/summary/collection/Map/","title":"Map","text":"<ul> <li> <p><code>Map</code> - classes <code>HashMap</code> <code>LinkedHashMap</code> <code>TreeMap</code></p> <ul> <li><code>clear()</code></li> <li><code>containsKey(key)</code></li> <li><code>containsValue(value)</code></li> <li><code>get(key)</code> - give value associated with key</li> <li><code>isEmpty()</code></li> <li><code>put(key, value)</code></li> <li><code>remove(key)</code></li> <li><code>putIfAbsent(key, value)</code> - set value only if key is not present</li> </ul> </li> <li> <p><code>HashMap</code> unordered</p> </li> <li><code>TreeMap</code> <code>LinkedHashMap</code> - ordered</li> </ul>"},{"location":"programming/programming-languages/java/summary/collection/Queue/","title":"Queue","text":"<ul> <li><code>Queue</code> - classes <code>LinkedList</code> <code>PriorityQueue</code><ul> <li><code>poll()</code> - remove front element</li> <li><code>peek()</code> - get front element</li> <li><code>add()</code> - add new element in end</li> <li><code>remove(item)</code> - remove element from front, or a <code>item</code></li> <li><code>size()</code></li> </ul> </li> </ul> <pre><code>// traversing elements\nQueue&lt;String&gt; pq = new PriorityQueue&lt;&gt;();\n\npq.add(\"Geeks\");\npq.add(\"For\");\npq.add(\"Geeks\");\n\nIterator iterator = pq.iterator();\n\nwhile (iterator.hasNext()) {\n    System.out.print(iterator.next() + \" \");\n}\n</code></pre>"},{"location":"programming/programming-languages/java/summary/collection/Set/","title":"Set","text":"<ul> <li><code>Set</code> - classes <code>HashSet</code> <code>LinkedHashSet</code> <code>TreeSet</code><ul> <li><code>add()</code></li> <li><code>addAll(item)</code> - add all elements of <code>item</code> collection</li> <li><code>clear()</code> - remove all elements</li> <li><code>contains()</code></li> <li><code>isEmpty()</code></li> <li><code>iterator()</code> - return iterator to set</li> <li><code>remove(element)</code></li> <li><code>size()</code></li> </ul> </li> </ul>"},{"location":"programming/programming-languages/javascript/","title":"Javascript","text":"<p>JavaScript is a versatile, high-level programming language primarily used for creating dynamic and interactive content on the web. However, its uses have expanded far beyond just web development.</p>"},{"location":"programming/programming-languages/javascript/#where-is-javascript-programming-used","title":"Where is Javascript programming used","text":""},{"location":"programming/programming-languages/javascript/#web-development-front-end","title":"Web Development (Front-End)","text":"<ul> <li>Examples: Dynamic websites, single-page applications (SPAs), interactive UI components.</li> <li>Details: JavaScript is the core language for front-end web development, allowing developers to create interactive and responsive web pages. For example, frameworks like React, Angular, and Vue.js are built on JavaScript and are used to create SPAs like Gmail or Facebook.</li> <li>React repo - https://github.com/facebook/react</li> <li>Angular repo - https://github.com/angular/angular</li> <li>Vue repo - https://github.com/vuejs/vue</li> </ul>"},{"location":"programming/programming-languages/javascript/#web-development-back-end","title":"Web Development (Back-End)","text":"<ul> <li>Examples: Server-side applications, APIs, and web servers.</li> <li>Details: JavaScript is also used on the server-side through Node.js, a runtime environment that allows JavaScript to be executed outside the browser. Companies like LinkedIn and Netflix use Node.js to build scalable, high-performance back-end services.</li> <li>nodejs repo - https://github.com/nodejs/node</li> <li>express js repo - https://github.com/expressjs/express</li> </ul>"},{"location":"programming/programming-languages/javascript/#mobile-app-development","title":"Mobile App Development","text":"<ul> <li>Examples: Cross-platform mobile apps, progressive web apps (PWAs), and hybrid apps.</li> <li>Details: JavaScript can be used to build mobile applications using frameworks like React Native and Ionic. For example, the mobile app for Facebook is built with React Native, allowing it to run on both iOS and Android with a single codebase.</li> </ul>"},{"location":"programming/programming-languages/javascript/#desktop-application-development","title":"Desktop Application Development","text":"<ul> <li>Examples: Cross-platform desktop apps, productivity tools, and communication apps.</li> <li>Details: JavaScript is used to develop desktop applications through frameworks like Electron, which allows web technologies to be used for building desktop apps. Popular apps like Slack, Visual Studio Code, and Discord are built using Electron.</li> <li>Electron repo - https://github.com/electron/electron</li> <li>VSCode - text editor - https://github.com/microsoft/vscode</li> <li>foliate - a ebook reader - https://github.com/johnfactotum/foliate</li> </ul>"},{"location":"programming/programming-languages/javascript/#web-servers-and-serverless-computing","title":"Web Servers and Serverless Computing","text":"<ul> <li>Examples: RESTful APIs, serverless functions, and cloud-based services.</li> <li>Details: JavaScript, via Node.js, is often used to build web servers and serverless functions on cloud platforms like AWS Lambda, Azure Functions, and Google Cloud Functions. For example, REST APIs that handle user authentication or data processing can be built using JavaScript.</li> </ul>"},{"location":"programming/programming-languages/javascript/#game-development","title":"Game Development","text":"<ul> <li>Examples: Browser-based games, mobile games, and 2D/3D game engines.</li> <li>Details: JavaScript is used in developing browser-based games and mobile games, often with the help of libraries like Phaser, Three.js, or Babylon.js. Games like 2048 and HexGL are examples of popular JavaScript-based games.</li> <li>Three js repo - https://github.com/mrdoob/three.js</li> </ul>"},{"location":"programming/programming-languages/javascript/#internet-of-things-iot","title":"Internet of Things (IoT)","text":"<ul> <li>Examples: IoT platforms, device control, and smart home applications.</li> <li>Details: JavaScript can be used to program IoT devices and platforms, particularly with frameworks like Johnny-Five, which allows JavaScript to interface with hardware components. For example, you can control LEDs, sensors, and motors in a smart home environment using JavaScript.</li> </ul>"},{"location":"programming/programming-languages/javascript/#automation-and-scripting","title":"Automation and Scripting","text":"<ul> <li>Examples: Web scraping, task automation, and browser automation.</li> <li>Details: JavaScript is used in automation tasks, such as web scraping and browser automation, often with tools like Puppeteer or Selenium. For example, you can automate form submissions, data extraction, or repetitive web tasks using JavaScript scripts.</li> </ul>"},{"location":"programming/programming-languages/javascript/#data-visualization","title":"Data Visualization","text":"<ul> <li>Examples: Interactive charts, graphs, and dashboards.</li> <li>Details: JavaScript is widely used for creating interactive data visualizations in the browser. Libraries like D3.js, Chart.js, and Plotly allow developers to create sophisticated visualizations like real-time dashboards, maps, and charts. For example, financial data dashboards and real-time analytics platforms often use JavaScript for visualization.</li> <li>D3 js repo - https://github.com/d3/d3</li> </ul>"},{"location":"programming/programming-languages/javascript/#artificial-intelligence-ai-and-machine-learning","title":"Artificial Intelligence (AI) and Machine Learning","text":"<ul> <li>Examples: Browser-based AI models, real-time face recognition, and machine learning in web apps.</li> <li>Details: JavaScript is increasingly used in AI and machine learning, particularly with TensorFlow.js, a library that allows models to be trained and run directly in the browser. For instance, web apps that perform real-time face recognition or sentiment analysis can be built using JavaScript.</li> </ul>"},{"location":"programming/programming-languages/javascript/#content-management-systems-cms","title":"Content Management Systems (CMS)","text":"<ul> <li>Examples: Plugins, themes, and dynamic content rendering.</li> <li>Details: JavaScript is used in many CMS platforms like WordPress, Drupal, and Joomla to add interactivity and dynamic content. Developers create plugins and themes that enhance the user experience and enable custom features.</li> </ul>"},{"location":"programming/programming-languages/javascript/#e-commerce-development","title":"E-commerce Development","text":"<ul> <li>Examples: Shopping carts, product galleries, and payment gateways.</li> <li>Details: JavaScript is integral to e-commerce sites for building interactive features like shopping carts, product filtering, and real-time inventory updates. Major e-commerce platforms like Shopify use JavaScript extensively on both the front end and back end.</li> </ul>"},{"location":"programming/programming-languages/javascript/#augmented-reality-ar-and-virtual-reality-vr","title":"Augmented Reality (AR) and Virtual Reality (VR)","text":"<ul> <li>Examples: Web-based AR/VR experiences, 3D models, and immersive environments.</li> <li>Details: JavaScript is used to create AR and VR experiences in the browser using frameworks like A-Frame, Three.js, and Babylon.js. For instance, you can build 3D models and immersive environments that users can interact with directly from their web browsers.</li> </ul>"},{"location":"programming/programming-languages/javascript/resources/","title":"Resources","text":""},{"location":"programming/programming-languages/javascript/resources/#documentation","title":"Documentation","text":"<ul> <li>https://developer.mozilla.org/en-US/</li> <li>https://javascript.info/</li> </ul>"},{"location":"programming/programming-languages/javascript/resources/#tutorials","title":"Tutorials","text":""},{"location":"programming/programming-languages/javascript/resources/#books","title":"Books","text":"<ul> <li>https://eloquentjavascript.net/</li> </ul>"},{"location":"programming/programming-languages/javascript/libraries/jquery/","title":"jQuery","text":"<ul> <li>A free and open-source javascript library which is basically used for   designing, traversing and manipulating the HTML DOM.</li> <li>A DOM is a tree-like structure used to represent the elements of a webpage.</li> <li>jQuery helps the designer to use javascript code easily for their websites.</li> <li>The advanced approach to jQuery enables to create powerful dynamic webpages   and web applications.</li> <li>The syntax of jQuery is designed to make things easy, such as:<ul> <li>Navigation of a document</li> <li>Selection of DOM elements</li> <li>Creating animations</li> <li>Handling events</li> <li>Developing Ajax applications.</li> </ul> </li> </ul> <p>jQuery is one of the widely used javascript library among all other libraries holding the following core features:</p> <ol> <li>DOM elements selection</li> <li>Traversal and manipulation which is enabled by Sizzle(the selector engine)</li> <li>Creating a new programming style</li> <li>Fusing DOM data structures and algorithms</li> </ol> <p>On the other hand, jQuery allows developers to create plug-ins on top of the JavaScript library. Developers can even create abstractions for low-level interaction and animations, too.</p>"},{"location":"programming/programming-languages/javascript/libraries/jquery/#different-ways-to-include-jquery-in-a-webpage","title":"Different ways to include jQuery in a Webpage","text":"<p>Basically, we know that jQuery comes with a lot of exciting features. So if we want to use those features, we just have to add the jQuery library to our webpage. There are two ways of adding jQuery library to our webpage.</p> <ul> <li>Include jQuery from CDN (Content Delivery Network)</li> <li>Download the jQuery library from the official website</li> </ul>"},{"location":"programming/programming-languages/javascript/libraries/jquery/#include-jquery-from-cdn-link","title":"Include jQuery from CDN Link","text":"<ul> <li>CDN stands for Content Delivery Network which is basically a set of servers   used for storing and delivering data.</li> <li>Basically, these jQuery library files are already uploaded to various CDNs and   we can use them directly on our web page.</li> <li>Then, we don't need to download any files on our local machine.   <code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"&gt;&lt;/script&gt;</code>   We can see the CDN link inside the <code>src</code> attribute.</li> <li>We have successfully added jQuery to our web page.</li> <li>We can use all the features of jQuery on our page.</li> <li>While loading the page, the browser will automatically download the jQuery   library files from the CDN link.</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;!-- jQuery library --&gt;\n    &lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;&lt;/p&gt;\n    &lt;script&gt;\n      $(\"p\").text(\"Hello geeks. CDN Working\");\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programming/programming-languages/javascript/libraries/jquery/#download-the-jquery-library","title":"Download the jQuery library","text":"<p>In this way, we will add jQuery library to our page. First, we will download the jQuery library files to our localhost from the jQuery Website. After downloading, we will add the downloaded files to our web page in this manner. <code>&lt;script src=\"file_name_with_full_path\"&gt;&lt;/script&gt;</code></p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;!-- jQuery library --&gt;\n    &lt;script src=\"jquery-3.6.0.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;p&gt;&lt;/p&gt;\n\n    &lt;script&gt;\n      $(\"p\").text(\"Hello geeks. Downloaded files\");\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programming/programming-languages/javascript/libraries/jquery/#jquery-syntax","title":"jQuery Syntax","text":"<p>The jQuery syntax is tailor-made for selecting HTML elements and performing some action on the element(s). Basic syntax is: $(selector).action()</p> <ul> <li>A <code>$</code> sign to define/access jQuery</li> <li>A <code>(selector)</code> to \"query (or find)\" HTML elements</li> <li>A jQuery <code>action()</code> to be performed on the element(s)</li> </ul> <p>Examples:</p> <ul> <li><code>$(this).hide()</code> - hides the current element.</li> <li><code>$(\"p\").hide()</code> - hides all <code>&lt;p&gt;</code> elements.</li> <li><code>$(\".test\").hide()</code> - hides all elements with <code>class=\"test\"</code>.</li> <li><code>$(\"#test\").hide()</code> - hides the element with <code>id=\"test\"</code>.</li> </ul>"},{"location":"programming/programming-languages/javascript/libraries/jquery/#the-document-ready-event","title":"The Document Ready Event","text":"<pre><code>$(document).ready(function () {\n  // jQuery methods go here...\n});\n</code></pre> <ul> <li>The <code>$(document).ready()</code> method allows us to execute a function when the   document is fully loaded.</li> <li>This is to prevent any jQuery code from running before the document is   finished loading (is ready).</li> <li>It is good practice to wait for the document to be fully loaded and ready   before working with it. This also allows you to have your JavaScript code   before the body of your document, in the head section.</li> </ul>"},{"location":"programming/programming-languages/javascript/libraries/jquery/#jquery-event-methods","title":"jQuery Event Methods","text":"<ul> <li><code>click()</code> The function is executed when the user clicks on the HTML element.</li> <li><code>dblclick()</code></li> <li><code>mouseenter()</code></li> <li><code>mouseleave()</code></li> <li><code>mousedown()</code></li> <li><code>mouseup()</code></li> <li><code>hover()</code> The hover() method takes two functions and is a combination of the   <code>mouseenter()</code> and <code>mouseleave()</code> methods.</li> <li><code>focus()</code></li> <li><code>blur()</code></li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n      $(document).ready(function () {\n        $(\"#hide\").click(function () {\n          $(\"p\").hide();\n        });\n        $(\"#show\").click(function () {\n          $(\"p\").show();\n        });\n      });\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;If you click on the \"Hide\" button, I will disappear.&lt;/p&gt;\n    &lt;button id=\"hide\"&gt;Hide&lt;/button&gt;\n    &lt;button id=\"show\"&gt;Show&lt;/button&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n$(document).ready(function(){\n  $(\"#p1\").mouseenter(function(){\n     $(\"p\").hide();\n  });\n\n   $(\"#p1\").mouseleave(function(){\n    $(\"p\").show();\n  });\n });\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p id=\"p1\"&gt;Hello Welcome to jquery program&lt;/p&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n      $(document).ready(function () {\n        $(\"input\").focus(function () {\n          $(this).css(\"background-color\", \"yellow\");\n        });\n        $(\"input\").blur(function () {\n          $(this).css(\"background-color\", \"green\");\n        });\n      });\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    Name: &lt;input type=\"text\" name=\"fullname\" /&gt;&lt;br /&gt;\n    Email: &lt;input type=\"text\" name=\"email\" /&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programming/programming-languages/javascript/summary/javascript/","title":"java script","text":"<ul> <li>run on browsers</li> <li>can run on servers through Node.js<ul> <li>a project that provides standalone runtime for Google Chrome's V8 js engine</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/javascript/summary/javascript/#properties-of-js","title":"properties of js","text":"<ul> <li>java script is dynamic typed</li> <li>and weakly typed</li> </ul>"},{"location":"programming/programming-languages/javascript/summary/javascript/#js-types","title":"js types","text":"<ul> <li>numbers<ul> <li>only one type of numbers - that is 64 bit IEE 754 double</li> <li>Infinity = 1/0</li> <li>-Infinty = -1/0</li> <li>NaN - 0/0</li> </ul> </li> <li>boolean<ul> <li>true</li> <li>false</li> </ul> </li> <li>strings<ul> <li>'abs'</li> <li>\"abs\"</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/javascript/summary/javascript/#operators","title":"operators","text":"<ul> <li>addtion +<ul> <li>subtration -</li> <li>divison /</li> <li>multiplication *</li> <li>modulus %</li> <li>bitwise left shift &lt;&lt;</li> </ul> </li> <li>equality ==</li> </ul>"},{"location":"programming/programming-languages/javascript/summary/javascript/#callback-function","title":"callback function","text":"<ul> <li><code>map()</code> and <code>filter()</code></li> <li><code>slice()</code> and <code>splice()</code></li> <li><code>concat()</code></li> <li><code>find()</code> and <code>findIndex()</code></li> <li>destruction<ul> <li>unpacking (assigning) values from arrays or object properties directly into variables</li> </ul> </li> <li>rest and spread operator<ul> <li>rest parameter enables us to pass unspecified number of parameter to a function which will be placed into array, while the spread content of a iterable into individual elements</li> </ul> </li> <li>promises<ul> <li>handle asynchronous operations,</li> <li>pending</li> <li>fulfilled</li> <li>rejected</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/javascript/summary/js-regex/","title":"regex","text":""},{"location":"programming/programming-languages/javascript/summary/js-regex/#regex-object","title":"regex object","text":"<ul> <li><code>let pattern = /w3schools/i;</code></li> </ul>"},{"location":"programming/programming-languages/javascript/summary/js-regex/#modifiers","title":"modifiers","text":"<ul> <li><code>g</code> Perform a global match (find all matches rather than stopping after the   first match)</li> <li><code>i</code> Perform case-insensitive matching</li> <li><code>m</code> Perform multiline matching</li> </ul>"},{"location":"programming/programming-languages/javascript/summary/js-regex/#brackets","title":"Brackets","text":"<ul> <li><code>[abc]</code> Find any character between the brackets</li> <li><code>[^abc]</code> Find any character NOT between the brackets</li> <li><code>[0-9]</code> Find any character between the brackets (any digit)</li> <li><code>[^0-9]</code> Find any character NOT between the brackets (any non-digit)</li> <li><code>(x|y)</code> Find any of the alternatives specified</li> </ul>"},{"location":"programming/programming-languages/javascript/summary/js-regex/#metacharacters","title":"Metacharacters","text":"<ul> <li><code>.</code> Find a single character, except newline or line terminator</li> <li><code>\\w</code> Find a word character</li> <li><code>\\W</code> Find a non-word character</li> <li><code>\\d</code> Find a digit</li> <li><code>\\D</code> Find a non-digit character</li> <li><code>\\s</code> Find a whitespace character</li> <li><code>\\S</code> Find a non-whitespace character</li> <li><code>\\b</code> Find a match at the beginning/end of a word, beginning like this: \\bHI,   end like this: HI\\b</li> <li><code>\\B</code> Find a match, but not at the beginning/end of a word</li> <li><code>\\0</code> Find a NULL character</li> <li><code>\\n</code> Find a new line character</li> <li><code>\\f</code> Find a form feed character</li> <li><code>\\r</code> Find a carriage return character</li> <li><code>\\t</code> Find a tab character</li> <li><code>\\v</code> Find a vertical tab character</li> <li><code>\\xxx</code> Find the character specified by an octal number xxx</li> <li><code>\\xdd</code> Find the character specified by a hexadecimal number dd</li> <li><code>\\udddd</code> Find the Unicode character specified by a hexadecimal number dddd</li> </ul>"},{"location":"programming/programming-languages/javascript/summary/js-regex/#quantifiers","title":"Quantifiers","text":"<ul> <li><code>n+</code> Matches any string that contains at least one n</li> <li><code>n*</code> Matches any string that contains zero or more occurrences of n</li> <li><code>n?</code> Matches any string that contains zero or one occurrences of n</li> <li><code>n{X}</code> Matches any string that contains a sequence of X n's</li> <li><code>n{X,Y}</code> Matches any string that contains a sequence of X to Y n's</li> <li><code>n{X,}</code> Matches any string that contains a sequence of at least X n's</li> <li><code>n$</code> Matches any string with n at the end of it</li> <li><code>^n</code> Matches any string with n at the beginning of it</li> <li><code>?=n</code> Matches any string that is followed by a specific string n</li> <li><code>?!n</code> Matches any string that is not followed by a specific string n</li> </ul>"},{"location":"programming/programming-languages/javascript/summary/js-regex/#regex-methods","title":"RegEx methods","text":"<ul> <li><code>exec()</code> Tests for a match in a string. Returns the first match</li> <li><code>test()</code> Tests for a match in a string. Returns true or false</li> <li><code>toString()</code> Returns the string value of the regular expression</li> </ul>"},{"location":"programming/programming-languages/javascript/summary/js/","title":"Java Script","text":""},{"location":"programming/programming-languages/javascript/summary/js/#basics","title":"Basics","text":"<ul> <li>end with semicolon - not necessary</li> </ul>"},{"location":"programming/programming-languages/javascript/summary/js/#numbers-string-and-operators","title":"Numbers, string and operators","text":"<ul> <li>only one number type - ieee 754 double<ul> <li><code>1</code>, <code>1.111</code>, <code>1e1</code></li> </ul> </li> <li>and have strings, no character, character are string with length 1<ul> <li><code>\"hi\"</code> <code>'hi'</code></li> </ul> </li> <li>also a boolean type - <code>true</code> <code>false</code></li> </ul>"},{"location":"programming/programming-languages/javascript/summary/js/#operations","title":"Operations","text":"<ul> <li>addition <code>+</code></li> <li>multiplication <code>*</code></li> <li>...</li> <li> <p>left shift <code>&lt;&lt;</code></p> </li> <li> <p>not <code>!</code></p> </li> <li>not equal <code>!==</code></li> <li>equal <code>===</code></li> <li>less than <code>&lt;</code></li> <li>greater than <code>&gt;</code></li> <li><code>&lt;=</code></li> <li> <p><code>&gt;=</code></p> </li> <li> <p><code>==</code> type coercion is performed</p> <ul> <li><code>\"5\" == 5</code> true</li> <li><code>null == undefined</code> true</li> </ul> </li> <li> <p>three special not-a-real-number</p> <ul> <li><code>Infinity</code> <code>1/0</code></li> <li><code>-Infinity</code> <code>-1/0</code></li> <li><code>NaN</code> - not a number <code>0/0</code></li> </ul> </li> </ul>"},{"location":"programming/programming-languages/javascript/summary/js/#stings","title":"Stings","text":"<p><code>s = \"This is a string</code></p> <ul> <li><code>s.charAt(0)</code> - <code>'T'</code></li> <li><code>s.substring(0, 5)</code> - <code>\"This \"</code></li> <li><code>s.length</code> <code>16</code></li> </ul>"},{"location":"programming/programming-languages/javascript/summary/js/#null-undefined","title":"<code>null</code> <code>undefined</code>","text":"<ul> <li><code>null</code> - indicate a deliberate non value</li> <li><code>undefined</code> - value not set, but it is a value itself</li> </ul>"},{"location":"programming/programming-languages/javascript/summary/js/#what-is-falsy","title":"what is <code>falsy</code>","text":"<ul> <li><code>false</code></li> <li><code>null</code></li> <li><code>undefined</code></li> <li><code>NaN</code></li> <li><code>0</code></li> </ul> <p>other are true, even <code>\"0\"</code> is true</p>"},{"location":"programming/programming-languages/javascript/summary/js/#variable","title":"Variable","text":"<ul> <li><code>var</code><ul> <li>scope global or within the function</li> <li>can be redeclare</li> <li>hoisted to top and set to <code>undefined</code></li> </ul> </li> <li><code>let</code><ul> <li>block scoped</li> <li>can be update but not re-declared</li> <li>hoisted to top but not initialized, so if you use them without defining you will get <code>Reference Error</code></li> </ul> </li> <li><code>const</code><ul> <li>block scoped</li> <li>can't be updated and re-declared</li> <li>hoisted to top but not initialized</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/javascript/summary/js/#arrays","title":"Arrays","text":"<pre><code>var array = [\"hi\", \"a\", true]\narray[1] = 45\n</code></pre> <ul> <li><code>.push()</code> - add element to last</li> <li><code>.pop()</code> - remove element from last and return it</li> <li><code>.shift()</code> - remove first element and return it</li> <li><code>.unshift()</code> - add a element to front</li> </ul>"},{"location":"programming/programming-languages/javascript/summary/js/#join","title":"<code>.join()</code>","text":"<ul> <li>join elements with some separator</li> </ul> <pre><code>arr = [1,2,3];\narr.join(';'); // \"1;2;3\"\n</code></pre>"},{"location":"programming/programming-languages/javascript/summary/js/#slice","title":"<code>.slice()</code>","text":"<p>Get some part form array, <code>arr.slice(start, end+1)</code>.</p> <pre><code>arr.splice(1,3);\n</code></pre>"},{"location":"programming/programming-languages/javascript/summary/js/#objects","title":"Objects","text":"<ul> <li>equivalent to map, dictionaries in other languages</li> </ul> <pre><code>var myobj = {mykey: \"myvalue\", \"my other key\": 4}\n\n// how to access values\nmyobj['my other key']; // 4\nmyobj.mykey; // \"myvalue\"\n</code></pre> <ul> <li>objects are mutable</li> </ul> <pre><code>// add another attribute\nmyobj.color = \"red\"\n</code></pre>"},{"location":"programming/programming-languages/javascript/summary/js/#conditionals-and-iterations","title":"Conditionals and Iterations","text":""},{"location":"programming/programming-languages/javascript/summary/js/#if-else","title":"if-else","text":"<pre><code>var count = 1;\nif (count == 3){\n    // evaluated if count is 3\n} else if (count == 4){\n    // evaluated if count is 4\n} else {\n    // evaluated if it's not either 3 or 4\n}\n</code></pre>"},{"location":"programming/programming-languages/javascript/summary/js/#while","title":"while","text":"<pre><code>// As does `while`.\nwhile (true){\n    // An infinite loop!\n}\n</code></pre>"},{"location":"programming/programming-languages/javascript/summary/js/#do-while","title":"do while","text":"<pre><code>var input;\ndo {\n    input = getInput();\n} while (!isValid(input));\n</code></pre>"},{"location":"programming/programming-languages/javascript/summary/js/#for","title":"for","text":"<pre><code>for (var i = 0; i &lt; 5; i++){\n    // will run 5 times\n}\n</code></pre> <pre><code>// Breaking out of labeled loops is similar to Java\nouter:\nfor (var i = 0; i &lt; 10; i++) {\n    for (var j = 0; j &lt; 10; j++) {\n        if (i == 5 &amp;&amp; j ==5) {\n            break outer;\n            // breaks out of outer loop instead of only the inner one\n        }\n    }\n}\n</code></pre>"},{"location":"programming/programming-languages/javascript/summary/js/#for-in-objects","title":"for in - objects","text":"<pre><code>// The for/in statement allows iteration over properties of an object.\nvar description = \"\";\nvar person = {fname:\"Paul\", lname:\"Ken\", age:18};\nfor (var x in person){\n    description += person[x] + \" \";\n} // description = 'Paul Ken 18 '\n</code></pre>"},{"location":"programming/programming-languages/javascript/summary/js/#for-of-iterables","title":"for of - iterables","text":"<pre><code>// The for/of statement allows iteration over iterable objects (including the built-in String, \n// Array, e.g. the Array-like arguments or NodeList objects, TypedArray, Map and Set, \n// and user-defined iterables).\nvar myPets = \"\";\nvar pets = [\"cat\", \"dog\", \"hamster\", \"hedgehog\"];\nfor (var pet of pets){\n    myPets += pet + \" \";\n} // myPets = 'cat dog hamster hedgehog '\n</code></pre>"},{"location":"programming/programming-languages/javascript/summary/js/#case","title":"case","text":"<pre><code>grade = 'B';\nswitch (grade) {\n  case 'A':\n    console.log(\"Great job\");\n    break;\n  case 'B':\n    console.log(\"OK job\");\n    break;\n  case 'C':\n    console.log(\"You can do better\");\n    break;\n  default:\n    console.log(\"Oy vey\");\n    break;\n}\n</code></pre>"},{"location":"programming/programming-languages/javascript/summary/js/#functions","title":"Functions","text":"<pre><code>function myFunction(thing){\n    return thing.toUpperCase();\n}\nmyFunction(\"foo\"); // = \"FOO\"\n</code></pre>"},{"location":"programming/programming-languages/javascript/summary/json/","title":"json","text":"<ul> <li>JSON or JavaScript Object Notation</li> <li>is a lightweight text-based open standard designed for human-readable data   interchange. Conventions used by JSON are known to programmers, which include   C, C++, Java, Python, Perl, etc.</li> <li>It was designed for human-readable data interchange.</li> <li>It has been extended from the JavaScript scripting language.</li> <li>The filename extension is <code>.json</code>.</li> <li>JSON Internet Media type is application/json.</li> <li>The Uniform Type Identifier is <code>public.json</code>.</li> </ul>"},{"location":"programming/programming-languages/javascript/summary/json/#uses-of-json","title":"Uses of JSON","text":"<ul> <li>It is used while writing JavaScript based applications that includes browser   extensions and websites.</li> <li>JSON format is used for serializing and transmitting structured data over   network connection.</li> <li>It is primarily used to transmit data between a server and web applications.</li> <li>Web services and APIs use JSON format to provide public data.</li> <li>It can be used with modern programming languages.</li> </ul>"},{"location":"programming/programming-languages/javascript/summary/json/#characteristics-of-json","title":"Characteristics of JSON","text":"<ul> <li>JSON is easy to read and write.</li> <li>It is a lightweight text-based interchange format.</li> <li>JSON is language independent. Simple Example in JSON The following example   shows how to use JSON to store information related to books based on their   topic and edition.</li> </ul> <pre><code>{\n  \"book\": [\n    {\n      \"id\": \"01\",\n      \"language\": \"Java\",\n      \"edition\": \"third\",\n      \"author\": \"Herbert Schildt\"\n    },\n    {\n      \"id\": \"07\",\n      \"language\": \"C++\",\n      \"edition\": \"second\",\n      \"author\": \"E.Balagurusamy\"\n    }\n  ]\n}\n</code></pre> <pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;JSON example&lt;/title&gt;\n    &lt;script language=\"javascript\"&gt;\n      var object1 = { language: \"Java\", author: \"herbert schildt\" };\n      document.write(\"&lt;h1&gt;JSON with JavaScript example&lt;/h1&gt;\");\n      document.write(\"&lt;br&gt;\");\n      document.write(\"&lt;h3&gt;Language = \" + object1.language + \"&lt;/h3&gt;\");\n      document.write(\"&lt;h3&gt;Author = \" + object1.author + \"&lt;/h3&gt;\");\n\n      var object2 = { language: \"C++\", author: \"E-Balagurusamy\" };\n      document.write(\"&lt;br&gt;\");\n      document.write(\"&lt;h3&gt;Language = \" + object2.language + \"&lt;/h3&gt;\");\n      document.write(\"&lt;h3&gt;Author = \" + object2.author + \"&lt;/h3&gt;\");\n\n      document.write(\"&lt;hr /&gt;\");\n      document.write(\n        object2.language +\n          \" programming language can be studied \" +\n          \"from book written by \" +\n          object2.author\n      );\n      document.write(\"&lt;hr /&gt;\");\n    &lt;/script&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programming/programming-languages/javascript/summary/overview/","title":"Javascript Overview","text":""},{"location":"programming/programming-languages/javascript/summary/overview/#eveything-is-an-object","title":"Eveything is an Object","text":"<p>In JavaScript, almost everything is an object or can behave like an object in certain contexts. However, there are a few exceptions. The following are some things that are not objects in JavaScript:</p> <ol> <li>Primitive data types: JavaScript has six primitive data types, which are not objects:</li> <li><code>undefined</code></li> <li><code>null</code></li> <li><code>boolean</code></li> <li><code>number</code></li> <li><code>string</code></li> <li><code>symbol</code></li> </ol> <p>Although these values are not objects themselves, JavaScript automatically coerces them to their respective object wrapper types (<code>Boolean</code>, <code>Number</code>, <code>String</code>, <code>Symbol</code>) when you try to access properties or methods on them. These object wrapper types have prototype objects and can behave like objects in certain situations.</p> <ol> <li> <p>Functions (as a subtype of objects): While functions are objects in JavaScript, they have some unique characteristics and additional functionality compared to regular objects. Functions can have executable code and can be invoked. They also have a <code>prototype</code> property for establishing the prototype chain.</p> </li> <li> <p>Arrays: Arrays in JavaScript are objects with additional behavior and properties specific to handling ordered collections of data. Although they have numeric indices and offer array-specific methods, they are still objects.</p> </li> <li> <p>Primitives assigned to variables: When you assign a primitive value to a variable, such as <code>const x = 5;</code>, the variable itself is not an object. It is simply a reference to the primitive value.</p> </li> </ol> <p>It's worth noting that JavaScript provides object wrapper types (e.g., <code>Boolean</code>, <code>Number</code>, <code>String</code>, <code>Symbol</code>) to wrap primitive values temporarily and allow access to object-like features. However, these wrapper types are automatically created and managed by JavaScript behind the scenes and are not typically used directly by developers.</p> <p>In general, JavaScript is designed to treat most entities as objects or provide object-like behavior, even if they are not technically objects. This approach allows for a more consistent and unified programming model in the language.</p>"},{"location":"programming/programming-languages/javascript/summary/overview/#prototype-based-inheritance-and-not-class-based-inheritance","title":"Prototype based inheritance and not class based inheritance","text":"<p>Class-based inheritance is often considered more intuitive and easier to understand compared to prototype-based inheritance, especially for developers who are accustomed to class-based object-oriented languages.</p> <p>Prototype-based inheritance in JavaScript can indeed be perceived as more confusing due to its syntax and the need to manually set up the prototype chain. It requires working with constructor functions, explicitly manipulating prototypes, and understanding how the <code>new</code> keyword, <code>Object.create()</code>, and <code>Object.prototype</code> relate to each other.</p> <p>The <code>class</code> keyword introduced in ECMAScript 2015 (ES6) helps address this confusion by providing a cleaner and more structured syntax for working with objects and inheritance. It offers a more familiar class-based approach that aligns with other popular programming languages.</p> <p>With the <code>class</code> keyword, you can define classes, create instances using the <code>new</code> keyword, use constructor methods for initialization, define methods directly within the class, and easily establish inheritance using the <code>extends</code> keyword.</p> <p>Here's an example of the code using the <code>class</code> syntax:</p> <pre><code>class Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n\n  sayHello() {\n    console.log(\"Hello, my name is \" + this.name);\n  }\n}\n\nclass Student extends Person {\n  constructor(name, age, major) {\n    super(name, age);\n    this.major = major;\n  }\n}\n\nconst john = new Student(\"John\", 20, \"Computer Science\");\njohn.sayHello(); // Output: \"Hello, my name is John\"\n</code></pre> <p>As you can see, the <code>class</code> syntax provides a more straightforward and concise way to define and work with objects and inheritance, making it easier to grasp and maintain code.</p>"},{"location":"programming/programming-languages/javascript/summary/overview/#memory-management-and-garbage-collection","title":"Memory management and garbage collection","text":"<p>Javascript uses garabage collectors to manage memory. You cannot remove a object from memory on your own, and even if you think you can it is not deterministic. A object is removed from memory by garbage collector when there is no reference to that object.</p> <p>There are keywords like <code>delete</code> which removes reference of a object form a variable, but if some other variable reference the object it will not be removed.</p>"},{"location":"programming/programming-languages/javascript/summary/overview/#how-to-create-objects","title":"How to create objects?","text":"<p>In JavaScript, there are several ways to create objects. Here are the most common methods:</p> <ol> <li>Object Literal: Creating an object using object literal notation by enclosing key-value pairs in curly braces <code>{}</code>.</li> </ol> <pre><code>const obj = { key1: value1, key2: value2 };\n</code></pre> <ol> <li>Constructor Function: Defining a constructor function and creating objects using the <code>new</code> keyword.</li> </ol> <pre><code>function MyClass(param1, param2) {\n  this.property1 = param1;\n  this.property2 = param2;\n}\n\nconst obj = new MyClass(value1, value2);\n</code></pre> <ol> <li>ES6 Class: Using the <code>class</code> syntax introduced in ECMAScript 2015 (ES6) to define a class and create objects using the <code>new</code> keyword.</li> </ol> <pre><code>class MyClass {\n  constructor(param1, param2) {\n    this.property1 = param1;\n    this.property2 = param2;\n  }\n}\n\nconst obj = new MyClass(value1, value2);\n</code></pre> <ol> <li>Object.create: Creating an object with a specified prototype object using <code>Object.create()</code>.</li> </ol> <pre><code>const protoObj = { property1: value1, property2: value2 };\nconst obj = Object.create(protoObj);\n</code></pre> <ol> <li>Factory Functions: Creating objects using factory functions that return new objects.</li> </ol> <pre><code>function createObject(param1, param2) {\n  return { property1: param1, property2: param2 };\n}\n\nconst obj = createObject(value1, value2);\n</code></pre> <ol> <li>Object Constructor: Using the <code>Object</code> constructor to create an empty object or clone an existing object.</li> </ol> <pre><code>const obj1 = new Object(); // Empty object\nconst obj2 = new Object(obj1); // Clone obj1\n</code></pre> <p>These are some of the commonly used methods to create objects in JavaScript. Each method has its own use case and advantages depending on the specific requirements of your code.</p>"},{"location":"programming/programming-languages/javascript/summary/overview/#how-the-new-keyword-work","title":"How the <code>new</code> keyword work?","text":"<p>The <code>new</code> keyword in JavaScript is used to create an instance of an object from a constructor function or a class. When used with a constructor function, it performs the following steps:</p> <ol> <li>Creates a new empty object.</li> <li>Binds the newly created object as the <code>this</code> value for the constructor function.</li> <li>Sets up the prototype chain of the new object to link to the prototype of the constructor function.</li> <li>Executes the constructor function with the newly created object as the context (<code>this</code>).</li> <li>Returns the newly created object unless the constructor function explicitly returns another object.</li> </ol> <p>Here's an example that demonstrates the use of the <code>new</code> keyword with a constructor function:</p> <pre><code>function Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nconst john = new Person(\"John\", 25);\nconsole.log(john.name); // Output: \"John\"\nconsole.log(john.age); // Output: 25\n</code></pre> <p>In the example, the <code>Person</code> function acts as a constructor function for creating <code>Person</code> objects. When <code>new Person(\"John\", 25)</code> is called, the <code>new</code> keyword creates a new object and sets it as the <code>this</code> value within the <code>Person</code> constructor function. The properties <code>name</code> and <code>age</code> are then assigned to the new object.</p> <p>The <code>new</code> keyword allows you to create instances of objects from constructor functions, which helps in implementing object-oriented patterns and creating multiple objects with similar properties and behaviors. It simplifies the process of creating and initializing objects by automating the steps outlined above.</p>"},{"location":"programming/programming-languages/javascript/summary/overview/#promises","title":"promises","text":"<p>Promises in JavaScript are a way to handle asynchronous operations and manage the resulting values or errors. They provide a cleaner and more structured approach compared to traditional callback-based approaches.</p> <p>A promise represents the eventual completion or failure of an asynchronous operation and can be in one of three states:</p> <ol> <li>Pending: The initial state. The promise is neither fulfilled nor rejected.</li> <li>Fulfilled: The asynchronous operation completed successfully, and the promise is fulfilled with a value.</li> <li>Rejected: The asynchronous operation encountered an error or exception, and the promise is rejected with a reason or error.</li> </ol> <p>Promises have the following characteristics:</p> <ol> <li>Chaining: Promises can be chained together using <code>.then()</code> to handle the fulfilled state or <code>.catch()</code> to handle the rejected state. This allows for sequential execution and error handling.</li> </ol> <pre><code>asyncTask()\n  .then(result =&gt; {\n    // Handle the fulfilled state\n  })\n  .catch(error =&gt; {\n    // Handle the rejected state\n  });\n</code></pre> <ol> <li>Asynchronous Execution: Promises enable writing asynchronous code that appears more synchronous and easier to understand. They help avoid callback hell, where multiple nested callbacks become difficult to manage.</li> </ol> <pre><code>doAsyncTask()\n  .then(result =&gt; {\n    return doAnotherAsyncTask(result);\n  })\n  .then(finalResult =&gt; {\n    // Handle the final result\n  })\n  .catch(error =&gt; {\n    // Handle any error that occurred during the promise chain\n  });\n</code></pre> <ol> <li>Error Handling: Promises provide a consistent way to handle errors. Errors can be propagated through the promise chain, allowing them to be caught and handled at an appropriate level.</li> </ol> <pre><code>doAsyncTask()\n  .then(result =&gt; {\n    if (result === null) {\n      throw new Error(\"Invalid result\");\n    }\n    return result;\n  })\n  .catch(error =&gt; {\n    // Handle any error that occurred during the promise chain\n  });\n</code></pre> <ol> <li>Promise Composition: Promises can be composed using methods like <code>Promise.all()</code> and <code>Promise.race()</code>. <code>Promise.all()</code> waits for all promises to fulfill or any to reject, while <code>Promise.race()</code> returns a new promise that fulfills or rejects as soon as one of the promises settles.</li> </ol> <pre><code>const promise1 = someAsyncTask1();\nconst promise2 = someAsyncTask2();\nconst promise3 = someAsyncTask3();\n\nPromise.all([promise1, promise2, promise3])\n  .then(results =&gt; {\n    // Handle the results when all promises fulfill\n  })\n  .catch(error =&gt; {\n    // Handle any error from any of the promises\n  });\n</code></pre> <p>Promises are widely used in modern JavaScript to handle asynchronous operations such as AJAX requests, fetching data from APIs, reading files, and more. They provide a cleaner and more structured way to deal with asynchronous code and help avoid callback-related issues.</p>"},{"location":"programming/programming-languages/javascript/summary/overview/#ajax","title":"ajax","text":"<p>AJAX (Asynchronous JavaScript and XML) is a technique used in web development to make asynchronous requests to a server from a web page without reloading the entire page. It allows for updating parts of a web page dynamically, retrieving data from a server, and sending data to a server in the background.</p> <p>The key components of AJAX are:</p> <ol> <li> <p>Asynchronous: AJAX requests are handled asynchronously, meaning that the web page does not wait for the server response before continuing to execute other code or interacting with the user.</p> </li> <li> <p>JavaScript: AJAX relies on JavaScript to initiate and handle the asynchronous requests. It uses JavaScript's built-in <code>XMLHttpRequest</code> object or the newer <code>fetch()</code> function to send HTTP requests to the server.</p> </li> <li> <p>XML or JSON: Although the name \"XML\" is part of AJAX, it is not limited to XML data. Most commonly, data is exchanged in JSON (JavaScript Object Notation) format, which is a lightweight data interchange format. However, AJAX can work with any text-based data format.</p> </li> </ol> <p>AJAX is used to perform various tasks on a web page, including:</p> <ul> <li>Loading data from a server and updating parts of the web page without refreshing the entire page.</li> <li>Submitting form data to a server in the background and receiving a response.</li> <li>Fetching data from an API and displaying it on the web page.</li> <li>Implementing autocomplete or live search functionality.</li> <li>Updating the content of a web page based on user interactions.</li> </ul> <p>Here's a basic example of an AJAX request using JavaScript's <code>XMLHttpRequest</code>:</p> <pre><code>const xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://api.example.com/data', true);\nxhr.onreadystatechange = function() {\n  if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) {\n    const response = JSON.parse(xhr.responseText);\n    // Process the response data\n  }\n};\nxhr.send();\n</code></pre> <p>This example demonstrates a GET request to retrieve data from the URL <code>'https://api.example.com/data'</code>. The response from the server is handled asynchronously in the <code>onreadystatechange</code> event handler, where you can process the response as needed.</p> <p>Same example using <code>fetch()</code> function:</p> <pre><code>fetch('https://api.example.com/data')\n  .then(response =&gt; {\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error('Network response was not ok.');\n  })\n  .then(data =&gt; {\n    // Process the response data\n  })\n  .catch(error =&gt; {\n    // Handle any error that occurred during the request\n  });\n</code></pre> <p>Overall, AJAX is a fundamental technique in modern web development that allows for dynamic, asynchronous communication between web pages and servers, enhancing the user experience and enabling more interactive and responsive web applications.</p>"},{"location":"programming/programming-languages/javascript/summary/overview/#closures","title":"Closures","text":"<p>A closure in JavaScript is a combination of a function and the lexical environment in which it was declared. It allows the function to access and remember variables and functions from its outer scope, even after the outer function has finished executing or its reference has been removed.</p> <p>In other words, a closure is a mechanism that enables a function to retain access to variables and parameters from its parent scope, even when that parent scope is no longer active or accessible. It essentially \"closes over\" the variables it needs, creating a self-contained environment for execution.</p> <p>Closures are created whenever a function is defined within another function, and the inner function references variables or functions from the outer function. The inner function forms a closure, capturing the entire state of the outer function's scope at the time of its creation.</p> <p>Closures are powerful in JavaScript as they allow for encapsulation, data privacy, and the creation of function factories or partially applied functions. They play a crucial role in providing a way to maintain access to variables in an otherwise inaccessible scope.</p> <p>In JavaScript, closures are formed by the scope chain, which includes the parent scope and all the way up to the global scope. The scope chain is determined by the nested structure of functions.</p> <p>Closures can extend beyond just the immediate parent scope. They can capture and retain access to variables from multiple levels of nested functions, as long as those variables are referenced by functions within the nested structure.</p>"},{"location":"programming/programming-languages/javascript/summary/this/","title":"<code>this</code> keyword","text":"<p>The keyword <code>this</code> inside a function refers to the current execution context or the object that the function is being called on.</p> <p>In JavaScript, the value of <code>this</code> is determined dynamically at runtime, based on how the function is invoked. Its value can vary depending on the context in which the function is called.</p> <p>Here are a few common scenarios:</p> <ol> <li>Global Scope:</li> <li> <p>If a function is called in the global scope (outside of any object), <code>this</code> refers to the global object, which is <code>window</code> in a browser environment or <code>global</code> in Node.js.</p> </li> <li> <p>Object Method:</p> </li> <li> <p>When a function is called as a method of an object, <code>this</code> refers to the object itself. It allows the function to access and manipulate the object's properties and methods.</p> </li> <li> <p>Constructor Function:</p> </li> <li> <p>Inside a constructor function, <code>this</code> refers to the newly created instance of the object being constructed. It allows the constructor function to set properties and behavior on the newly created object.</p> </li> <li> <p>Event Handlers:</p> </li> <li>When a function is used as an event handler, <code>this</code> typically refers to the element that triggered the event.</li> </ol> <p>It's important to note that the value of <code>this</code> is not lexically scoped like regular variables. It is dynamically determined each time a function is called.</p> <p>To summarize, <code>this</code> provides a way to refer to the current object or context within a function, allowing you to access and manipulate properties and behavior associated with that object.</p>"},{"location":"programming/programming-languages/julia/","title":"Julia","text":""},{"location":"programming/programming-languages/julia/#outline","title":"Outline","text":"<ul> <li>todo</li> </ul>"},{"location":"programming/programming-languages/julia/#resources","title":"Resources","text":"<ul> <li>welcome - https://www.youtube.com/watch?v=AXgLWumAOhk</li> <li>data - https://www.youtube.com/watch?v=iG1dZBaxS-U</li> <li>https://github.com/JuliaAcademy/DataScience</li> <li>https://github.com/JuliaAcademy/JuliaTutorials</li> <li>https://github.com/Datseris/Zero2Hero-JuliaWorkshop</li> </ul>"},{"location":"programming/programming-languages/julia/resources/","title":"Julia","text":""},{"location":"programming/programming-languages/julia/resources/#documentation","title":"Documentation","text":"<ul> <li>https://docs.julialang.org/en/v1/</li> <li>https://docs.julialang.org/en/v1/manual/documentation/</li> </ul>"},{"location":"programming/programming-languages/lisp/","title":"LISP","text":"<ul> <li>LISP is a family of programming language, which uses fully parenthesized prefix notation.</li> <li>https://en.wikipedia.org/wiki/Lisp_(programming_language)</li> </ul> <p>Lisp is one of the oldest programming languages, known for its unique parenthetical syntax and its powerful features for symbolic computation, recursion, and rapid prototyping. It has influenced many other programming languages and is still used in various specialized areas today.</p> <ul> <li> <p>Artificial Intelligence (AI)</p> <ul> <li>Examples: Expert systems, natural language processing, and symbolic reasoning.</li> <li>Details: Lisp has a long history in AI research and development due to its flexibility and support for symbolic computation. For example, the early AI program \"ELIZA,\" a simple natural language processing chatbot, was written in Lisp. The Cyc project, a large-scale AI system for knowledge representation, also uses Lisp.</li> </ul> </li> <li> <p>Rapid Prototyping</p> <ul> <li>Examples: Prototype-based systems, research tools, and experimental software.</li> <li>Details: Lisp's interactive development environment and dynamic typing make it ideal for rapid prototyping. Researchers often use Lisp to quickly build and test new algorithms, models, or systems before implementing them in other languages.</li> </ul> </li> <li> <p>Symbolic Computation and Mathematical Applications</p> <ul> <li>Examples: Computer algebra systems, symbolic differentiation, and theorem proving.</li> <li>Details: Lisp is well-suited for symbolic mathematics, where expressions are manipulated as symbols rather than evaluated numerically. For example, the computer algebra system Maxima, which handles symbolic differentiation and integration, is written in Lisp.</li> </ul> </li> <li> <p>Domain-Specific Languages (DSLs)</p> <ul> <li>Examples: Custom scripting languages, configuration languages, and macro systems.</li> <li>Details: Lisp's macro system allows developers to create powerful DSLs tailored to specific tasks. For example, Emacs Lisp is a dialect of Lisp used to extend and customize the Emacs text editor, allowing users to create custom commands, modes, and automation scripts.</li> </ul> </li> <li> <p>Education</p> <ul> <li>Examples: Teaching programming concepts, recursion, and functional programming.</li> <li>Details: Lisp is often used in educational settings to teach fundamental programming concepts, particularly recursion and functional programming. The book \"Structure and Interpretation of Computer Programs\" (SICP), which uses Scheme (a Lisp dialect), is a classic textbook in computer science education.</li> </ul> </li> <li> <p>Emacs Text Editor</p> <ul> <li>Examples: Text editing, IDE customization, and task automation.</li> <li>Details: GNU Emacs, a highly extensible text editor, is almost entirely written in Emacs Lisp. Users and developers can extend and customize Emacs by writing Emacs Lisp scripts to add new functionality, automate tasks, and create custom workflows.</li> </ul> </li> <li> <p>Metaprogramming</p> <ul> <li>Examples: Code generation, transformation systems, and compiler construction.</li> <li>Details: Lisp's macro system allows for powerful metaprogramming, where code can generate and manipulate other code. This feature is often used in compilers and interpreters to perform code transformations and optimizations.</li> </ul> </li> <li> <p>Robotics</p> <ul> <li>Examples: Robot control systems, AI-driven robotics, and simulation environments.</li> <li>Details: Lisp is used in robotics for tasks that require symbolic reasoning and AI, such as planning and decision-making. For example, the \"ROBOT\" programming language, based on Lisp, was developed for robot control systems.</li> </ul> </li> <li> <p>Web Development (Historically)</p> <ul> <li>Examples: Early web applications, dynamic content generation.</li> <li>Details: Lisp was used in early web development frameworks, such as \"CL-HTTP,\" one of the first web servers written in Common Lisp. Although less common today, Lisp was used to create dynamic content for websites in the early days of the web.</li> </ul> </li> <li> <p>Software for Complex Systems</p> <ul> <li>Examples: Aerospace software, control systems, and research platforms.</li> <li>Details: Lisp has been used in the development of complex software systems where flexibility and rapid development are essential. For instance, the planning software used in the NASA Deep Space 1 mission was written in Lisp, allowing for advanced autonomous decision-making.</li> </ul> </li> <li> <p>Interactive Development Environments</p> <ul> <li>Examples: REPL (Read-Eval-Print Loop) based development, debugging tools.</li> <li>Details: Lisp's interactive environment, which includes a REPL, makes it ideal for exploratory programming and debugging. Developers can write, test, and modify code in real-time, which is particularly useful for research and experimental development.</li> </ul> </li> <li> <p>Game Development (Niche)</p> <ul> <li>Examples: Scripting for game AI, procedural content generation.</li> <li>Details: In some niche areas of game development, Lisp has been used for scripting AI behavior and generating procedural content due to its symbolic processing capabilities. For example, the game \"Jak and Daxter\" used a custom Lisp dialect for scripting game logic.</li> </ul> </li> </ul> <p></p>"},{"location":"programming/programming-languages/lisp/resources/","title":"Resources","text":"<ul> <li>paulgraham<ul> <li>https://paulgraham.com/onlisp.html</li> <li>https://paulgraham.com/acl.html</li> <li>https://paulgraham.com/bel.html</li> <li>https://paulgraham.com/lisp.html</li> <li>Lisp Languages - https://paulgraham.com/lisps.html</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/common-lisp/","title":"Common Lisp","text":"<ul> <li>Official Website https://lisp-lang.org/</li> <li>Implementations https://lisp-lang.org/wiki/article/implementations</li> </ul>"},{"location":"programming/programming-languages/lisp/common-lisp/#implementations","title":"Implementations","text":""},{"location":"programming/programming-languages/lisp/common-lisp/#sbcl","title":"SBCL","text":"<p>SBCL\u00a0(Steel Bank Common Lisp) is a high-performance native code compiler written in Common Lisp and C. The code is descended from CMUCL. It features native threading support, a type inference engine (Useful with gradual typing) and an optimizing compiler.</p> <p>Steel Bank Common Lisp is named, in honour of CMUCL, after Andrew Carnegie and Andrew Mellon, who made their fortunes in steel and banking, respectively.</p>"},{"location":"programming/programming-languages/lisp/common-lisp/#ccl","title":"CCL","text":"<p>CCL\u00a0(Clozure Common Lisp) is a native code Common Lisp implementation. It supports many platforms, all of which are at relative feature parity.</p>"},{"location":"programming/programming-languages/lisp/common-lisp/#ecl","title":"ECL","text":"<p>ECL\u00a0(Embeddable Common Lisp) is an implementation that compiles Common Lisp to C, and is useful for bringing Common Lisp to new platforms and to embedded environments.</p>"},{"location":"programming/programming-languages/lisp/common-lisp/#clisp","title":"CLISP","text":"<p>GNU CLISP\u00a0is an implementation that uses a bytecode compiler rather than a native code compiler. By not compiling to machine code, CLISP is easily portable and runs across a wide array of systems.</p>"},{"location":"programming/programming-languages/lisp/common-lisp/#abcl","title":"ABCL","text":"<p>ABCL\u00a0(Armed Bear Common Lisp) is an implementation that targets the JVM.</p>"},{"location":"programming/programming-languages/lisp/common-lisp/resources/","title":"Resources","text":"<ul> <li>Editor - https://lem-project.github.io/</li> <li>SLIME - The Superior Lisp Interaction Mode for Emacs<ul> <li>https://slime.common-lisp.dev/</li> <li>https://github.com/slime/slime</li> </ul> </li> <li>Roswell - Common Lisp environment setup Utility.<ul> <li>https://roswell.github.io/</li> <li>intended to be a launcher for a major lisp environment that just works.</li> </ul> </li> <li>Books on common lisp<ul> <li>https://lisp-lang.org/books/</li> </ul> </li> <li>https://cliki.net/<ul> <li>Common lisp wiki</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/","title":"Scheme","text":""},{"location":"programming/programming-languages/lisp/scheme/#standardization","title":"Standardization","text":""},{"location":"programming/programming-languages/lisp/scheme/#rrs-1975-original-report","title":"RRS \u2013 1975 (Original Report)","text":"<ul> <li>Year: 1975</li> <li>Purpose: This was the initial version of the Scheme language, created by Gerald Jay Sussman and Guy L. Steele at MIT. It was focused on developing a minimalistic dialect of Lisp with first-class functions and lexical scoping.</li> <li>Key Features:<ul> <li>Lexical scoping (in contrast to dynamically scoped Lisp dialects at the time).</li> <li>The introduction of closures (functions with their environment).</li> <li>First-class continuation (via <code>call/cc</code>).</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#r2rs-1986-revised-report","title":"R2RS \u2013 1986 (Revised Report)","text":"<ul> <li>Year: 1986</li> <li>Purpose: The second revision of the Scheme report added more formalization to the language specification.</li> <li>Key Features:<ul> <li>Tail recursion: Formally specified to optimize recursive calls.</li> <li>First-class continuations: Via the <code>call-with-current-continuation</code> (<code>call/cc</code>) function.</li> <li>Introduced numeric tower (integer, rational, real, and complex numbers).</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#r3rs-1986-third-revised-report","title":"R3RS \u2013 1986 (Third Revised Report)","text":"<ul> <li>Year: 1986</li> <li>Purpose: Further refinements and formalization of the language, with additional features.</li> <li>Key Features:<ul> <li>Continuation-based I/O.</li> <li>Introduction of the macro system, initially based on simple pattern matching.</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#r4rs-1991-fourth-revised-report","title":"R4RS \u2013 1991 (Fourth Revised Report)","text":"<ul> <li>Year: 1991</li> <li>Purpose: Major standardization push, aimed at unifying different Scheme implementations under a consistent specification.</li> <li>Key Features:<ul> <li>The macro system was significantly improved.</li> <li>Standardized lexical syntax and reader macros.</li> <li>Portability: The focus on making Scheme more portable across implementations.</li> <li>Expanded the numeric tower, and introduced more precise handling of numerical operations.</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#r5rs-1998-fifth-revised-report","title":"R5RS \u2013 1998 (Fifth Revised Report)","text":"<ul> <li>Year: 1998</li> <li>Purpose: One of the most influential versions of Scheme, widely adopted by implementations and users. It became the de facto standard for years.</li> <li>Key Features:<ul> <li>Simplicity: Maintained Scheme's minimalist philosophy.</li> <li>Expanded support for continuations and tail-call optimization.</li> <li>Retained the original Scheme features such as first-class functions, continuations, and lexical scoping.</li> <li>Limited to core features, leading to high portability across implementations.</li> <li>Finalized and formalized the macro system using <code>syntax-rules</code>.</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#r6rs-2007-sixth-revised-report","title":"R6RS \u2013 2007 (Sixth Revised Report)","text":"<ul> <li>https://www.r6rs.org/</li> <li>Year: 2007</li> <li>Purpose: A more ambitious standard, aimed at making Scheme suitable for large-scale software development by adding new features and stricter definitions.</li> <li>Key Features:<ul> <li>Introduced libraries and modules for better namespace management.</li> <li>Support for Unicode, improving internationalization.</li> <li>Expanded the macro system with more powerful and hygienic macros.</li> <li>Improved support for exception handling and error reporting.</li> <li>Records (a structured data type) were standardized.</li> <li>Mutable and immutable pairs: Standardized to distinguish between mutable and immutable lists.</li> <li>Allowed for more complex numerical types.</li> </ul> </li> <li>Controversy:<ul> <li>Some in the Scheme community felt R6RS was too complex, leading to debates. Many felt it deviated from Scheme's original minimalist principles.</li> <li>As a result, several implementations remained at R5RS.</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#r7rs-2013-seventh-revised-report","title":"R7RS \u2013 2013 (Seventh Revised Report)","text":"<ul> <li>https://r7rs.org/</li> <li>Year: 2013</li> <li>Purpose: The R7RS standard was split into two parts: R7RS-small and R7RS-large, addressing both the minimalist and larger-scale programming needs.</li> <li>R7RS-Small (2013):<ul> <li>Focused on small, core Scheme, similar to R5RS but with some modernizations.</li> <li>Added support for simple modules and libraries to enable code reuse and modularity.</li> <li>Included syntax-case as an alternative macro system to <code>syntax-rules</code>.</li> <li>Concurrency primitives added (e.g., futures and promises).</li> <li>Kept Scheme's core principles while addressing some of the criticisms of R6RS's complexity.</li> </ul> </li> <li>R7RS-Large (Work in Progress):<ul> <li>Focuses on extending Scheme with more advanced features, such as standard libraries, and is aimed at larger-scale programming.</li> <li>It is being developed in phases, with modules like math libraries, IO libraries, record types, and more.</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#other-standards-and-extensions","title":"Other Standards and Extensions","text":""},{"location":"programming/programming-languages/lisp/scheme/#ieee-scheme-ieee-1178-1990","title":"IEEE Scheme (IEEE 1178-1990)","text":"<ul> <li>Year: 1990</li> <li>Purpose: The IEEE standard for Scheme, based mostly on R4RS, aimed at making Scheme an official standardized language for portability.</li> <li>Key Features:<ul> <li>Served as an official industrial standard.</li> <li>Was referenced for compliance by some implementations, but over time it was less influential compared to the RnRS series.</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#major-scheme-implementations","title":"Major Scheme Implementations","text":"<p>Here is a list of notable Scheme implementations, both historical and current, each with different goals and focuses:</p>"},{"location":"programming/programming-languages/lisp/scheme/#gnu-guile","title":"GNU Guile","text":"<ul> <li>Purpose: Embeddable extension language for GNU software.</li> <li>Standard: Supports R5RS, R6RS, and partial R7RS.</li> <li>Notable Features: Scripting for GNU programs, extensive libraries.</li> <li>Resources<ul> <li>https://www.gnu.org/software/guile/learn/</li> <li>https://www.gnu.org/software/guile/</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#chez-scheme","title":"Chez Scheme","text":"<ul> <li>Purpose: High-performance Scheme implementation.</li> <li>Standard: Supports R6RS, R7RS.</li> <li>Notable Features: Fast compilation, support for parallelism and concurrency.</li> <li>Resources<ul> <li>https://www.scheme.com/</li> <li>https://github.com/cisco/chezscheme</li> <li>https://www.scheme.com/csug7/</li> <li>https://github.com/guenchi/json</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#mit-scheme","title":"MIT Scheme","text":"<ul> <li>Purpose: Educational, used in the \"Structure and Interpretation of Computer Programs\" (SICP) course.</li> <li>Standard: R5RS with extensions.</li> <li>Notable Features: Good educational tools, debugger, profiler.</li> <li>Resources<ul> <li>https://www.gnu.org/software/mit-scheme/</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#racket","title":"Racket","text":"<ul> <li>Purpose: Evolved from Scheme into a language creation toolkit.</li> <li>Standard: R5RS, R6RS, but has diverged significantly.</li> <li>Notable Features: Extensive libraries, advanced macro system, IDE (DrRacket).</li> <li>Resources<ul> <li>https://en.wikipedia.org/wiki/Racket_(programming_language)</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#chicken-scheme","title":"Chicken Scheme","text":"<ul> <li>Purpose: Scheme-to-C compiler with a focus on portability and ease of embedding.</li> <li>Standard: R5RS, R7RS.</li> <li>Notable Features: Good foreign function interface (FFI), large set of third-party extensions (eggs).</li> <li>Resources<ul> <li>https://call-cc.org/</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#gambit","title":"Gambit","text":"<ul> <li>Purpose: Scheme implementation focused on portability and performance.</li> <li>Standard: R5RS, R6RS.</li> <li>Notable Features: Compiles Scheme to C, supports concurrent programming.</li> <li>Resources<ul> <li>https://gambitscheme.org/</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#bigloo","title":"Bigloo","text":"<ul> <li>Purpose: Scheme compiler aimed at developing efficient and compact programs.</li> <li>Standard: R5RS, R6RS.</li> <li>Notable Features: Interoperability with C, Java, and .NET.</li> <li>Resources<ul> <li>https://www-sop.inria.fr/mimosa/fp/Bigloo/</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#scheme48","title":"Scheme48","text":"<ul> <li>Purpose: A simple, lightweight Scheme, aimed at being a clean and modular implementation.</li> <li>Standard: R5RS.</li> <li>Notable Features: Modular design, intended to be easy to modify and experiment with.</li> <li>Resources<ul> <li>https://s48.org/</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#kawa","title":"Kawa","text":"<ul> <li>Purpose: A Scheme implementation that compiles to Java bytecode.</li> <li>Standard: R5RS, R6RS.</li> <li>Notable Features: Can interoperate with Java code, aimed at being used in JVM environments.</li> <li>Resources<ul> <li>https://www.gnu.org/software/kawa/</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#scm","title":"Scm","text":"<ul> <li>Purpose: Small and simple Scheme interpreter.</li> <li>Standard: R5RS.</li> <li>Notable Features: Lightweight and portable.</li> <li>Resources<ul> <li>https://en.wikipedia.org/wiki/SCM_(Scheme_implementation)</li> <li>https://directory.fsf.org/wiki/Scm</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#chibi-scheme","title":"Chibi-Scheme","text":"<ul> <li>Purpose: Lightweight Scheme implementation designed to be embeddable.</li> <li>Standard: R7RS (small).</li> <li>Notable Features: Tiny footprint, good for scripting.</li> <li>Resources<ul> <li>https://github.com/ashinn/chibi-scheme</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#larceny","title":"Larceny","text":"<ul> <li>Purpose: Performance-focused Scheme compiler and interpreter.</li> <li>Standard: R5RS, R6RS.</li> <li>Notable Features: Focus on performance, includes native and bytecode compilation.</li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#lesser-known-and-historical-scheme-implementations","title":"Lesser-Known and Historical Scheme Implementations","text":""},{"location":"programming/programming-languages/lisp/scheme/#s7","title":"S7","text":"<ul> <li>Purpose: Lightweight embeddable Scheme interpreter used in audio programming.</li> <li>Standard: Minimal.</li> <li>Notable Features: Used in music and sound synthesis software.</li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#sigscheme","title":"SigScheme","text":"<ul> <li>Purpose: Lightweight Scheme interpreter for embedded systems.</li> <li>Standard: R5RS.</li> <li>Notable Features: Small memory footprint, used in systems like the Gauche Scheme.</li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#stalin","title":"Stalin","text":"<ul> <li>Purpose: Aggressively optimizing Scheme compiler.</li> <li>Standard: R5RS.</li> <li>Notable Features: Focus on generating highly optimized code but has long compilation times.</li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#ypsilon","title":"Ypsilon","text":"<ul> <li>Purpose: Scheme with a focus on concurrency and low-latency garbage collection.</li> <li>Standard: R6RS.</li> <li>Notable Features: Good for real-time and concurrent applications.</li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#sisc","title":"SISC","text":"<ul> <li>Purpose: Java-based Scheme interpreter, designed to be complete and compliant with R5RS.</li> <li>Standard: R5RS.</li> <li>Notable Features: Runs on JVM, supports tail recursion.</li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#tinyscheme","title":"TinyScheme","text":"<ul> <li>Purpose: A lightweight Scheme interpreter aimed at embedding.</li> <li>Standard: R5RS.</li> <li>Notable Features: Small size, ease of embedding into applications.</li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#vicare","title":"Vicare","text":"<ul> <li>Purpose: A fork of Ikarus Scheme with a focus on R6RS.</li> <li>Standard: R6RS.</li> <li>Notable Features: Focused on supporting modern Scheme standards.</li> <li>Resources<ul> <li>https://larcenists.org/</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#ikarus","title":"Ikarus","text":"<ul> <li>Purpose: A highly optimized Scheme compiler.</li> <li>Standard: R6RS.</li> <li>Notable Features: Focus on fast performance.</li> <li>Resources<ul> <li>https://conservatory.scheme.org/ikarus/</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#lisp-js","title":"lisp-js","text":"<ul> <li>Resources<ul> <li>https://lips.js.org/#demo</li> <li>https://github.com/LIPS-scheme/lips</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#historical-or-discontinued-implementations","title":"Historical or Discontinued Implementations","text":"<p>These may no longer be actively developed, but were once significant:</p>"},{"location":"programming/programming-languages/lisp/scheme/#t-scheme","title":"T Scheme","text":"<ul> <li>Purpose: Based on Scheme, but aimed to support object-oriented programming.</li> <li>Standard: Custom extensions.</li> <li>Notable Features: One of the early influential Scheme implementations.</li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#rscheme","title":"RScheme","text":"<ul> <li>Purpose: Scheme implementation with object-oriented extensions.</li> <li>Standard: R5RS.</li> <li>Notable Features: Used in real-time systems.</li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#vscm","title":"VSCM","text":"<ul> <li>Purpose: Experimental Scheme interpreter and compiler.</li> <li>Standard: R5RS.</li> <li>Notable Features: Focus on experimentation with Scheme concepts.</li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/#pixie-scheme","title":"Pixie Scheme","text":"<ul> <li>Purpose: Small Scheme interpreter written in Java.</li> <li>Standard: R4RS.</li> <li>Notable Features: Runs on JVM.</li> </ul>"},{"location":"programming/programming-languages/lisp/scheme/resources/","title":"Resources","text":"<ul> <li>https://www.scheme.org/<ul> <li>Online Compiler - https://try.scheme.org/</li> <li>Standards - https://standards.scheme.org/</li> </ul> </li> <li>Books on scheme<ul> <li>https://books.scheme.org/</li> <li>https://en.wikipedia.org/wiki/Scheme_(programming_language)</li> </ul> </li> <li>SLIB<ul> <li>library for scheme</li> <li>https://en.wikipedia.org/wiki/SLIB</li> <li>http://cvs.savannah.gnu.org/viewvc/slib/slib/</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/lua/","title":"Lua","text":"<p>Lua is a lightweight, high-level scripting language known for its simplicity, flexibility, and embeddability. It's widely used in a variety of fields, particularly where performance and ease of integration are important.</p> <ul> <li> <p>Game Development</p> <ul> <li>Examples: Scripting game logic, AI behavior, and user interfaces.</li> <li>Details: Lua is widely used in the game industry for scripting because it is fast, easy to integrate with other programming languages like C++, and allows developers to make changes to the game logic without recompiling the entire game. For example, Lua is used in popular games such as \"World of Warcraft,\" \"Angry Birds,\" and the \"Far Cry\" series.</li> </ul> </li> <li> <p>Embedded Systems</p> <ul> <li>Examples: Firmware development, embedded applications, and device control.</li> <li>Details: Lua's small footprint makes it ideal for embedded systems where resources are limited. It is used in firmware for devices like routers, printers, and IoT devices. ESP8266 and ESP32, popular microcontrollers in IoT projects, often use Lua for scripting.</li> </ul> </li> <li> <p>Web Development</p> <ul> <li>Examples: Web servers, APIs, and templating engines.</li> <li>Details: Lua can be used in web development, particularly in conjunction with the Nginx web server, where it can handle tasks such as request routing, API handling, and content generation through the OpenResty framework. Lua is also used in the Lapis web framework, which allows developers to build web applications using Lua.</li> </ul> </li> <li> <p>Configuration Scripting</p> <ul> <li>Examples: Game modding, software customization, and system configuration.</li> <li>Details: Lua is often used for configuration scripting in applications and games, allowing users to customize behavior without altering the core code. Wireshark, a network protocol analyzer, uses Lua for custom protocol dissectors, and Apache HTTP Server can use Lua for configuration scripting.</li> </ul> </li> <li> <p>Robotics</p> <ul> <li>Examples: Robot control systems, simulation environments, and AI.</li> <li>Details: Lua is used in robotics for scripting robot behavior, particularly in research and educational environments. For example, the V-REP (now CoppeliaSim) robot simulation software uses Lua for scripting robot behaviors and simulating environments.</li> </ul> </li> <li> <p>Data Analysis and Visualization</p> <ul> <li>Examples: Statistical analysis, data manipulation, and interactive visualizations.</li> <li>Details: Lua is used in some data analysis and visualization tools due to its simplicity and flexibility. For instance, Torch, a machine learning library, uses Lua for building neural networks and performing statistical analyses.</li> </ul> </li> <li> <p>Multimedia Applications</p> <ul> <li>Examples: Audio processing, video games, and interactive installations.</li> <li>Details: Lua is used in multimedia applications for real-time audio and video processing. Gideros and L\u00d6VE are popular game frameworks that use Lua for developing 2D games, often including rich multimedia content.</li> </ul> </li> <li> <p>Automation</p> <ul> <li>Examples: Task automation, scripting within larger applications, and game bots.</li> <li>Details: Lua is used for automation scripts in various software, from automating tasks in games (game bots) to automating system tasks in larger applications. AutoHotkey, a popular scripting language for Windows automation, supports Lua for advanced scripting tasks.</li> </ul> </li> <li> <p>Security Applications</p> <ul> <li>Examples: Intrusion detection systems, firewall rule scripting, and network security tools.</li> <li>Details: Lua is used in security applications, such as Snort, an open-source intrusion detection system (IDS), where Lua is used for writing rules and scripts to detect and prevent network attacks.</li> </ul> </li> <li> <p>Scientific Computing</p> <ul> <li>Examples: Numerical simulations, physics engines, and research software.</li> <li>Details: Lua is used in scientific computing for writing simulations and integrating with other high-performance languages. SciLua is a scientific computing library for Lua, used for numerical computations and data analysis.</li> </ul> </li> <li> <p>User Interfaces</p> <ul> <li>Examples: GUI applications, custom widgets, and interactive user interfaces.</li> <li>Details: Lua is used in creating graphical user interfaces (GUIs) for applications. Corona SDK uses Lua for building cross-platform mobile applications with rich user interfaces, and Awesome WM, a window manager for X, uses Lua for configuration and scripting.</li> </ul> </li> <li> <p>Virtual Worlds</p> <ul> <li>Examples: MMORPGs, virtual environments, and simulation games.</li> <li>Details: Lua is used in virtual worlds and simulation games to script interactions and behaviors. Second Life, a popular virtual world, uses Lua for scripting user interactions and creating custom content.</li> </ul> </li> </ul> <p>Here are some use cases:</p> <ul> <li>mpv a music player use lua for plugins and configuration - https://github.com/mpv-player/mpv</li> <li>neovim uses lua for configuration - https://github.com/neovim/neovim</li> <li>awesomewm uses lua for it's configuration - https://github.com/awesomeWM/awesome</li> </ul>"},{"location":"programming/programming-languages/lua/resources/","title":"Lua","text":""},{"location":"programming/programming-languages/lua/resources/#documentation","title":"Documentation","text":"<ul> <li>https://www.lua.org/</li> </ul>"},{"location":"programming/programming-languages/lua/package-managers/","title":"luarocks","text":"<ul> <li>package manager for lua</li> <li>get help <code>luarocks help</code></li> <li>list installed modules <code>luarocks list</code></li> <li>to install a package <code>luarocks install module_name</code></li> <li>after installation of <code>luarocks</code> you have to set the directories   so that lua can recognize where to find the packages<ul> <li><code>eval \"$(luarocks path --bin)\"</code> this will do that</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/php/","title":"PHP","text":""},{"location":"programming/programming-languages/php/resources/","title":"Resources","text":""},{"location":"programming/programming-languages/php/resources/#documentation","title":"Documentation","text":"<ul> <li>https://www.php.net/</li> </ul>"},{"location":"programming/programming-languages/php/summary/PHP_Session/","title":"PHP Sessions","text":""},{"location":"programming/programming-languages/php/summary/PHP_Session/#what-is-a-session","title":"What is a session?","text":"<p>In general, session refers to a frame of communication between two medium. A PHP session is used to store data on a server rather than the computer of the user. Session identifiers or SID is a unique number which is used to identify every user in a session based environment. The SID is used to link the user with his information on the server like posts, emails etc.</p>"},{"location":"programming/programming-languages/php/summary/PHP_Session/#how-are-sessions-better-than-cookies","title":"How are sessions better than cookies?","text":"<ul> <li>Although cookies are also used for storing user related data, they have   serious security issues because cookies are stored on the user\u2019s computer and   thus they are open to attackers to easily modify the content of the cookie.   Addition of harmful data by the attackers in the cookie may result in the   breakdown of the application.</li> <li>Apart from that cookies affect the performance of a site since cookies send   the user data each time the user views a page.Every time the browser requests   a URL to the server, all the cookie data for that website is automatically   sent to the server within the request.</li> </ul>"},{"location":"programming/programming-languages/php/summary/PHP_Session/#starting-a-php-session","title":"Starting a PHP Session","text":"<ul> <li>The first step is to start up a session. After a session is started, session   variables can be - created to store information. The PHP\u00a0<code>session_start()</code>   function is used to begin a new session.It als creates a new session ID for   the user.</li> </ul> <pre><code>&lt;?php\nsession_start();\n?&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/PHP_Session/#storing-session-data","title":"Storing Session Data","text":"<ul> <li>Session data in key-value pairs using the\u00a0<code>$_SESSION[]</code>\u00a0super global array.</li> <li>The stored data can be accessed during lifetime of a session.</li> </ul> <pre><code>&lt;?php\nsession_start();\n$_SESSION[\"Rollnumber\"] = \"11\";\n$_SESSION[\"Name\"] = \"Ajay\";\n?&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/PHP_Session/#accessing-session-data","title":"Accessing Session Data","text":"<ul> <li>Data stored in sessions can be easily accessed by firstly calling   <code>session_start()</code>\u00a0 and then by passing the corresponding key to   the\u00a0<code>$_SESSION</code>\u00a0associative array.</li> </ul> <pre><code>&lt;?php\nsession_start();\necho 'The Name of the student is :' . $_SESSION[\"Name\"] . '&lt;br&gt;';\u00a0\necho 'The Roll number of the student is :' . $_SESSION[\"Rollnumber\"] . '&lt;br&gt;';\n?&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/PHP_Session/#destroying-certain-session-data","title":"Destroying Certain Session Data","text":"<ul> <li>To delete only a certain session data,the unset feature can be used with the   corresponding session variable in the\u00a0<code>$_SESSION</code>\u00a0associative array.</li> </ul> <pre><code>&lt;?php\nsession_start();\u00a0\u00a0\nif(isset($_SESSION[\"Name\"])){\n\u00a0\u00a0\u00a0\u00a0unset($_SESSION[\"Rollnumber\"]);\n}\u00a0\n?&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/PHP_Session/#destroying-complete-session","title":"Destroying Complete Session","text":"<ul> <li>The\u00a0<code>session_destroy()</code>\u00a0function is used to completely destroy a session. The   <code>session_destroy()</code> function does not require any argument.</li> </ul> <pre><code>&lt;?php\nsession_start();\nsession_destroy();\n?&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/PHP_Session/#what-is-a-cookie","title":"What is a Cookie? \ud83c\udf6a","text":"<ul> <li>A cookie is often used to identify a user.</li> <li>A cookie is a small file that the server embeds on the user's computer.</li> <li>Each time the same computer requests a page with a browser, it will send the   cookie too.</li> <li>With PHP, you can both create and retrieve cookie values.</li> </ul>"},{"location":"programming/programming-languages/php/summary/PHP_Session/#setcookie","title":"<code>setcookie()</code>","text":"<ul> <li>PHP <code>setcookie()</code> function is used to set cookie with HTTP response.</li> <li>Once cookie is set, you can access it by <code>$_COOKIE</code> superglobal variable.</li> </ul> <pre><code>setcookie(\"CookieName\",\u00a0\"CookieValue\"); /*\u00a0defining\u00a0name\u00a0and\u00a0value\u00a0only*/\n</code></pre>"},{"location":"programming/programming-languages/php/summary/PHP_Session/#_cookie","title":"<code>$_COOKIE</code>","text":"<ul> <li>PHP <code>$_COOKIE</code> superglobal variable is used to get cookie.</li> </ul> <pre><code>$value=$_COOKIE[\"CookieName\"];//returns\u00a0cookie\u00a0value\u00a0\u00a0\n</code></pre>"},{"location":"programming/programming-languages/php/summary/PHP_Session/#delete-cookie","title":"Delete Cookie","text":"<ul> <li>If you set the expiration date in past, cookie will be deleted.</li> </ul> <pre><code>&lt;?php\u00a0\u00a0\nsetcookie(\"CookieName\",\u00a0\"\",\u00a0time()\u00a0-\u00a03600);//\u00a0set\u00a0the\u00a0expiration\u00a0date\u00a0to\u00a0one\u00a0hour\u00a0ago\u00a0\u00a0\n?&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php-advance/","title":"More on PHP","text":""},{"location":"programming/programming-languages/php/summary/php-advance/#functions","title":"functions","text":"<pre><code>function functionName() {\n    // code to be executed;\n}\n</code></pre> <ul> <li>Function names are NOT case-sensitive.</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n&lt;?php\nfunction writeMsg() {\n    echo \"Hello world!\";\n}\nwriteMsg();\n?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php-advance/#function-arguments","title":"function arguments","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n&lt;?php\nfunction familyName($fname) {\n    echo \"$fname.&lt;br&gt;\";\n}\n\nfamilyName(\"san\");\nfamilyName(\"dan\");\n?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php-advance/#default-arguments","title":"default arguments","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;?php\nfunction setHeight($minheight = 50) {\n    echo \"The height is : $minheight &lt;br&gt;\";\n}\n\nsetHeight(350);\nsetHeight();\nsetHeight(135);\nsetHeight(80);\n?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php-advance/#returning-values","title":"Returning Values","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;?php\nfunction sum($x, $y) {\n    $z = $x + $y;\n    return $z;\n}\n\necho \"5 + 10 = \" . sum(5,10) . \"&lt;br&gt;\";\necho \"7 + 13 = \" . sum(7,13) . \"&lt;br&gt;\";\necho \"2 + 4 = \" . sum(2,4);\n?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php-advance/#scope-of-variables","title":"Scope of variables","text":"<ul> <li>global - variable declared outside function has global scope</li> <li>local - inside the function</li> </ul>"},{"location":"programming/programming-languages/php/summary/php-advance/#static-keyword","title":"Static keyword","text":"<ul> <li>function with static keyword store their previous state</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;?php\nfunction myTest()\n{\n  static $x = 0;\n  $b=5;\n  echo \"x= \". $x .\"&lt;br&gt;\";\n  echo \"b= \" . $b . \"&lt;br&gt;\";\n  $x++;\n}\nmyTest(); // 0 5\necho \"&lt;br&gt;\";\nmyTest(); // 1 5\necho \"&lt;br&gt;\";\nmyTest(); // 2 5\n?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php-advance/#superglobals","title":"Superglobals","text":"<p>Several predefined variables in PHP are <code>superglobals</code>, which means that they are always accessible, regardless of scope and you can access them from any function, class or file without having to do anything special. The PHP superglobal variables are:</p> <ul> <li><code>$GLOBALS</code></li> <li><code>$_SERVER</code></li> <li><code>$_REQUEST</code></li> <li><code>$_POST</code></li> <li><code>$_GET</code></li> <li><code>$_FILES</code></li> <li><code>$_ENV</code></li> <li><code>$_COOKIE</code></li> <li><code>$_SESSION</code></li> </ul>"},{"location":"programming/programming-languages/php/summary/php-advance/#globals","title":"<code>$GLOBALS</code>","text":"<ul> <li><code>$GLOBALS</code> is a PHP super global variable which is used to access global   variables from anywhere in the PHP script (also from within functions or   methods).</li> <li>PHP stores all global variables in an array called <code>$GLOBALS[index]</code>.   The index holds the name of the variable.</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n&lt;?php \n$x = 75;\n$y = 25; \nfunction addition() {\n    $GLOBALS['z'] = $GLOBALS['x'] + $GLOBALS['y'];\n}\naddition();\necho $z;\n?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>In the example above, since <code>z</code> is a variable present within the <code>$GLOBALS</code> array, it is also accessible from outside the function.</p>"},{"location":"programming/programming-languages/php/summary/php-advance/#_server","title":"<code>$_SERVER</code>","text":"<p><code>$_SERVER</code> is a PHP super global variable which holds information about headers, paths, and script locations.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;?php \necho $_SERVER['PHP_SELF'];\necho \"&lt;br&gt;\";\necho $_SERVER['SERVER_NAME'];\necho \"&lt;br&gt;\";\necho $_SERVER['HTTP_HOST'];\necho \"&lt;br&gt;\";\necho $_SERVER['HTTP_REFERER'];\necho \"&lt;br&gt;\";\necho $_SERVER['HTTP_USER_AGENT'];\necho \"&lt;br&gt;\";\necho $_SERVER['SCRIPT_NAME'];\n?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php-advance/#_request","title":"<code>$_REQUEST</code>","text":"<ul> <li>PHP <code>$_REQUEST</code> is used to collect data after submitting an HTML form.</li> <li><code>$_REQUEST</code>, by default, contains the contents of <code>$_GET</code>, <code>$_POST</code> and <code>$_COOKIE</code>.</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n&lt;form method=\"post\" action=\"&lt;?php echo $_SERVER['PHP_SELF'];?&gt;\"&gt;\n  Name: &lt;input type=\"text\" name=\"fname\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n\n&lt;?php\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    // collect value of input field\n    $name = htmlspecialchars($_REQUEST['fname']); \n    if (empty($name)) {\n        echo \"Name is empty\";\n    } else {\n        echo $name;\n    }\n}\n?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php-advance/#_post","title":"<code>$_POST</code>","text":"<ul> <li>PHP <code>$_POST</code> is widely used to collect form data after submitting an HTML form   with <code>method=\"post\"</code>.</li> <li><code>$_POST</code> is also widely used to pass variables.</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;form method=\"post\" action=\"&lt;?php echo $_SERVER['PHP_SELF'];?&gt;\"&gt;\n  Name: &lt;input type=\"text\" name=\"fname\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n\n&lt;?php\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    // collect value of input field\n    $name = $_POST['fname']; \n    if (empty($name)) {\n        echo \"Name is empty\";\n    } else {\n        echo $name;\n    }\n}\n?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php-advance/#form-handling","title":"Form Handling","text":"<ul> <li>using POST</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n  &lt;body&gt;\n    &lt;form action=\"welcome.php\" method=\"post\"&gt;\n      Name: &lt;input type=\"text\" name=\"name\" /&gt;&lt;br /&gt;\n      E-mail: &lt;input type=\"text\" name=\"email\" /&gt;&lt;br /&gt;\n      &lt;input type=\"submit\" /&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>&lt;html&gt;\n&lt;body&gt;\n  Welcome &lt;?php echo $_POST[\"name\"]; ?&gt;&lt;br&gt;\n  Your email address is: &lt;?php echo $_POST[\"email\"]; ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li>using GET</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;get&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;form action=\"welcome_get.php\" method=\"get\"&gt;\n    &lt;label&gt; Name:  &lt;/label&gt;\n    &lt;input type=\"text\" id=\"name\" name=\"name\" /&gt;&lt;br&gt;\n    &lt;label&gt; E-mail: &lt;/label&gt;\n    &lt;input type=\"text\" if=\"email\" name=\"email\" /&gt;&lt;br&gt;\n    &lt;input type=\"submit\" value=\"submit\"&gt;\n  &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>&lt;html&gt;\n&lt;body&gt;\n  Welcome &lt;?php echo $_GET[\"name\"]; ?&gt;&lt;br&gt;\n  Your email address is: &lt;?php echo $_GET[\"email\"]; ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php/","title":"PHP","text":"<p>PHP: Hypertext Preprocessor</p> <ul> <li>php code is processed on the web server by php interpreter</li> <li>the result of the interpreted and executed php code (which may be any type of   data such as generated HTML, binary image data) would form the whole part of   an HTTP response.</li> </ul>"},{"location":"programming/programming-languages/php/summary/php/#installation","title":"Installation","text":"<p>To install PHP, we will suggest you to install AMP (Apache, MySQL, PHP) software stack. It is available for all operating systems. There are many AMP options available in the market that are given below:</p> <ul> <li>WAMP for Windows</li> <li>LAMP for Linux</li> <li>MAMP for Mac</li> <li>SAMP for Solaris</li> <li>FAMP for FreeBSD</li> <li>XAMPP (Cross, Apache, MySQL, PHP, Perl) for Cross Platform:</li> <li>It includes some other components too such as FileZilla, OpenSSL, Webalizer,   Mercury Mail etc.</li> </ul> <p>If you are on Windows and don't want Perl and other features of XAMPP, you should go for WAMP. In a similar way, you may use LAMP for Linux and MAMP for Macintosh.</p>"},{"location":"programming/programming-languages/php/summary/php/#lamp","title":"LAMP","text":"<ul> <li>on ubuntu<ul> <li>first install <code>apache</code> server</li> <li>then php and its addon for apache</li> <li>if you want mysql support install it's addon too</li> </ul> </li> </ul> <pre><code>sudo apt install php libapache2-mod-php\n# mysql addon\nsudo apt install php-mysql\n# restart service\nsudo systemctl restart apache2.service\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php/#configuration","title":"Configuration","text":"<ul> <li>Adding new virtual host, also don forget to add <code>port:80</code> in <code>ports.conf</code></li> <li>ubuntu already contains the config file divided into different parts so it's   easy to make changes</li> </ul> <pre><code>&lt;VirtualHost *:5000&gt;\n ServerAdmin webmaster@localhost\n DocumentRoot /var/www/php\n ErrorLog ${APACHE_LOG_DIR}/error.log\n CustomLog ${APACHE_LOG_DIR}/access.log combined\n&lt;/VirtualHost&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php/#first-php-document","title":"First php document","text":"<ul> <li>add <code>demo.php</code> to the document root</li> </ul> <pre><code>&lt;?php\n  phpinfo();\n?&gt;\n</code></pre> <ul> <li>all file in which you want to run php code should have <code>.php</code> extension</li> </ul>"},{"location":"programming/programming-languages/php/summary/php/#basics","title":"Basics","text":"<ul> <li>semicolon are necessary in <code>php</code></li> <li><code>&lt;?php ...code.... ?&gt;</code></li> <li><code>print(\"Hello\");</code> - prints hello</li> <li><code>echo \"hello\\n\";</code> - prints hello</li> </ul>"},{"location":"programming/programming-languages/php/summary/php/#variables","title":"Variables","text":"<ul> <li>begin with <code>$</code></li> <li>cannot declare variables</li> <li>php will assign right type itself</li> </ul>"},{"location":"programming/programming-languages/php/summary/php/#boolean","title":"boolean","text":"<ul> <li><code>true</code>, <code>false</code> - case insensitive</li> </ul>"},{"location":"programming/programming-languages/php/summary/php/#integer","title":"integer","text":"<pre><code>$int1 = 12;   // =&gt; 12\n$int2 = -12;  // =&gt; -12\n$int3 = 012;  // =&gt; 10 (a leading 0 denotes an octal number)\n$int4 = 0x0F; // =&gt; 15 (a leading 0x denotes a hex literal)\n// Binary integer literals are available since PHP 5.4.0.\n$int5 = 0b11111111; // 255 (a leading 0b denotes a binary number)\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php/#float","title":"float","text":"<pre><code>$float = 1.234;\n$float = 1.2e3;\n$float = 7E-10;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php/#delete-a-variable","title":"delete a variable","text":"<ul> <li><code>unset($var);</code></li> </ul>"},{"location":"programming/programming-languages/php/summary/php/#operations","title":"operations","text":"<pre><code>$sum        = 1 + 1; // 2\n$difference = 2 - 1; // 1\n$product    = 2 * 2; // 4\n$quotient   = 2 / 1; // 2\n\n// Shorthand arithmetic\n$number = 0;\n$number += 1;      // Increment $number by 1\necho $number++;    // Prints 1 (increments after evaluation)\necho ++$number;    // Prints 3 (increments before evaluation)\n$number /= $float; // Divide and assign the quotient to $number\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php/#strings","title":"strings","text":"<ul> <li>Strings should be enclosed in single quotes;</li> </ul> <pre><code>$sgl_quotes = '$String'; // =&gt; '$String'\n</code></pre> <ul> <li>Avoid using double quotes except to embed other variables</li> </ul> <pre><code>$dbl_quotes = \"This is a $sgl_quotes.\"; // =&gt; 'This is a $String.'\n</code></pre> <ul> <li>Special characters are only escaped in double quotes</li> </ul> <pre><code>$escaped   = \"This contains a \\t tab character.\";\n$unescaped = 'This just contains a slash and a t: \\t';\n</code></pre> <ul> <li>Enclose a variable in curly braces if needed</li> </ul> <pre><code>$apples = \"I have {$number} apples to eat.\";\n$oranges = \"I have ${number} oranges to eat.\";\n$money = \"I have $${number} in the bank.\";\n</code></pre> <ul> <li>String concatenation is done with .</li> </ul> <pre><code>echo 'This string ' . 'is concatenated';\n</code></pre> <ul> <li>Strings can be passed in as parameters to echo</li> </ul> <pre><code>echo 'Multiple', 'Parameters', 'Valid';  // Returns 'MultipleParametersValid'\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php/#constants","title":"Constants","text":"<ul> <li> <p>A constant is defined by using define() and can never be changed during   runtime!</p> </li> <li> <p>a valid constant name starts with a letter or underscore, followed by any   number of letters, numbers, or underscores.</p> </li> </ul> <pre><code>define(\"FOO\", \"something\");\n</code></pre> <ul> <li>access to a constant is possible by calling the chosen name without a $</li> </ul> <pre><code>echo FOO; // Returns 'something'\necho 'This outputs ' . FOO;  // Returns 'This outputs something'\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php/#arrays","title":"Arrays","text":"<ul> <li>All arrays in PHP are associative arrays (hashmaps in some languages)</li> </ul> <pre><code>$associative = array('One' =&gt; 1, 'Two' =&gt; 2, 'Three' =&gt; 3);\n$associative = ['One' =&gt; 1, 'Two' =&gt; 2, 'Three' =&gt; 3];\n\necho $associative['One']; // prints 1\n</code></pre> <ul> <li>Add an element to an associative array</li> </ul> <pre><code>$associative['Four'] = 4;\n</code></pre> <ul> <li>List literals implicitly assign integer keys</li> </ul> <pre><code>$array = ['One', 'Two', 'Three'];\necho $array[0]; // =&gt; \"One\"\n</code></pre> <ul> <li>Add an element to the end of an array</li> </ul> <pre><code>$array[] = 'Four';\n// or\narray_push($array, 'Five');\n</code></pre> <ul> <li>Remove element from array</li> </ul> <pre><code>unset($array[3]);\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php/#debug-output","title":"Debug Output","text":"<ul> <li>short output tags</li> </ul> <pre><code>?&gt;\n&lt;p&gt;&lt;?= $paragraph ?&gt;&lt;/p&gt;\n&lt;?php\n</code></pre> <ul> <li>references</li> </ul> <pre><code>$x = 1;\n$y = 2;\n$x = $y; // $x now contains the same value as $y\n$z = &amp;$y;\n// $z now contains a reference to $y. Changing the value of\n// $z will change the value of $y also, and vice-versa.\n// $x will remain unchanged as the original value of $y\n\necho $x; // =&gt; 2\necho $z; // =&gt; 2\n$y = 0;\necho $x; // =&gt; 2\necho $z; // =&gt; 0\n</code></pre> <ul> <li>Dumps type and value of variable to stdout</li> </ul> <pre><code>var_dump($z); // prints int(0)\n</code></pre> <ul> <li>Prints variable to stdout in human-readable format</li> </ul> <pre><code>print_r($array);\n// prints: Array ( [0] =&gt; One [1] =&gt; Two [2] =&gt; Three )\n</code></pre> <ul> <li>assert throws a warning if its argument is not true</li> </ul> <pre><code>$a = 0;\n$b = '0';\n\n// These comparisons will always be true, even if the types aren't the same.\nassert($a == $b); // equality\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php/#operations_1","title":"operations","text":"<pre><code>$integer = 1;\necho $integer + $integer; // =&gt; 2\n\n$string = '1';\necho $string + $string; // =&gt; 2 (strings are coerced to integers)\n\n$string = 'one';\necho $string + $string; // =&gt; 0\n// Outputs 0 because the + operator cannot cast the string 'one' to a number\n</code></pre> <ul> <li>Type casting can be used to treat a variable as another type</li> </ul> <pre><code>$boolean = (boolean) 1; // =&gt; true\n\n$zero = 0;\n$boolean = (boolean) $zero; // =&gt; false\n\n// There are also dedicated functions for casting most types\n$integer = 5;\n$string = strval($integer);\n\n$var = null; // Null value\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php/#control-structure","title":"Control Structure","text":"<pre><code>if (true) {\n    print 'I get printed';\n}\n</code></pre> <pre><code>if (false) {\n    print 'I don\\'t';\n} else {\n    print 'I get printed';\n}\n</code></pre> <pre><code>if (false) {\n    print 'Does not get printed';\n} elseif (true) {\n    print 'Does';\n}\n</code></pre> <pre><code>// ternary operator\nprint (false ? 'Does not get printed' : 'Does');\n\n// equivalent of \"$x ? $x : 'Does'\"\n$x = false;\nprint($x ?: 'Does');\n</code></pre> <pre><code>// null coalesce operator\n$a = null;\n$b = 'Does print';\necho $a ?? 'a is not set'; // prints 'a is not set'\necho $b ?? 'b is not set'; // prints 'Does print'\n</code></pre> <pre><code>$x = 0;\nif ($x === '0') {\n    print 'Does not print';\n} elseif ($x == '1') {\n    print 'Does not print';\n} else {\n    print 'Does print';\n}\n</code></pre> <ul> <li>for some templates</li> </ul> <pre><code>?&gt;\n\n&lt;?php if ($x): ?&gt;\nThis is displayed if the test is truthy.\n&lt;?php else: ?&gt;\nThis is displayed otherwise.\n&lt;?php endif; ?&gt;\n\n&lt;?php\n</code></pre> <pre><code>// Use switch to save some logic.\nswitch ($x) {\n    case '0':\n        print 'Switch does type coercion';\n        break; // You must include a break, or you will fall through\n               // to cases 'two' and 'three'\n    case 'two':\n    case 'three':\n        // Do something if $variable is either 'two' or 'three'\n        break;\n    default:\n        // Do something by default\n}\n</code></pre> <ul> <li>while loop</li> </ul> <pre><code>// While, do...while and for loops are probably familiar\n$i = 0;\nwhile ($i &lt; 5) {\n    echo $i++;\n} // Prints \"01234\"\n</code></pre> <ul> <li>do while</li> </ul> <pre><code>$i = 0;\ndo {\n    echo $i++;\n} while ($i &lt; 5); // Prints \"01234\"\n</code></pre> <ul> <li>for</li> </ul> <pre><code>for ($x = 0; $x &lt; 10; $x++) {\n    echo $x;\n} // Prints \"0123456789\"\n</code></pre> <ul> <li>for each</li> </ul> <pre><code>$wheels = ['bicycle' =&gt; 2, 'car' =&gt; 4];\n\n// Foreach loops can iterate over arrays\nforeach ($wheels as $wheel_count) {\n    echo $wheel_count;\n} // Prints \"24\"\n</code></pre> <ul> <li>You can iterate over the keys as well as the values</li> </ul> <pre><code>foreach ($wheels as $vehicle =&gt; $wheel_count) {\n    echo \"A $vehicle has $wheel_count wheels\";\n}\n</code></pre> <ul> <li>break</li> </ul> <pre><code>$i = 0;\nwhile ($i &lt; 5) {\n    if ($i === 3) {\n        break; // Exit out of the while loop\n    }\n    echo $i++;\n} // Prints \"012\"\n</code></pre> <ul> <li>continue</li> </ul> <pre><code>for ($i = 0; $i &lt; 5; $i++) {\n    if ($i === 3) {\n        continue; // Skip this iteration of the loop\n    }\n    echo $i;\n} // Prints \"0124\"\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php/#functions","title":"Functions","text":"<ul> <li>Define a function with \"function\":</li> </ul> <pre><code>function my_function () {\n    return 'Hello';\n}\n\necho my_function(); // =&gt; \"Hello\"\n</code></pre> <ul> <li>Optional parameters</li> </ul> <pre><code>function add ($x, $y = 1) { // $y is optional and defaults to 1\n    $result = $x + $y;\n    return $result;\n}\necho add(4); // =&gt; 5\necho add(4, 2); // =&gt; 6\n</code></pre> <ul> <li>you can declare anonymous functions;</li> </ul> <pre><code>$inc = function ($x) {\n    return $x + 1;\n};\necho $inc(2); // =&gt; 3\n</code></pre> <ul> <li>Functions can return functions</li> </ul> <pre><code>function foo ($x, $y, $z) {\n    echo \"$x - $y - $z\";\n}\n\nfunction bar ($x, $y) {\n    // Use 'use' to bring in outside variables\n    return function ($z) use ($x, $y) {\n        foo($x, $y, $z);\n    };\n}\n\n$bar = bar('A', 'B');\n$bar('C'); // Prints \"A - B - C\"\n</code></pre> <ul> <li>You can call named functions using strings</li> </ul> <pre><code>$function_name = 'add';\necho $function_name(1, 2); // =&gt; 3\n// Useful for programatically determining which function to run.\n// Or, use call_user_func(callable $callback [, $parameter [, ... ]]);\n</code></pre> <ul> <li>You can get all the parameters passed to a function</li> </ul> <pre><code>function parameters() {\n    $numargs = func_num_args();\n    if ($numargs &gt; 0) {\n        echo func_get_arg(0) . ' | ';\n    }\n    $args_array = func_get_args();\n    foreach ($args_array as $key =&gt; $arg) {\n        echo $key . ' - ' . $arg . ' | ';\n    }\n}\n\nparameters('Hello', 'World'); // Hello | 0 - Hello | 1 - World |\n</code></pre> <ul> <li>variable no of arguments</li> </ul> <pre><code>function variable($word, ...$list) {\n    echo $word . \" || \";\n    foreach ($list as $item) {\n        echo $item . ' | ';\n    }\n}\n\nvariable(\"Separate\", \"Hello\", \"World\"); // Separate || Hello | World |\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php/#includes","title":"Includes","text":"<pre><code>&lt;?php\n// PHP within included files must also begin with a PHP open tag.\n\ninclude 'my-file.php';\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php/#sorting","title":"Sorting","text":"<ul> <li><code>sort()</code> sort array in ascending order, values, will not preserve keys</li> <li> <p><code>rsort()</code> sort array in descending order, values, will not preserve keys</p> </li> <li> <p><code>asort()</code> - sort array in ascending order, values</p> </li> <li> <p><code>arsort()</code> - sort array in descending order, values</p> </li> <li> <p><code>ksort()</code> - sort array in ascending order, keys</p> </li> <li><code>krsort()</code> - sort array in descending order, keys</li> </ul>"},{"location":"programming/programming-languages/php/summary/php_database/","title":"Connecting to Database using php","text":""},{"location":"programming/programming-languages/php/summary/php_database/#connecting-to-mysql","title":"Connecting to MySQL","text":"<p>There are three ways of working with MySQL and PHP</p> <ol> <li>MySQLi (object-oriented)</li> <li>MySQLi (procedural)</li> <li>PDO (PHP data objects)</li> </ol>"},{"location":"programming/programming-languages/php/summary/php_database/#mysqli-oop-way","title":"MySQLi (OOP way)","text":"<ul> <li>create a object</li> </ul> <pre><code>&lt;?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n// Creating connection\n$conn = new mysqli($servername, $username, $password);\n// Checking connection\nif ($conn-&gt;connect_error) {\n    die(\"Connection failed: \" . $conn-&gt;connect_error);\n}\necho \"Connected successfully\";\n?&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php_database/#mysqli-procedural-way","title":"MySQLi (procedural way)","text":"<ul> <li>create a variable</li> </ul> <pre><code>&lt;?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n// Creating connection\n$conn = mysqli_connect($servername, $username, $password);\n// Checking connection\nif (!$conn) {\n    die(\"Connection failed: \" . mysqli_connect_error());\n}\necho \"Connected successfully\";\n?&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php_database/#php-data-objects-way","title":"PHP data objects way","text":"<pre><code>&lt;?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$database = \"myDB\";\ntry {\n    $conn = new PDO(\"mysql:host=$servername;dbname=$database\", $username, $password);\n    // setting the PDO error mode to exception\n    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    echo \"Connected successfully\";\n}\ncatch(PDOException $e) {\n    echo \"Connection failed: \" . $e-&gt;getMessage();\n}\n?&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php_database/#closing-a-connection","title":"Closing a connection","text":"<ul> <li>oop <code>$conn-&gt;close();</code></li> <li>procedural <code>mysqli_close($conn);</code></li> <li>pdo <code>$conn = null;</code></li> </ul>"},{"location":"programming/programming-languages/php/summary/php_database/#select-query-using-sqli-procedural","title":"<code>SELECT</code> query using SQLi procedural","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;body&gt;\n    &lt;div class=\"title\"&gt;\n      &lt;h2&gt;Emp record From Database Using PHP.&lt;/h2&gt;\n    &lt;/div&gt;\n    &lt;form action=\"http://localhost/san/emprecord.php\" method=\"post\"&gt;\n      &lt;h2&gt;Employee Record Details&lt;/h2&gt;\n      &lt;input class=\"submit\" name=\"submit\" type=\"submit\" value=\"Show Record\" /&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n&lt;?php\n    $servername = \"localhost\";\n    $username = \"root\";\n    $password = \"\";\n    $dbname = \"mydb\";\n\n    // Create connection\n    $conn = mysqli_connect($servername, $username, $password, $dbname);\n    // Check connection\n    if (!$conn) {\n        die(\"Connection failed: \" . mysqli_connect_error());\n    }\n\n    $sql = \"SELECT * FROM emp\";\n    $result = mysqli_query($conn, $sql);\n    if (mysqli_num_rows($result) &gt; 0) {\n        echo \"&lt;table border=1&gt;\";\n        echo \"&lt;tr&gt;\";\n        echo \"&lt;th&gt;NAME&lt;/th&gt;\";\n        echo \"&lt;th&gt;CODE&lt;/th&gt;\";\n        echo \"&lt;th&gt;DESIGNATION&lt;/th&gt;\";\n        echo \"&lt;th&gt;SALARY&lt;/th&gt;\";\n        echo \"&lt;/tr&gt;\";\n        while ($row = mysqli_fetch_array($result)) {\n            echo \"&lt;tr&gt;\";\n            echo \"&lt;td&gt;\".$row['name'].\"&lt;/td&gt;\";\n            echo \"&lt;td&gt;\".$row['code'].\"&lt;/td&gt;\";\n            echo \"&lt;td&gt;\".$row['desig'].\"&lt;/td&gt;\";\n            echo \"&lt;td&gt;\".$row['salary'].\"&lt;/td&gt;\";\n            echo \"&lt;/tr&gt;\";\n        }\n        echo \"&lt;/table&gt;\";\n        mysqli_free_result($result); // close the resultset.\n    }\n    else {\n        echo \"No matching records are found.\";\n    }\n    mysqli_close($conn);\n?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li><code>mysqli_num_rows()</code> function is an inbuilt function in PHP which is used to   return the number of rows present in the result set</li> <li><code>mysqli_free_result()</code> function frees the memory associated with the result.</li> <li><code>mysqli_fetch_array()</code> function is used to fetch rows from the database and   store them as an array</li> </ul>"},{"location":"programming/programming-languages/php/summary/php_database/#select-query-using-sqli-oop","title":"<code>SELECT</code> query using SQLi oop","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n&lt;?php\n    $servername = \"localhost\";\n    $username = \"root\";\n    $password = \"\";\n    $dbname = \"mydb\";\n\n    // Create connection\n    $conn = new mysqli($servername, $username, $password, $dbname);\n    // Check connection\n    if ($conn-&gt;connect_error) {\n        die(\"Connection failed: \" . $conn-&gt;connect_error);\n    }\n    $sql = \"SELECT * FROM emp\";\n    $result = $conn-&gt;query($sql);\n    if ($result-&gt;num_rows&gt; 0) {\n        echo \"&lt;table border=1&gt;\";\n        echo \"&lt;tr&gt;\";\n        echo \"&lt;th&gt;NAME&lt;/th&gt;\";\n        echo \"&lt;th&gt;CODE&lt;/th&gt;\";\n        echo \"&lt;th&gt;DESIGNATION&lt;/th&gt;\";\n        echo \"&lt;th&gt;SALARY&lt;/th&gt;\";\n        echo \"&lt;/tr&gt;\";\n        while ($row = $result-&gt;fetch_array()) {\n            echo \"&lt;tr&gt;\";\n            echo \"&lt;td&gt;\".$row[0].\"&lt;/td&gt;\";\n            echo \"&lt;td&gt;\".$row[1].\"&lt;/td&gt;\";\n            echo \"&lt;td&gt;\".$row[2].\"&lt;/td&gt;\";\n            echo \"&lt;td&gt;\".$row[3].\"&lt;/td&gt;\";\n            echo \"&lt;/tr&gt;\";\n        }\n        echo \"&lt;/table&gt;\";\n        $result-&gt;free(); // close the resultset.\n    }\n    else {\n        echo \"No matching records are found.\";\n    }\n    $conn-&gt;close();\n?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li><code>fetch_array()</code> - fetch as an array</li> <li><code>fetch_assoc()</code> - fetch result as an associative array</li> </ul>"},{"location":"programming/programming-languages/php/summary/php_database/#insert-records-into-database","title":"Insert Records into database","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;PHP insertion&lt;/title&gt;\n&lt;body&gt;\n    &lt;div class=\"title\"&gt;\n        &lt;h2&gt;Insert Data In Database Using PHP.&lt;/h2&gt;\n    &lt;/div&gt;\n    &lt;form action=\"insertrecord.php\" method=\"post\"&gt;\n        &lt;h2&gt;Form&lt;/h2&gt;\n        &lt;label&gt;NAME:&lt;/label&gt;\n        &lt;input class=\"input\" name=\"nm\" type=\"text\" value=\"\"&gt;\n        &lt;label&gt;CODE:&lt;/label&gt;\n        &lt;input class=\"input\" name=\"cd\" type=\"text\" value=\"\"&gt;\n        &lt;label&gt;DESIGNATION:&lt;/label&gt;\n        &lt;input class=\"input\" name=\"ds\" type=\"text\" value=\"\"&gt;\n        &lt;label&gt;SALARY:&lt;/label&gt;\n        &lt;input class=\"input\" name=\"sal\" type=\"text\" value=\"\"&gt;\n        &lt;input class=\"submit\" name=\"submit\" type=\"submit\" value=\"Insert\"&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n&lt;?php\n    if(isset($_POST['submit'])) {\n        $ename = $_POST['nm'];\n        $ecode = $_POST['cd'];\n        $edesig = $_POST['ds'];\n        $esal = $_POST['sal'];\n        $servername = \"localhost\";\n        $username = \"root\";\n        $password = \"\";\n        $dbname = \"mydb\";\n        //create connection \n        $conn = mysqli_connect($servername, $username, $password, $dbname);\n        // Check connection\n        if (!$conn) {\n            die(\"Connection failed: \" . mysqli_connect_error());\n        }\n        $sql = \"INSERT INTO emp VALUES ('$ename','$ecode','$edesig','$esal')\";\n        if (mysqli_query($conn, $sql)) {\n            echo \"New record created successfully\";\n        } else {\n            echo \"Error: \" . $sql . \"&lt;br&gt;\" . mysqli_error($conn);\n        }\n        mysqli_close($conn);\n    }\n?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php_database/#update-records-in-database","title":"Update Records in Database","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;PHP insertion&lt;/title&gt;\n&lt;body&gt;\n    &lt;div class=\"title\"&gt;\n        &lt;h2&gt;Search Data In Database Using PHP.&lt;/h2&gt;\n    &lt;/div&gt;\n    &lt;form action=\"update.php\" method=\"post\"&gt;\n        &lt;h2&gt;Form&lt;/h2&gt;\n        &lt;label&gt;Enter Code:&lt;/label&gt;\n        &lt;input class=\"input\" name=\"cd\" type=\"text\" value=\"\"&gt;\n        &lt;input class=\"submit\" name=\"submit\" type=\"submit\" value=\"search\"&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n&lt;?php\n    if(isset($_POST['submit'])) {\n        $ecode = $_POST['cd'];\n        $servername = \"localhost\";\n        $username = \"root\";\n        $password = \"\";\n        $dbname = \"mydb\";\n        //create connection \n        $conn = mysqli_connect($servername, $username, $password, $dbname);\n        // Check connection\n        if (!$conn) {\n            die(\"Connection failed: \" . mysqli_connect_error());\n        }\n        $sql=\"UPDATE emp SET salary=salary+5001 WHERE code='$ecode'\";\n        if (mysqli_query($conn, $sql)) {\n            echo \"Record update successfully\";\n        } \n        else {\n            echo \"Error: \" . $sql . \"&lt;br&gt;\" . mysqli_error($conn);\n        }\n        mysqli_close($conn);\n    }\n?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php_database/#delete-records-from-database","title":"Delete records from database","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n    &lt;div class=\"title\"&gt;\n        &lt;h2&gt;Search Data In Database Using PHP.&lt;/h2&gt;\n    &lt;/div&gt;\n    &lt;form action=\"delete.php\" method=\"post\"&gt;\n        &lt;h2&gt;Form&lt;/h2&gt;\n        &lt;label&gt;Enter Code:&lt;/label&gt;\n        &lt;input class=\"input\" name=\"cd\" type=\"text\" value=\"\"&gt;\n        &lt;input class=\"submit\" name=\"submit\" type=\"submit\" value=\"delete\"&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n&lt;?php\n    if(isset($_POST['submit'])) {\n    $ecode = $_POST['cd'];\n    $servername = \"localhost\";\n    $username = \"root\";\n    $password = \"\";\n    $dbname = \"mydb\";\n    //create connection \n    $conn = mysqli_connect($servername, $username, $password, $dbname);\n    // Check connection\n    if (!$conn) {\n        die(\"Connection failed: \" . mysqli_connect_error());\n    }\n    $sql=\"delete from emp WHERE code='$ecode'\";\n    if (mysqli_query($conn, $sql)) {\n        echo \"Record deleted successfully\";\n    } \n    else {\n        echo \"Error: \" . $sql . \"&lt;br&gt;\" . mysqli_error($conn);\n    }\n    mysqli_close($conn);\n}\n?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php_files/","title":"File handling in PHP","text":""},{"location":"programming/programming-languages/php/summary/php_files/#require-and-include","title":"<code>require</code> and <code>include</code>","text":"<ul> <li>insert content of one php file into another</li> <li><code>require</code> and <code>include</code> are same except they have diff. behavior if file is   missing<ul> <li><code>require</code> will produce a fatal error (<code>E_COMPILE_ERROR</code>) and stop the script</li> <li><code>include</code> will only produce a warning (<code>E_WARNING</code>) and the script will continue</li> </ul> </li> </ul> <p>So, if you want the execution to go on and show users the output, even if the include file is missing, use the include statement. Otherwise, in case of FrameWork, CMS, or a complex PHP application coding, always use the require statement to include a key file to the flow of execution. This will help avoid compromising your application's security and integrity, just in-case one key file is accidentally missing.</p> <p>Including files saves a lot of work. This means that you can create a standard header, footer, or menu file for all your web pages. Then, when the header needs to be updated, you can only update the header include file.</p> <pre><code>&lt;html&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Welcome to my home page!&lt;/h1&gt;\n    &lt;p&gt;Some text.&lt;/p&gt;\n    &lt;p&gt;Some more text.&lt;/p&gt;\n    &lt;?php include 'footer.php';?&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php_files/#file-handling","title":"File Handling","text":""},{"location":"programming/programming-languages/php/summary/php_files/#readfile","title":"<code>readfile()</code>","text":"<ul> <li>Reads a file and writes it to the output buffer.</li> </ul>"},{"location":"programming/programming-languages/php/summary/php_files/#open-file-fopen","title":"Open File - <code>fopen()</code>","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;?php\n$myfile = fopen(\"webdictionary.txt\", \"r\") or die(\"Unable to open file!\");\necho fread($myfile,filesize(\"webdictionary.txt\"));\nfclose($myfile);\n?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Mode Description r read only. w write only. a write only. append. File pointer starts at the end of the file. x new file for write only. Returns FALSE and an error if file already exists r+ read/write. File pointer starts at the beginning of the file w+ read/write. a+ read/write. append. File pointer starts at the end of the file. x+ new file for read/write. Returns FALSE and an error if file already exists"},{"location":"programming/programming-languages/php/summary/php_files/#read-file-fread","title":"Read File <code>fread()</code>","text":"<pre><code>fread($myfile,filesize(\"webdictionary.txt\"));\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php_files/#close-file-fclose","title":"Close File <code>fclose()</code>","text":"<pre><code>&lt;?php\n$myfile = fopen(\"webdictionary.txt\", \"r\");\n// some code to be executed....\nfclose($myfile);\n?&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php_files/#read-single-line-fgets","title":"Read Single Line <code>fgets()</code>","text":"<ul> <li>after reading one line the file pointer moves to the next line</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n&lt;?php\n$myfile = fopen(\"webdictionary.txt\", \"r\") or die(\"Unable to open file!\");\necho fgets($myfile);\nfclose($myfile);\n?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php_files/#check-end-of-file-feof","title":"Check end of file <code>feof()</code>","text":"<ul> <li>read all file line by line</li> </ul> <pre><code>&lt;?php\n$myfile = fopen(\"webdictionary.txt\", \"r\") or die(\"Unable to open file!\");\n// Output one line until end-of-file\nwhile(!feof($myfile)) {\n  echo fgets($myfile) . \"&lt;br&gt;\";\n}\nfclose($myfile);\n?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php_files/#read-single-character-fgetc","title":"Read single character <code>fgetc()</code>","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;?php\n$myfile = fopen(\"webdictionary.txt\", \"r\") or die(\"Unable to open file!\");\n// Output one character until end-of-file\nwhile(!feof($myfile)) {\n  echo fgetc($myfile);\n}\nfclose($myfile);\n?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php_files/#write-to-a-file-fwrite","title":"Write to a file <code>fwrite()</code>","text":"<pre><code>&lt;?php\n$myfile = fopen(\"newfile.txt\", \"w\") or die(\"Unable to open file!\");\n$txt = \"John Doe\\n\";\nfwrite($myfile, $txt);\n$txt = \"Jane Doe\\n\";\nfwrite($myfile, $txt);\nfclose($myfile);\n?&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php_files/#uploading-file-to-server","title":"Uploading file to server","text":""},{"location":"programming/programming-languages/php/summary/php_files/#configure-phpini","title":"Configure <code>php.ini</code>","text":"<ul> <li>set <code>file_uploads = On</code> in <code>php.ini</code></li> </ul>"},{"location":"programming/programming-languages/php/summary/php_files/#create-a-html-form","title":"Create a HTML form","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;form action=\"upload.php\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n    Select image to upload:\n    &lt;input type=\"file\" name=\"fileToUpload\" id=\"fileToUpload\"&gt;\n    &lt;input type=\"submit\" value=\"Upload Image\" name=\"submit\"&gt;\n&lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php_files/#create-a-upload-file-php-script","title":"Create a Upload File PHP script","text":"<pre><code>&lt;?php\n$target_dir = \"uploads/\";\n$target_file = $target_dir . basename($_FILES[\"fileToUpload\"][\"name\"]);\n$uploadOk = 1;\n$imageFileType = strtolower(pathinfo($target_file,PATHINFO_EXTENSION));\n// Check if image file is a actual image or fake image\nif(isset($_POST[\"submit\"])) {\n    $check = getimagesize($_FILES[\"fileToUpload\"][\"tmp_name\"]);\n    if($check !== false) {\n        echo \"File is an image - \" . $check[\"mime\"] . \".\";\n        $uploadOk = 1;\n    } else {\n        echo \"File is not an image.\";\n        $uploadOk = 0;\n    }\n}\n?&gt;\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php_files/#check-if-file-already-exist-file_exists","title":"Check if file already exist <code>file_exists()</code>","text":"<pre><code>if (file_exists($target_file)) {\n    echo \"Sorry, file already exists.\";\n    $uploadOk = 0;\n}\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php_files/#limit-file-size","title":"Limit file size","text":"<pre><code>if ($_FILES[\"fileToUpload\"][\"size\"] &gt; 500000) {\n    echo \"Sorry, your file is too large.\";\n    $uploadOk = 0;\n}\n</code></pre>"},{"location":"programming/programming-languages/php/summary/php_files/#limit-file-type","title":"Limit file type","text":"<pre><code>// Allow certain file formats\nif($imageFileType != \"jpg\" &amp;&amp; $imageFileType != \"png\" &amp;&amp; $imageFileType != \"jpeg\"\n&amp;&amp; $imageFileType != \"gif\" ) {\n    echo \"Sorry, only JPG, JPEG, PNG &amp; GIF files are allowed.\";\n    $uploadOk = 0;\n}\n</code></pre>"},{"location":"programming/programming-languages/powershell/","title":"Powershell","text":""},{"location":"programming/programming-languages/powershell/commands/","title":"Commands","text":"<p>ForEach-Object Where-Object Compare-Object Compare-Object ForEach-Object Group-Object Get-WmiObject Measure-Object Remove-WmiObject Select-Object Where-Object Sort-Object Tee-Object Add-Content Get-Content Clear-Content Get-Content Set-Content Get-Content Connect-PSSession Disconnect-PSSession Export-PSSession Enter-PSSession Exit-PSSession Get-PSSession Import-PSSession New-PSSessionConfigurationFile New-PSSession Receive-PSSession Remove-PSSession Get-Job Wait-Job Remove-Job Receive-Job Resume-Job Start-Job Stop-Job Suspend-Job Get-Process Stop-Process Get-Process Start-Process Stop-Process Start-Process Set-Location Set-Location Get-Location Pop-Location Push-Location Get-Location Set-Location Add-PSSnapin Get-PSSnapin Remove-PSSnapin ConvertFrom-String Clear-Host Clear-Host Out-Host Clear-History Invoke-History Get-History Get-History Get-History Invoke-History Clear-Variable Get-Variable New-Variable Remove-Variable Set-Variable Set-Variable Invoke-WebRequest Convert-Path Disable-PSBreakpoint Enable-PSBreakpoint Write-Output Write-Output Export-Alias Export-Csv Format-Custom Format-Hex Format-List Format-Table Format-Wide Get-Alias Get-PSBreakpoint Get-Clipboard Get-Command Get-PSCallStack Get-PSDrive Get-ComputerInfo Get-Member Get-Module Import-Module New-Module Remove-Module Get-Service Get-TimeZone Get-Unique Invoke-Command Show-Command Trace-Command Invoke-Expression Import-Alias Import-Csv Invoke-RestMethod powershell_ise.exe Invoke-WmiMethod Invoke-WebRequest Out-Printer New-PSDrive New-Alias New-PSDrive Out-GridView Remove-PSBreakpoint Remove-PSDrive Resolve-Path Set-Alias Start-Service Stop-Service Set-PSBreakpoint Set-Clipboard Start-Sleep Select-String Set-TimeZone Set-WmiInstance Invoke-WebRequest</p>"},{"location":"programming/programming-languages/powershell/item/","title":"Commands","text":""},{"location":"programming/programming-languages/powershell/item/#common-verbs","title":"Common Verbs","text":"<ul> <li><code>Clear</code></li> <li><code>Copy</code></li> <li>`</li> </ul> <p>clp -&gt; Clear-ItemProperty cpp -&gt; Copy-ItemProperty gp -&gt; Get-ItemProperty gpv -&gt; Get-ItemPropertyValue mp -&gt; Move-ItemProperty cli -&gt; Clear-Item copy -&gt; Copy-Item cp -&gt; Copy-Item cpi -&gt; Copy-Item dir -&gt; Get-ChildItem del -&gt; Remove-Item erase -&gt; Remove-Item gci -&gt; Get-ChildItem gi -&gt; Get-Item ls -&gt; Get-ChildItem ii -&gt; Invoke-Item move -&gt; Move-Item mv -&gt; Move-Item mi -&gt; Move-Item ni -&gt; New-Item rd -&gt; Remove-Item ren -&gt; Rename-Item ri -&gt; Remove-Item rm -&gt; Remove-Item rmdir -&gt; Remove-Item rni -&gt; Rename-Item rnp -&gt; Rename-ItemProperty rp -&gt; Remove-ItemProperty si -&gt; Set-Item sp -&gt; Set-ItemProperty</p>"},{"location":"programming/programming-languages/powershell/nouns/","title":"Nouns","text":"<p>Object WmiObject Object WmiObject Object Content PSSession PSSessionConfigurationFile PSSession Job Process Location PSSnapin String Host History Variable WebRequest Path PSBreakpoint Output Alias Csv Custom Hex List Table Wide Alias PSBreakpoint Clipboard Command PSCallStack PSDrive ComputerInfo Member Module Service TimeZone Unique Command Expression Alias Csv RestMethod WmiMethod WebRequest Printer PSDrive Alias PSDrive GridView PSBreakpoint PSDrive Path Alias Service PSBreakpoint Clipboard Sleep String TimeZone WmiInstance WebRequest</p>"},{"location":"programming/programming-languages/powershell/verbs/","title":"Verbs","text":"<p>Add Clear Compare Connect Convert ConvertFrom Disable Disconnect Enable Enter Exit Export ForEach Format Get Group Import Invoke Measure New Out Pop Push Receive Remove Resolve Resume Select Set Show Sort Start Stop Suspend Tee Trace Wait Where Write</p>"},{"location":"programming/programming-languages/r/","title":"R","text":"<p>R is an open-source programming language that is widely used as a statistical software and data analysis tool. R generally comes with the Command-line interface. R is available across widely used platforms like Windows, Linux, and macOS. It is widely favored in academia, research, and industries that rely on data-driven decision-making.</p> <ul> <li> <p>Statistical Analysis</p> <ul> <li>Examples: Hypothesis testing, regression analysis, and multivariate statistics.</li> <li>Details: R was originally developed for statistical analysis, making it the go-to tool for statisticians and data analysts. It is used to perform complex statistical computations like t-tests, chi-square tests, ANOVA, and linear and nonlinear modeling. For example, R is used in clinical trials to analyze patient data and determine the efficacy of treatments.</li> </ul> </li> <li> <p>Data Visualization</p> <ul> <li>Examples: Graphs, charts, and interactive visualizations.</li> <li>Details: R is known for its powerful data visualization capabilities, with packages like <code>ggplot2</code>, <code>lattice</code>, and <code>plotly</code> enabling the creation of high-quality, publication-ready graphics. For instance, R is used to create dashboards and reports for financial analysis, epidemiological studies, and academic publications.</li> </ul> </li> <li> <p>Data Science and Machine Learning</p> <ul> <li>Examples: Predictive modeling, data mining, and classification.</li> <li>Details: R is widely used in data science for building machine learning models and performing data mining tasks. Packages like <code>caret</code>, <code>randomForest</code>, and <code>xgboost</code> provide tools for classification, regression, clustering, and other machine learning tasks. For example, companies use R to build predictive models for customer churn, fraud detection, and recommendation systems.</li> </ul> </li> <li> <p>Bioinformatics and Genomics</p> <ul> <li>Examples: DNA sequence analysis, gene expression studies, and biological data visualization.</li> <li>Details: R is extensively used in bioinformatics for analyzing and visualizing genomic data. Packages like <code>Bioconductor</code> provide tools for analyzing high-throughput genomic data, such as RNA-Seq or microarray data. For example, researchers use R to identify differentially expressed genes in cancer studies.</li> </ul> </li> <li> <p>Finance and Economics</p> <ul> <li>Examples: Time series analysis, risk modeling, and portfolio optimization.</li> <li>Details: R is used in finance for analyzing financial markets, modeling risk, and optimizing investment portfolios. Packages like <code>quantmod</code>, <code>TTR</code>, and <code>PerformanceAnalytics</code> are used for tasks such as technical analysis of stock prices and backtesting trading strategies. Economists use R for econometric modeling and forecasting economic indicators.</li> </ul> </li> <li> <p>Clinical Trials and Healthcare</p> <ul> <li>Examples: Survival analysis, clinical trial design, and health economics.</li> <li>Details: R is widely used in healthcare for designing and analyzing clinical trials, performing survival analysis, and evaluating health outcomes. For example, pharmaceutical companies use R to analyze patient survival data and assess the cost-effectiveness of treatments.</li> </ul> </li> <li> <p>Social Science Research</p> <ul> <li>Examples: Survey analysis, sentiment analysis, and experimental research.</li> <li>Details: Social scientists use R to analyze survey data, conduct experiments, and study social trends. Tools like <code>tm</code> and <code>sentimentr</code> are used for text mining and sentiment analysis, while <code>survey</code> is used for complex survey data analysis. Researchers may use R to analyze election results or public opinion surveys.</li> </ul> </li> <li> <p>Environmental Science</p> <ul> <li>Examples: Climate modeling, ecological data analysis, and spatial analysis.</li> <li>Details: R is used in environmental science for analyzing ecological data, modeling climate change, and performing spatial analysis. Packages like <code>raster</code>, <code>sp</code>, and <code>rgdal</code> are used for analyzing and visualizing geospatial data. For example, R is used to model the impact of climate change on biodiversity.</li> </ul> </li> <li> <p>Marketing Analytics</p> <ul> <li>Examples: Customer segmentation, market basket analysis, and A/B testing.</li> <li>Details: Marketers use R to analyze customer behavior, segment markets, and optimize marketing campaigns. Techniques such as cluster analysis, association rule mining, and A/B testing are implemented in R to understand customer preferences and improve targeting. For instance, R is used to analyze customer purchase data and identify cross-selling opportunities.</li> </ul> </li> <li> <p>Government and Public Policy</p> <ul> <li>Examples: Policy evaluation, demographic studies, and public health analysis.</li> <li>Details: Governments and public policy researchers use R for evaluating policies, analyzing demographic data, and assessing public health interventions. R is used to perform statistical analysis on census data, evaluate the impact of policy changes, and model population growth.</li> </ul> </li> <li> <p>Academic Research</p> <ul> <li>Examples: Data analysis for scientific papers, reproducible research, and statistical method development.</li> <li>Details: R is extensively used in academia for conducting research, analyzing experimental data, and developing new statistical methods. Researchers use R to perform data analysis for their studies, produce reproducible research, and publish findings in scientific journals.</li> </ul> </li> <li> <p>Text Mining and Natural Language Processing (NLP)</p> <ul> <li>Examples: Sentiment analysis, topic modeling, and text classification.</li> <li>Details: R is used in text mining and NLP to analyze and extract information from large text corpora. Packages like <code>tm</code>, <code>quanteda</code>, and <code>tidytext</code> provide tools for text preprocessing, sentiment analysis, and topic modeling. For example, R is used to analyze social media data and extract public sentiment on various topics.</li> </ul> </li> <li> <p>Actuarial Science</p> <ul> <li>Examples: Risk assessment, insurance premium calculation, and life tables.</li> <li>Details: Actuaries use R for modeling insurance risks, calculating premiums, and analyzing mortality data. The <code>actuar</code> package in R provides tools for actuarial analysis, including risk theory, loss distributions, and life insurance mathematics.</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/r/installation/","title":"Installation","text":"<ul> <li>compiler <code>R</code><ul> <li><code>sudo apt install r-base</code></li> </ul> </li> <li>packages<ul> <li>from The Comprehensive R Archive Network (<code>CRAN</code>)<ul> <li><code>install.packages(\"pkgname\")</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"programming/programming-languages/r/resources/","title":"Resources","text":""},{"location":"programming/programming-languages/r/resources/#documentations","title":"Documentations","text":"<ul> <li>https://www.r-project.org/</li> <li>https://posit.co/download/rstudio-desktop/</li> </ul>"},{"location":"programming/programming-languages/r/summary/basics/","title":"R Basics","text":""},{"location":"programming/programming-languages/r/summary/basics/#data-types","title":"Data Types","text":"<p>There are six basic data types in R:</p> <ul> <li>Logical</li> <li>Numeric</li> <li>Integer</li> <li>Complex</li> <li>Character</li> <li>Raw</li> </ul>"},{"location":"programming/programming-languages/r/summary/basics/#logical","title":"Logical","text":"<p>The <code>logical</code> data type in R is also known as boolean data type. It can have value <code>TRUE</code> and <code>FALSE</code>.</p> <pre><code>bool1 &lt;- TRUE\nprint(bool1)\nprint(class(bool1))\n</code></pre> <pre><code>[1] TRUE\n[1] \"logical\"\n</code></pre>"},{"location":"programming/programming-languages/r/summary/basics/#numeric","title":"Numeric","text":"<ul> <li>number with decimal points</li> </ul> <pre><code>weight &lt;- 65.4\nprint(weight)\nprint(class(weight))\n\nmarks &lt;- 100\nprint(marks)\nprint(class(marks))\n</code></pre> <pre><code>[1] 65.4\n[1] \"numeric\"\n[1] 100\n[1] \"numeric\"\n</code></pre>"},{"location":"programming/programming-languages/r/summary/basics/#integer","title":"Integer","text":"<ul> <li>number without decimal points</li> </ul> <pre><code>int_var &lt;- 100L\nprint(int_var)\nprint(class(int_var))\n</code></pre> <pre><code>[1] 100\n[1] \"integer\"\n</code></pre>"},{"location":"programming/programming-languages/r/summary/basics/#complex","title":"Complex","text":"<ul> <li>for complex numbers</li> </ul> <pre><code>c_var &lt;- 1 + 2i\nprint(c_var)\nprint(class(c_var))\n</code></pre> <pre><code>[1] 1+2i\n[1] \"complex\"\n</code></pre>"},{"location":"programming/programming-languages/r/summary/basics/#character","title":"Character","text":"<ul> <li>character or a string of values</li> <li>no differerent string and character type like in other programming languages</li> </ul> <pre><code>fruit &lt;- \"apple\"\nprint(fruit)\nprint(class(fruit))\n\nfruit1 &lt;- 'apple'\nprint(fruit1)\nprint(class(fruit1))\n</code></pre> <pre><code>[1] \"apple\"\n[1] \"character\"\n[1] \"apple\"\n[1] \"character\"\n</code></pre>"},{"location":"programming/programming-languages/r/summary/basics/#raw","title":"Raw","text":"<ul> <li>raw in form of binary</li> <li>can be used to convert character type to ASCII values, and vice versa</li> <li>can also be used if you want to export data in binary</li> </ul> <pre><code>raw &lt;- charToRaw(\"hello\")\nprint(raw)\nprint(class(raw))\n</code></pre> <pre><code>[1] 68 65 6c 6c 6f\n[1] \"raw\"\n</code></pre> <pre><code>char &lt;- rawToChar(raw)\nprint(char)\nprint(class(char))\n</code></pre> <pre><code>[1] \"hello\"\n[1] \"character\"\n</code></pre>"},{"location":"programming/programming-languages/r/summary/basics/#operators","title":"Operators","text":"<ul> <li>arithemtic</li> <li>assignment</li> <li>comparision</li> <li>logical</li> <li>miscellaneous</li> </ul>"},{"location":"programming/programming-languages/r/summary/basics/#arithmetic","title":"Arithmetic","text":"<ul> <li><code>+</code> addition</li> <li><code>-</code> subtraction</li> <li><code>*</code> multiplication</li> <li><code>/</code> division</li> <li><code>^</code> exponent</li> <li><code>%%</code> modulud</li> <li><code>%/%</code> integer division</li> </ul>"},{"location":"programming/programming-languages/r/summary/basics/#assignement","title":"Assignement","text":"<ul> <li><code>var &lt;- value</code></li> <li><code>var &lt;&lt;- val</code></li> <li><code>value -&gt; var</code></li> <li><code>val -&gt;&gt; var</code></li> </ul>"},{"location":"programming/programming-languages/r/summary/basics/#comparision","title":"Comparision","text":"<ul> <li><code>==</code>, <code>!=</code></li> <li><code>&lt;</code>, <code>&lt;=</code> <code>&gt;</code>, <code>&gt;=</code></li> </ul>"},{"location":"programming/programming-languages/r/summary/basics/#logical_1","title":"Logical","text":"<ul> <li><code>&amp;</code></li> <li><code>&amp;&amp;</code></li> <li><code>|</code></li> <li><code>||</code></li> <li><code>!</code></li> </ul>"},{"location":"programming/programming-languages/r/summary/basics/#miscellaneous","title":"Miscellaneous","text":"<ul> <li><code>:</code> - create series <code>x &lt;- 1:10</code></li> <li><code>%in%</code> - find id a element belong to a vector <code>x%in%y</code></li> <li><code>%*%</code> - martix multiplication</li> </ul>"},{"location":"programming/programming-languages/r/summary/basics/#conditionals","title":"Conditionals","text":"<pre><code>x &lt;- 1\ny &lt;- 2\n\nif (x == y){\n    print('equal')\n} else {\n    print('not equal')\n}\n</code></pre> <pre><code>[1] \"not equal\"\n</code></pre>"},{"location":"programming/programming-languages/r/summary/basics/#loops","title":"Loops","text":"<pre><code>for (val in 1:5) print(val)\n</code></pre> <pre><code>[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n</code></pre> <pre><code>i &lt;- 1\nwhile (i &lt; 6){\n    print(i)\n    i &lt;- i + 1\n}\n</code></pre> <pre><code>[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n</code></pre> <pre><code>i &lt;- 1\nrepeat {\n    print(i)\n    if(i == 5) break;\n    i &lt;- i+1\n}\n</code></pre> <pre><code>[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n</code></pre>"},{"location":"programming/programming-languages/r/summary/basics/#rscript","title":"RScript","text":"<ul> <li>run R code as a script</li> <li><code>Rscript [script-name]</code></li> </ul>"},{"location":"programming/programming-languages/r/summary/basics/#function","title":"Function","text":"<pre><code>## defining\nmy_fun &lt;- function(){\n    print(\"hi\")\n}\n\n## calling\nmy_fun() \n</code></pre> <pre><code>[1] \"hi\"\n</code></pre> <pre><code>my_fun &lt;- function(name){\n    paste(\"hi\", name)\n}\n\nmy_fun(\"ram\")\n</code></pre> <p>'hi ram'</p>"},{"location":"programming/programming-languages/r/summary/graphs/","title":"Graphs","text":""},{"location":"programming/programming-languages/r/summary/graphs/#data-frame","title":"data frame","text":"<pre><code># Create a data frame with two columns and three rows\nmy_data &lt;- data.frame(\n  x = c(1, 2, 3),\n  y = c(4, 5, 6)\n)\n\n# View the data frame\nmy_data\n</code></pre> A data.frame: 3 \u00d7 2 xy &lt;dbl&gt;&lt;dbl&gt; 14 25 36"},{"location":"programming/programming-languages/r/summary/graphs/#ggplot","title":"ggplot","text":"<p>syntax</p> <pre><code>ggplot(dataframe, aes(x = col-of-dataframe, y = col-of-dataframe)) + plottype()\n</code></pre> <p>plottypes are</p> <ul> <li><code>geom_point()</code> scatter graph</li> <li><code>geom_line()</code> line</li> <li><code>geom_bar()</code> - bar - need one axis only, frequency on other</li> <li><code>geom_histogram()</code> - histogram - need one axis only, frequency on other</li> </ul> <pre><code>library(ggplot2)\n</code></pre> <pre><code>df &lt;- data.frame(\n    x = c(1,2,3,4,5,5,5),\n    y = c(2,4,6,8,10,11,12)\n)\ndf\n</code></pre> A data.frame: 7 \u00d7 2 xy &lt;dbl&gt;&lt;dbl&gt; 1 2 2 4 3 6 4 8 510 511 512"},{"location":"programming/programming-languages/r/summary/graphs/#scatter-plot","title":"Scatter plot","text":"<ul> <li>use <code>geom_point()</code></li> </ul> <pre><code>ggplot(df, aes(x = x, y = y)) + geom_point()\n</code></pre> <pre><code>ggplot(df, aes(x = x, y = y)) + geom_line()\n</code></pre> <pre><code>ggplot(df, aes(x = x)) + geom_bar()\n</code></pre> <pre><code>ggplot(df, aes(x = x)) + geom_histogram()\n</code></pre> <pre><code>`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n</code></pre>"},{"location":"programming/programming-languages/r/summary/graphs/#more-customizations","title":"more customizations","text":"<pre><code>ggplot(df, aes(x = x, y = y)) + geom_point() + labs(title = \"My Scatterplot\", x = \"X Variable\", y = \"Y Variable\")\n</code></pre> <pre><code>ggplot(df, aes(x = x, y = y)) + \n    geom_point() + \n    labs(title = \"My Scatterplot\", x = \"X Variable\", y = \"Y Variable\") +\n    scale_x_continuous(limits = c(0, 100)) +\n    scale_y_continuous(limits = c(0, 100))\n</code></pre> <pre><code>\n</code></pre>"},{"location":"programming/programming-languages/ruby/","title":"Ruby","text":"<p>Ruby is a dynamic, high-level programming language known for its simplicity and productivity. It is particularly popular for web development but is also used in a variety of other fields. Here are some common areas where Ruby is used, along with examples:</p> <ul> <li> <p>Web Development</p> <ul> <li>Examples: Building web applications, APIs, and content management systems.</li> <li>Details: Ruby is best known for its use in web development, primarily through the Ruby on Rails (often just called \"Rails\") framework. Rails provides a robust, convention-over-configuration approach that allows developers to build powerful web applications quickly. GitHub, Airbnb, and Shopify are some of the well-known web applications built using Ruby on Rails.</li> <li>Repo of ruby on rails - https://github.com/rails/rails</li> <li>Forem powering (dev.to) - https://github.com/forem/forem</li> </ul> </li> <li> <p>Automation and Scripting</p> <ul> <li>Examples: Task automation, file processing, and system management.</li> <li>Details: Ruby is often used for automating repetitive tasks, writing scripts to process files, or managing system configurations. For example, Chef, a configuration management tool, uses Ruby as its scripting language to define system configurations and automate infrastructure.</li> <li>huginn agent that monitors web for you - https://github.com/huginn/huginn</li> </ul> </li> <li> <p>DevOps and Infrastructure Management</p> <ul> <li>Examples: Infrastructure as code, deployment scripts, and server configuration.</li> <li>Details: Ruby is widely used in the DevOps field for infrastructure management and automation. Capistrano is a deployment automation tool written in Ruby that is used to automate the deployment of web applications. Additionally, Vagrant uses Ruby to script the setup and management of virtualized development environments.</li> </ul> </li> <li> <p>Web Scraping and Data Processing</p> <ul> <li>Examples: Extracting data from websites, data transformation, and reporting.</li> <li>Details: Ruby is used for web scraping and data processing due to its easy-to-read syntax and powerful libraries like Nokogiri (for parsing HTML and XML) and Mechanize (for automating interaction with websites). For example, Ruby can be used to scrape e-commerce websites to gather pricing data or product information.</li> </ul> </li> <li> <p>Prototyping and MVP Development</p> <ul> <li>Examples: Rapid application development, startups, and proof-of-concept apps.</li> <li>Details: Ruby\u2019s simplicity and the Rails framework's speed make it ideal for quickly developing prototypes or minimum viable products (MVPs). Startups often use Ruby to build and iterate on their initial product versions due to the speed at which they can get a product to market. For instance, Basecamp was initially developed as a Ruby on Rails application.</li> </ul> </li> <li> <p>Content Management Systems (CMS)</p> <ul> <li>Examples: Blog platforms, company websites, and documentation sites.</li> <li>Details: Ruby is used to build and manage content management systems. Jekyll, a static site generator written in Ruby, is widely used for creating blogs and documentation sites. GitHub Pages uses Jekyll to serve static websites directly from a repository.</li> <li>Jekyll a static site generator used in github pages - https://github.com/jekyll/jekyll</li> </ul> </li> <li> <p>API Development</p> <ul> <li>Examples: RESTful APIs, backend services, and microservices.</li> <li>Details: Ruby on Rails is commonly used to build RESTful APIs that can serve as the backend for mobile apps, web applications, or other services. For example, the backend of the SoundCloud music streaming platform was originally built using Ruby on Rails.</li> </ul> </li> <li> <p>E-commerce</p> <ul> <li>Examples: Online stores, shopping carts, and payment gateways.</li> <li>Details: Ruby on Rails is used to build e-commerce platforms due to its flexibility and ease of integration with payment gateways and third-party services. Spree Commerce is an open-source e-commerce platform built with Ruby on Rails, which can be customized for different types of online stores.</li> </ul> </li> <li> <p>Testing and Quality Assurance</p> <ul> <li>Examples: Test automation, behavior-driven development (BDD), and continuous integration.</li> <li>Details: Ruby is used extensively in software testing, with frameworks like RSpec for BDD and Cucumber for acceptance testing. These tools allow developers to write clear, human-readable tests that ensure code quality. For example, a development team might use RSpec to write unit tests for a Rails application.</li> </ul> </li> <li> <p>Education</p> <ul> <li>Examples: Teaching programming concepts, coding bootcamps, and introductory courses.</li> <li>Details: Ruby\u2019s readable syntax and ease of learning make it a popular choice for teaching programming to beginners. Many coding bootcamps and introductory programming courses use Ruby to teach fundamental programming concepts. Codecademy and The Odin Project both offer Ruby courses for learners.</li> </ul> </li> <li> <p>Game Development</p> <ul> <li>Examples: 2D games, game scripting, and prototyping.</li> <li>Details: While not as common as some other languages in game development, Ruby is sometimes used for creating 2D games and game prototypes. Gosu is a Ruby library that provides tools for game development, allowing developers to create simple games and interactive applications.</li> </ul> </li> <li> <p>Social Media and Content Platforms</p> <ul> <li>Examples: Social networking sites, content-sharing platforms, and forums.</li> <li>Details: Ruby on Rails is often used to build social media and content platforms due to its rapid development cycle and scalability. Twitter was originally built using Ruby on Rails before transitioning to other technologies as it scaled.</li> <li>Mastodon a social medial decentralized app - https://github.com/mastodon/mastodon</li> <li>Discourse, a platform for community discussion - https://github.com/discourse/discourse</li> </ul> </li> <li> <p>APIs and Microservices</p> <ul> <li>Examples: Building modular applications, developing and consuming web services.</li> <li>Details: Ruby on Rails is used to develop APIs and microservices, allowing for modular and scalable application architectures. It\u2019s often chosen for creating backend services that interact with frontend applications or other microservices.</li> </ul> </li> </ul> <p>Ruby's versatility, combined with the power of Ruby on Rails, makes it a popular choice for web development, automation, and a variety of other applications where productivity and developer happiness are prioritized. Its ability to rapidly build and iterate on applications has made it a favorite among startups, educators, and developers who value clean, maintainable code.</p>"},{"location":"programming/programming-languages/ruby/resources/","title":"Resources","text":"<ul> <li>https://www.ruby-lang.org/en/</li> </ul>"},{"location":"programming/programming-languages/ruby/package-managers/gem/","title":"gem","text":"<ul> <li><code>gem search [pkgname]</code> search particular package</li> <li><code>gem install [pkgname]</code> install particular package</li> <li><code>gem list</code> show insatalled packages</li> <li> <p><code>gem uninstall pkgname</code> uninstall package</p> </li> <li> <p>compiler <code>ruby</code></p> <ul> <li><code>sudo apt install ruby</code></li> <li><code>sudo apt install ruby-dev</code></li> </ul> </li> <li>packages are called <code>gems</code></li> <li><code>gems</code> are installed in <code>GEM_PATH</code>   so set these variables in your shell   <code>export GEM_HOME=$HOME/.gem</code> and   <code>export GEM_PATH=$HOME/.gem</code></li> <li>how to use gems in your project<ul> <li>mentioned in the <code>Gemfile</code></li> </ul> </li> </ul>"},{"location":"programming/programming-languages/ruby/package-managers/gem/#how-to-install-gem","title":"How to install gem","text":"<ul> <li><code>gem install buldler</code> - installs the <code>bundler</code> gem for current user<ul> <li>location <code>$GEM_HOME</code></li> </ul> </li> <li>if you do <code>sudo gem install bundler</code> then it will install the gem for all users<ul> <li>location <code>/usr/share/rubygems-integration</code></li> </ul> </li> </ul>"},{"location":"programming/programming-languages/ruby/package-managers/gem/#how-to-remove-a-gem","title":"How to remove a gem","text":"<ul> <li><code>gem list</code> - show list of installed gems</li> <li><code>gem list --no-versions</code> - show installed gems without there versions</li> <li><code>gem uninstall gem-name</code><ul> <li>remove a gem if it is install only for current user</li> </ul> </li> <li><code>sudo gem uninstall gem-name</code><ul> <li>remove a gem</li> </ul> </li> <li><code>sudo gem uninstall -i /usr/share/rubygems-integration/all gem-name</code><ul> <li>forcefully remove a gem</li> </ul> </li> <li>remove all installed gems:</li> </ul> <pre><code>for i in `gem list --no-versions`; do sudo gem uninstall -aIx $i; done\n</code></pre> <ul> <li><code>sudo gem update --system</code> update gems</li> </ul>"},{"location":"programming/programming-languages/ruby/package-managers/gem/#bundler","title":"bundler","text":"<ul> <li>bundler is used to manage dependencies</li> <li><code>bundle install</code> install all the gems mentioned in gemfile</li> </ul>"},{"location":"programming/programming-languages/rust/","title":"Rust","text":"<p>Rust is a systems programming language known for its performance, safety, and concurrency capabilities. It is designed to provide low-level control without sacrificing safety, making it ideal for applications where performance and reliability are critical. Here are some common areas where Rust is used, along with examples:</p> <ul> <li> <p>Systems Programming</p> <ul> <li>Examples: Operating systems, kernels, and low-level systems.</li> <li>Details: Rust is widely used in systems programming due to its ability to provide fine-grained control over hardware while ensuring memory safety. Redox OS, a Unix-like operating system, is entirely written in Rust, showcasing its capabilities in building secure and efficient system software.</li> <li>Redox OS repo - https://github.com/redox-os/redox</li> </ul> </li> <li> <p>WebAssembly (Wasm)</p> <ul> <li>Examples: Web applications, browser-based games, and performance-critical web components.</li> <li>Details: Rust is one of the leading languages for compiling to WebAssembly, which allows developers to run high-performance code in the browser. Rust\u2019s safety and speed make it ideal for WebAssembly applications. Mozilla's Servo project, an experimental browser engine, leverages Rust and WebAssembly to achieve high performance and security.</li> <li>WebAssembly - https://github.com/WebAssembly</li> </ul> </li> <li> <p>Web Development</p> <ul> <li>Examples: Backend services, web servers, and APIs.</li> <li>Details: Rust is increasingly being used in web development, particularly for building high-performance web servers and APIs. Frameworks like Rocket and Actix are popular choices for building Rust web applications. For instance, Dropbox has utilized Rust in their file synchronization service, taking advantage of Rust\u2019s concurrency features to handle heavy I/O tasks efficiently.</li> </ul> </li> <li> <p>Game Development</p> <ul> <li>Examples: Game engines, real-time simulations, and game scripting.</li> <li>Details: Rust\u2019s performance and memory safety make it a strong candidate for game development. Amethyst and Bevy are game engines built using Rust that support the creation of 2D and 3D games. Rust is used to ensure that games run efficiently while minimizing the risks of crashes or memory leaks.</li> </ul> </li> <li> <p>Embedded Systems</p> <ul> <li>Examples: Firmware, IoT devices, and microcontroller programming.</li> <li>Details: Rust is gaining traction in embedded systems development due to its low memory footprint and safety guarantees. Tock is an embedded operating system written in Rust designed for low-power devices like IoT sensors, where safety and concurrency are crucial.</li> </ul> </li> <li> <p>Command-Line Tools</p> <ul> <li>Examples: CLI utilities, automation scripts, and developer tools.</li> <li>Details: Rust is popular for building command-line tools because of its performance and ease of distribution as a single binary. ripgrep, a fast search tool, is an example of a popular CLI utility written in Rust that is known for its speed and efficiency in searching large codebases.</li> <li>ripgrep - https://github.com/BurntSushi/ripgrep</li> </ul> </li> <li> <p>Concurrency and Parallelism</p> <ul> <li>Examples: Concurrent applications, parallel processing, and real-time systems.</li> <li>Details: Rust\u2019s ownership model and concurrency guarantees make it well-suited for developing concurrent and parallel applications. Rayon is a Rust library that provides data parallelism for collections, making it easy to write parallel code without worrying about data races.</li> </ul> </li> <li> <p>Networking</p> <ul> <li>Examples: Network protocols, high-performance network services, and distributed systems.</li> <li>Details: Rust is used in networking to build high-performance, reliable network services and protocols. Linkerd2-proxy, a component of the Linkerd service mesh, is written in Rust to provide a lightweight, fast, and secure proxy for microservices.</li> </ul> </li> <li> <p>Security-Sensitive Applications</p> <ul> <li>Examples: Cryptography, secure communication tools, and security libraries.</li> <li>Details: Rust is favored for security-sensitive applications because of its strong safety guarantees. Rustls is a modern TLS library written in Rust that provides secure communication with a focus on memory safety and simplicity, avoiding many of the vulnerabilities found in traditional C-based TLS libraries.</li> </ul> </li> <li> <p>Blockchain and Cryptocurrency</p> <ul> <li>Examples: Blockchain platforms, smart contracts, and decentralized applications (DApps).</li> <li>Details: Rust is used in blockchain development for its performance and security features. Polkadot, a prominent blockchain platform, is built using Rust, benefiting from its ability to handle complex, concurrent operations securely.</li> </ul> </li> <li> <p>High-Performance Computing (HPC)</p> <ul> <li>Examples: Scientific simulations, data analysis, and numerical computation.</li> <li>Details: Rust\u2019s performance and safety make it suitable for high-performance computing tasks that require efficient use of resources. Rust is used in scientific computing to perform simulations and data analysis, where both speed and correctness are paramount.</li> </ul> </li> <li> <p>Database Development</p> <ul> <li>Examples: Database engines, query optimizers, and storage systems.</li> <li>Details: Rust is used to develop high-performance, reliable databases and storage systems. TiKV, a distributed key-value database, is written in Rust and serves as a storage layer for the TiDB database, providing strong consistency and high availability.</li> </ul> </li> <li> <p>Artificial Intelligence and Machine Learning</p> <ul> <li>Examples: AI frameworks, machine learning models, and data processing.</li> <li>Details: Rust is starting to be used in AI and machine learning for its speed and safety features. Libraries like tch-rs provide bindings to the PyTorch machine learning framework, enabling Rust developers to build and train models with Rust\u2019s performance advantages.</li> </ul> </li> <li> <p>Middleware and Infrastructure</p> <ul> <li>Examples: Load balancers, proxies, and service meshes.</li> <li>Details: Rust is used to build middleware and infrastructure components that require high throughput and low latency. Conduit, a scalable chat server built with Rust, is an example of a project that benefits from Rust\u2019s performance and safety in handling real-time communication.</li> </ul> </li> <li> <p>Open Source Projects</p> <ul> <li>Examples: Libraries, frameworks, and developer tools.</li> <li>Details: Rust is often chosen for open-source projects due to its strong community and focus on safety and performance. The Rust ecosystem has a rich collection of libraries and tools that are actively maintained and developed, such as Clippy (a linter for Rust code) and Cargo (Rust\u2019s package manager and build system).</li> </ul> </li> <li> <p>Alacritty - a terminal emulator - https://github.com/alacritty/alacritty</p> </li> </ul>"},{"location":"programming/programming-languages/rust/installation/","title":"Installation","text":"<ul> <li>compiler <code>rust</code><ul> <li><code>rustup</code> - installer for ruby, installs the latest version of ruby</li> <li>https://rustup.rs/</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/rust/resources/","title":"Resources","text":""},{"location":"programming/programming-languages/rust/resources/#documentation","title":"Documentation","text":"<ul> <li>https://doc.rust-lang.org/book/</li> <li>https://www.rust-lang.org/</li> </ul>"},{"location":"programming/programming-languages/rust/package-managers/cargo/","title":"cargo","text":"<ul> <li><code>cargo install --list</code> list installed cargo packages</li> <li><code>cargo install [pkgname]</code> install package from crates.io</li> <li><code>cargo search [pkgname]</code> search package from crates.io</li> <li><code>cargo uninstall [pkgname]</code> uninstall particular package</li> </ul>"},{"location":"programming/programming-languages/scala/","title":"Scala","text":"<p>Scala is a versatile programming language that blends object-oriented and functional programming paradigms. It runs on the Java Virtual Machine (JVM), making it interoperable with Java and attractive for a variety of use cases, particularly in data processing, distributed computing, and web development. Here are some common areas where Scala is used, along with examples:</p> <ul> <li> <p>Big Data Processing</p> <ul> <li>Examples: Data pipelines, real-time analytics, and distributed data processing.</li> <li>Details: Scala is widely used in big data processing due to its strong support for functional programming, which is well-suited for data transformations and parallelism. Apache Spark, a leading big data processing framework, is written in Scala. Spark allows for processing large datasets across clusters, making it popular for tasks like data aggregation, machine learning, and stream processing.</li> </ul> </li> <li> <p>Distributed Computing</p> <ul> <li>Examples: Distributed systems, microservices, and high-performance computing.</li> <li>Details: Scala\u2019s concurrency model and compatibility with the JVM make it ideal for distributed computing. Akka, a powerful toolkit for building highly concurrent, distributed, and fault-tolerant systems, is implemented in Scala. Akka is used in scenarios where scalability and resilience are critical, such as in messaging systems, real-time analytics, and microservices architectures.</li> </ul> </li> <li> <p>Web Development</p> <ul> <li>Examples: Web applications, RESTful APIs, and server-side components.</li> <li>Details: Scala is used in web development, particularly for building scalable and high-performance web applications. The Play Framework is a popular web framework written in Scala (and also supports Java). It is known for its asynchronous, non-blocking architecture, which is ideal for handling high traffic. Companies like LinkedIn and The Guardian use Play Framework for their web platforms.</li> </ul> </li> <li> <p>Data Science and Machine Learning</p> <ul> <li>Examples: Data analysis, predictive modeling, and AI applications.</li> <li>Details: Scala is used in data science and machine learning, especially in environments that already utilize big data tools like Apache Spark. Libraries such as Breeze provide numerical processing and linear algebra capabilities, while Mllib (a part of Apache Spark) offers scalable machine learning algorithms. Data scientists use Scala to process large datasets and build machine learning models in distributed environments.</li> </ul> </li> <li> <p>Financial Services and Quantitative Analysis</p> <ul> <li>Examples: Algorithmic trading, risk analysis, and financial modeling.</li> <li>Details: Scala is popular in the financial sector for developing systems that require high performance and reliability. Companies like Goldman Sachs and Credit Karma use Scala for various applications, including trading platforms, risk management systems, and fraud detection algorithms. Scala\u2019s type safety and functional programming features help in building robust and maintainable financial software.</li> </ul> </li> <li> <p>Telecommunications</p> <ul> <li>Examples: Real-time messaging systems, network management, and billing systems.</li> <li>Details: Scala\u2019s concurrency model and performance make it suitable for telecommunications applications, where real-time data processing and high throughput are required. Ericsson, a leading telecommunications company, has used Scala in its systems for managing and processing large volumes of network data.</li> </ul> </li> <li> <p>Streaming Data Applications</p> <ul> <li>Examples: Real-time dashboards, event processing systems, and monitoring tools.</li> <li>Details: Scala is commonly used to build streaming data applications, leveraging tools like Apache Kafka and Apache Flink. These applications process continuous streams of data in real-time, which is essential in industries like finance, telecommunications, and e-commerce. For example, streaming platforms use Scala to handle real-time data feeds and provide up-to-the-second analytics.</li> </ul> </li> <li> <p>Parallel and Concurrent Programming</p> <ul> <li>Examples: Concurrent applications, parallel processing systems, and high-performance computing.</li> <li>Details: Scala\u2019s built-in support for parallel and concurrent programming, along with libraries like Akka, make it a strong choice for building systems that require efficient handling of parallel tasks. This is particularly useful in scenarios like scientific computing, financial modeling, and real-time analytics, where tasks must be processed simultaneously across multiple cores or machines.</li> </ul> </li> <li> <p>ETL (Extract, Transform, Load) Pipelines</p> <ul> <li>Examples: Data extraction from various sources, data transformation, and loading into databases or data warehouses.</li> <li>Details: Scala is often used to implement ETL pipelines, especially in conjunction with tools like Apache Spark. These pipelines are essential in preparing large datasets for analysis, such as in business intelligence applications. Companies use Scala-based ETL processes to clean, transform, and load data into systems like Hadoop or cloud-based data warehouses.</li> </ul> </li> <li> <p>Compiler and Language Development</p> <ul> <li>Examples: Custom language interpreters, DSLs (domain-specific languages), and compiler construction.</li> <li>Details: Scala\u2019s flexibility and advanced type system make it a good choice for developing compilers and domain-specific languages. The language itself has been used in academic research and projects that involve compiler construction and language design.</li> </ul> </li> <li> <p>Reactive Programming</p> <ul> <li>Examples: Real-time applications, event-driven systems, and non-blocking I/O operations.</li> <li>Details: Scala supports reactive programming, an approach that allows systems to be more resilient, scalable, and responsive. The Reactive Streams API, which helps in building asynchronous data streams, is often used in Scala applications that require handling large volumes of data in real-time, such as online video streaming platforms and social media feeds.</li> </ul> </li> <li> <p>Enterprise Applications</p> <ul> <li>Examples: Large-scale enterprise software, CRM systems, and ERP systems.</li> <li>Details: Scala is used in building enterprise applications, where robustness, scalability, and integration with existing Java infrastructure are critical. Scala\u2019s interoperability with Java makes it easier to integrate with legacy systems while benefiting from modern programming paradigms.</li> </ul> </li> <li> <p>Content Management Systems (CMS)</p> <ul> <li>Examples: Company websites, blog platforms, and digital content management.</li> <li>Details: Scala can be used to build CMS platforms, taking advantage of its ability to handle complex data models and ensure responsive, high-performance delivery of content. Large media companies use Scala for building scalable and flexible content management solutions.</li> </ul> </li> <li> <p>Software Tooling and Development Tools</p> <ul> <li>Examples: Build tools, IDE plugins, and static analysis tools.</li> <li>Details: Scala is used to develop software tools that assist in software development processes. SBT (Simple Build Tool) is a popular build tool for Scala projects, providing features like incremental compilation and dependency management. Scala is also used to create IDE plugins and static analysis tools that enhance developer productivity.</li> </ul> </li> <li> <p>Academia and Research</p> <ul> <li>Examples: Teaching programming concepts, research in functional programming, and prototyping.</li> <li>Details: Scala is used in academic research and teaching due to its combination of object-oriented and functional programming paradigms. Universities and research institutions use Scala to explore new programming models, teach programming, and prototype experimental systems.</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/scala/resources/","title":"Resources","text":""},{"location":"programming/programming-languages/scala/resources/#documentataion","title":"Documentataion","text":"<ul> <li>https://www.scala-lang.org/</li> </ul>"},{"location":"programming/programming-languages/scala/resources/#articles","title":"Articles","text":"<ul> <li>https://www.baeldung.com/scala/sbt-intro</li> </ul>"},{"location":"programming/programming-languages/scala/summary/basics/","title":"Basics of Scala","text":""},{"location":"programming/programming-languages/scala/summary/basics/#how-to-use-scala","title":"How to use scala ?","text":"<ul> <li>you should have <code>jvm</code> installed.</li> <li>download scala binary form the scala official website</li> <li>it comes with a repl<ul> <li>read execute print loop</li> </ul> </li> </ul> <ul> <li>some tools also help you set up scala for the system</li> <li><code>sbt</code> - scala built tool is one of them<ul> <li>it is a build system</li> <li>help to manage dependencies for the scala project</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/scala/summary/basics/#hello-world","title":"Hello World","text":"<pre><code>object HelloWorld extends App {\n  println(\"Hello, World!\")\n}\n</code></pre> <ul> <li>singleton object, no need of class like in java</li> <li>compile it with <code>scalac helloworld.scala</code></li> <li>run it with <code>scala HelloWorld</code></li> <li><code>scala -e</code> for interactive mode, and scripting</li> </ul>"},{"location":"programming/programming-languages/scala/summary/basics/#var-and-val","title":"<code>var</code> and <code>val</code>","text":"<ul> <li><code>var</code> for variables whose values will be changed - <code>mutable</code></li> <li><code>val</code> for variable whose value will not be changed - <code>immutable</code></li> </ul>"},{"location":"programming/programming-languages/scala/summary/basics/#objects","title":"Objects","text":"<ul> <li>object have states and behavior</li> <li>instance of a class</li> </ul> <p>syntax:</p> <pre><code>object obj-name{\n\n}\n</code></pre>"},{"location":"programming/programming-languages/scala/summary/basics/#methods","title":"Methods","text":"<ul> <li>behavior</li> </ul> <pre><code>def functionName ([list of parameters]) : [return type] = {\n  //function body\n  return [expr]\n}\n</code></pre> <pre><code>def printHello(){\n\n}\n</code></pre>"},{"location":"programming/programming-languages/scala/summary/basics/#field","title":"Field","text":"<pre><code>val name = \"Shivanshi\"\nvar age = 11\n</code></pre>"},{"location":"programming/programming-languages/scala/summary/basics/#initialize-variables","title":"Initialize Variables","text":"<pre><code>var varname = values\nvar varname:Type = value\nvarname: Type = value\n</code></pre>"},{"location":"programming/programming-languages/scala/summary/basics/#conditionals","title":"Conditionals","text":"<pre><code>object demo{\n  def isEven(s:Int):Boolean = {\n    if(x%2==0) true\n    else false\n  }\n}\n</code></pre>"},{"location":"programming/programming-languages/scala/summary/basics/#loops","title":"Loops","text":"<ul> <li>while loop is supported</li> </ul> <pre><code>val i = 0;\nwhile(i&lt;10){\n  println(i)\n  i = i+1\n}\n</code></pre> <ul> <li>for loop is supported but with some changes, and diff syntax</li> </ul> <pre><code>for(i &lt;- 1 to 10){\n  println(i)\n}\n</code></pre> <ul> <li>nested loops in one line</li> </ul> <pre><code>for(i &lt;- 1 to 10; j &lt;- 1 to 100)\n  println(i + ' ' + j)\n</code></pre> <p>same as</p> <pre><code>for(i &lt;- 1 to 10){\n  for(j &lt;- 1 to 100)\n    println(i + ' ' + j)\n}\n</code></pre> <ul> <li>do while loop is not supported</li> </ul>"},{"location":"programming/programming-languages/scala/summary/basics/#data-types-in-scala","title":"Data types in Scala","text":"<p>all java data types are supported</p> <ul> <li><code>Byte</code>, <code>Short</code></li> <li><code>Int</code></li> <li><code>Long</code></li> <li><code>Float</code></li> <li><code>Double</code></li> <li><code>Char</code></li> <li><code>Boolean</code></li> <li><code>String</code></li> </ul> <p>and some additional types</p> <ul> <li><code>Unit</code> - no value, equivalent of <code>void</code> in <code>java</code></li> </ul> <p>~</p> <ul> <li><code>Null</code> - null or empty reference</li> <li><code>AnyRef</code> - a supertype of any reference</li> </ul> <p>~</p> <ul> <li><code>Nothing</code> - a subtype of every other types</li> <li><code>Any</code> - a supertype of any type</li> </ul> <p>for object</p> <pre><code>Any -&gt; ... -&gt; Nothing\n</code></pre> <p>for references</p> <pre><code>AnyRef -&gt; ... -&gt; Null\n</code></pre>"},{"location":"programming/programming-languages/scala/summary/basics/#difference-bw-null-null-nothing-unit-nil-none","title":"Difference b/w <code>null</code> <code>Null</code> <code>Nothing</code> <code>Unit</code> <code>Nil</code> <code>None</code>","text":"<ul> <li><code>null</code> - literal, a value</li> <li><code>Null</code> - a subtype of all reference types</li> </ul> <p>~</p> <ul> <li><code>Nothing</code><ul> <li>It doesn't have any methods or values</li> <li>extends the Any type</li> </ul> </li> </ul> <p>~</p> <ul> <li><code>Nil</code> - empty list - <code>List()</code></li> </ul> <p>~</p> <ul> <li><code>None</code> - subtype of Option type, opposite of <code>Some</code></li> </ul> <p>~</p> <ul> <li><code>Unit</code> - <code>void</code> empty return type</li> </ul>"},{"location":"programming/programming-languages/scala/summary/basics/#types-of-functions","title":"Types of Functions","text":""},{"location":"programming/programming-languages/scala/summary/basics/#first-order","title":"<code>first order</code>","text":"<ul> <li>don't take functions as arguments</li> </ul>"},{"location":"programming/programming-languages/scala/summary/basics/#higher-order","title":"<code>higher order</code>","text":"<ul> <li>take functions as arguments</li> </ul>"},{"location":"programming/programming-languages/scala/summary/basics/#nested-functions","title":"<code>nested functions</code>","text":"<p>Define function inside another function.</p> <pre><code>def factorial(x:Int):Int = {\n  // making a nested function\n  def fact(i:Int, acc:Int):Int = {\n    if(i&lt;=1) acc\n    else fact(i-1,i * acc)\n  }\n  fact(x, 1)\n}\n</code></pre>"},{"location":"programming/programming-languages/scala/summary/basics/#anonymous","title":"<code>anonymous</code>","text":"<ul> <li>Anonymous functions in source code are called function literals</li> <li>and at run time, function literals are instantiated into objects called function values</li> <li>Scala supports first-class functions<ul> <li>which means functions can be expressed in function literal syntax,</li> <li>i.e., <code>(x: Int) =&gt; x + 1</code></li> <li>and that functions can be represented by objects</li> <li>which are called function values</li> </ul> </li> </ul> <p>e.g.</p> <ul> <li>with one parameter <code>var inc = (x:Int) =&gt; x+1</code></li> <li>with two parameter <code>var mul = (x: Int, y: Int) =&gt; x*y</code></li> <li>with zero parameter <code>var userVal = () =&gt; { 345 }</code>, <code>println(userVal())</code></li> </ul>"},{"location":"programming/programming-languages/scala/summary/basics/#closures","title":"Closures","text":"<ul> <li>a function, whose return value depends on the value of one or more variables declared outside this function.</li> <li>variable declares outside the function is called - free variable</li> <li>variable in the definition is called bound variable</li> </ul> <p>e.g.</p> <pre><code>val more = 10 // free variable\nvar y = (x:Int) =&gt; x + more // x-&gt; bound variable\n</code></pre> <ul> <li>the function value (the object) that\u2019s created at runtime from this function literal is called a closure</li> </ul>"},{"location":"programming/programming-languages/scala/summary/basics/#tail-recursion","title":"tail recursion","text":"<ul> <li>recursion at the end</li> <li>use <code>@tailrec</code> annotation</li> </ul> <pre><code>@tailrec def factorial(x:Int, acc:Int):Int = {\n  if(n&lt;=1)\n    acc\n  else\n    factorial(x-1, acc*i)\n}\n</code></pre>"},{"location":"programming/programming-languages/scala/summary/basics/#input-in-scala","title":"input in scala","text":"<pre><code>var a = scala.io.StdIn.readInt()\nvar b = scala.io.StdIn.readDouble()\nvar c = scala.io.StdIn.readLine()\n</code></pre>"},{"location":"programming/programming-languages/scala/summary/basics/#try-catch-exceptions","title":"try-catch exceptions","text":"<pre><code>try {\n  doSomething()\n}\ncatch {\n  case ex: IOException =&gt; println(\"Oops!\")\n  case ex: NullPointerException =&gt; println(\"Oops!!\")\n}\nfinally{\n  println(\"this will execute every time even if code terminates in middle\")\n  println(\"so close files here\")\n}\n</code></pre>"},{"location":"programming/programming-languages/scala/summary/basics/#match","title":"match","text":"<pre><code>val first = \"chips\"\nfirst match {\n  case \"salt\" =&gt; println(\"pepper\")\n  case \"chips\" =&gt; println(\"salsa\")\n  case \"eggs\" =&gt; println(\"bacon\")\n}\n</code></pre> <pre><code>def doChore(chore: String): String = chore match { \n    case \"clean dishes\" =&gt; \"scrub, dry\"\n    case \"cook dinner\" =&gt; \"chop, sizzle\"\n    case _ =&gt; \"whine, complain\"\n}\n</code></pre>"},{"location":"programming/programming-languages/scala/summary/basics/#different-types-of-for-loops","title":"Different Types Of For Loops","text":"<ul> <li>with single range</li> </ul> <pre><code>for(i &lt;- 1 to 100){\n  println(i)\n}\n</code></pre> <ul> <li>with multiple range</li> </ul> <pre><code>for(i &lt;- 1 to 10; b &lt;- 1 to 10){\n  println(i+j)\n}\n</code></pre> <ul> <li>with collections</li> </ul> <pre><code>for(i &lt;- List(2,3,5,6)){\n  println(i)\n}\n</code></pre> <ul> <li>with filters</li> </ul> <pre><code>for(\n  i &lt;- List(1,3,4,6,7)\n  if i !=3; if i!=4\n) {\n    println(i)\n}\n</code></pre> <ul> <li>with yield</li> </ul> <pre><code>var a =\n  for (\n    i &lt;- List(1, 2, 3, 4)\n    if i != 3; if i != 4\n  ) yield i\n</code></pre>"},{"location":"programming/programming-languages/scala/summary/collections/","title":"Collections","text":"<ul> <li>collection framework provides data structures for collecting one or more values of given types</li> </ul>"},{"location":"programming/programming-languages/scala/summary/collections/#collection-class-hierarchy","title":"collection class hierarchy","text":"<ul> <li><code>Iterable</code> -&gt; trait<ul> <li><code>Collection</code> -&gt;trait<ul> <li><code>Seq</code> -&gt; trait<ul> <li><code>List</code> -&gt; sealed abstract</li> <li><code>Array</code> -&gt; final</li> <li><code>Array Buffer</code></li> </ul> </li> <li><code>Set</code> -&gt; trait<ul> <li><code>Set</code> -&gt; immutable</li> <li><code>Set</code> -&gt; mutable</li> </ul> </li> <li><code>Map</code> -&gt; trait<ul> <li><code>Map</code> -&gt; immutables</li> <li><code>Map</code> -&gt; mutable</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"programming/programming-languages/scala/summary/collections/#array","title":"array","text":"<ul> <li>contiguous memory allocated</li> <li>elements can be accesses using indices</li> <li>homogeneous elements</li> </ul> <pre><code>val numbers = new Array[Int](5)\nnumbers: Array[Int] = Array(0,0,0,0,0)\n</code></pre> <ul> <li><code>arr.toList</code> convert array to list</li> <li><code>arr.toString</code> convert array to string</li> </ul>"},{"location":"programming/programming-languages/scala/summary/collections/#array-buffer","title":"array buffer","text":"<ul> <li>dynamic memory allocation</li> <li>no need to specify the size</li> </ul> <pre><code>// no need to specify the size\nval buf = new ArrayBuffer[Int]()\n\n// use some initial size\nval buf = new ArrayBuffer[Int](10)\n</code></pre> <ul> <li><code>buf += 12</code></li> <li><code>buf += 15</code></li> </ul>"},{"location":"programming/programming-languages/scala/summary/collections/#lists","title":"lists","text":"<ul> <li>like arrays but</li> <li>immutable</li> <li>have recursive structure, where array don't</li> <li>homogeneous elements</li> </ul> <p>With type inference:</p> <pre><code>var fruit = List(\"apple\", \"banana\", \"pear\")\nvar nums = List(1,2,3,4,5)\nvar listinlist = List(List(1,2,3), List(1,2,4), List(3,4,5))\nvar emptyList = List()\n</code></pre> <p>Without type inference:</p> <pre><code>var fruit:List[String] = List(\"apple\", \"banana\", \"pear\")\nvar nums:List[Int] = List(1,2,3,4,5)\nvar listinlist:List[List[Int]] = List(List(1,2,3), List(1,2,4), List(3,4,5))\nvar emptyList:List[Nothing] = List()\n</code></pre> <ul> <li>list types are covariant</li> <li>that means</li> <li>if <code>S</code> is subtype of <code>T</code> then</li> <li><code>List[S]</code> is subtype of <code>List[T]</code></li> <li>e.g.</li> <li><code>List[String]</code> is subtype of <code>List[Object]</code></li> </ul> <ul> <li>list is build form two fundamental building blocks <code>Nil</code> and <code>::</code> (cons)</li> <li><code>Nil</code> represent empty list</li> <li><code>::</code> (infix operator) expresses list extension ar the front</li> <li><code>x::xs</code> - represents list with first element <code>x</code> followed by list <code>xs</code></li> </ul> <pre><code>val fruits = \"apple\" :: (\"oranges\" :: (\"bananan\" :: Nil))\n</code></pre>"},{"location":"programming/programming-languages/scala/summary/collections/#basic-operations-on-the-list","title":"basic operations on the list","text":"<ul> <li><code>l.head</code> returns the first element of the list</li> <li><code>l.tail</code> returns a list with the first element removed</li> <li><code>l.isEmpty</code> return <code>true</code> if list has no elements otherwise <code>false</code></li> <li><code>l.length</code> return the length of the list</li> <li><code>l.last</code> - return the end element</li> <li><code>l.init</code> - return a list removing the last element</li> <li><code>l.reverse</code> - reverse the list</li> <li><code>l.toArray</code> - convert list to array</li> <li><code>l.toString</code> - convert list to a string</li> <li><code>l.copyTo(arr, startidx)</code> - copy the list to <code>arr</code> starting from <code>startidx</code> of array</li> <li><code>l.take(n)</code> - return a list of first <code>n</code> elements</li> <li><code>l.drop(n)</code> - return a list of elements except first <code>n</code> elements</li> <li><code>l.splitAt(n)</code> - return two list split at <code>n</code></li> </ul> <pre><code>\n</code></pre> <ul> <li><code>l(n)</code> return <code>n</code> element</li> <li>l.apply(n)<code>return</code>n` element</li> <li><code>l.indices</code> return a list of the indices given in list</li> <li><code>l.mkString(prefix, separator, suffix)</code> - set prefix, separator, and suffix while converting to string</li> </ul> <pre><code>var l = List('a', 'b', 'c', 'd', 'e')\nprintln(l.mkString(\"[\", \",\", \"]\") // [a,b,c,d,e]\nprintln(l.mkString(\"List(\", \",\", \"]\") // List(a,b,c,d,e]\n</code></pre>"},{"location":"programming/programming-languages/scala/summary/collections/#concatenating-lists","title":"concatenating lists","text":"<pre><code>val a = List(1,2) ::: List(3,4,5)\n// or\nval a = List.concat(List(1,2), List(3,4,5))\n</code></pre>"},{"location":"programming/programming-languages/scala/summary/collections/#pattern-matching-in-list","title":"pattern matching in list","text":"<ul> <li>simple pattern matching</li> </ul> <pre><code>val fruit = List(\"apple\", \"mango\", \"banana\")\nval List(a,b,c) = fruit\n\n// a = \"apple\"\n// b = \"mango\"\n// c = \"banana\"\n</code></pre> <ul> <li>when list size is unknown</li> </ul> <pre><code>val fruit = List(\"apple\", \"mango\", \"banana\", \"pear\", \"onion\")\nvar a :: b :: rest = fruit\n// a = \"apple\"\n// b = \"mango\"\n// c = List(\"banana\", \"pear\", \"onion\")\n</code></pre>"},{"location":"programming/programming-languages/scala/summary/collections/#higher-order-function-in-list","title":"higher order function in list","text":""},{"location":"programming/programming-languages/scala/summary/collections/#filter","title":"filter","text":"<ul> <li><code>l</code> - a list of type <code>T</code></li> <li><code>fun</code> - a predicate function of type <code>T=&gt;Boolean</code></li> <li><code>l.filter(fun)</code> return a list of elements for which <code>fun</code> return <code>true</code></li> </ul> <pre><code>var a = List(1,2,3,4,5)\nvar b = a.filter(_ % 2 == 0) // b = List(2,4)\n</code></pre>"},{"location":"programming/programming-languages/scala/summary/collections/#partition","title":"partition","text":"<ul> <li><code>l</code> - a list of type <code>T</code></li> <li><code>fun</code> - a predicate function of type <code>T=&gt;Boolean</code></li> <li><code>l.partition(fun)</code><ul> <li>return a tuple of list</li> <li>of elements for which <code>fun</code> return <code>true</code></li> <li>and of elements for which <code>fun</code> return <code>false</code></li> </ul> </li> </ul>"},{"location":"programming/programming-languages/scala/summary/collections/#find","title":"find","text":"<ul> <li><code>l</code> - a list of type <code>T</code></li> <li><code>fun</code> - a predicate function of type <code>T=&gt;Boolean</code></li> <li><code>l.find(fun)</code> -<ul> <li>return first element satisfying a given predicate</li> <li>return <code>None</code> if no element is found</li> </ul> </li> </ul>"},{"location":"programming/programming-languages/scala/summary/collections/#takewhile","title":"takeWhile","text":"<ul> <li><code>l</code> - a list of type <code>T</code></li> <li><code>fun</code> - a predicate function of type <code>T=&gt;Boolean</code></li> <li><code>l.takeWhile(fun)</code> - take values till <code>fun</code> return <code>true</code></li> </ul>"},{"location":"programming/programming-languages/scala/summary/collections/#dropwhile","title":"dropWhile","text":"<ul> <li><code>l</code> - a list of type <code>T</code></li> <li><code>fun</code> - a predicate function of type <code>T=&gt;Boolean</code></li> <li><code>l.takeWhile(fun)</code> - drop values till <code>fun</code> return <code>true</code></li> </ul>"},{"location":"programming/programming-languages/scala/summary/collections/#span","title":"span","text":"<ul> <li><code>l</code> - a list of type <code>T</code></li> <li><code>fun</code> - a predicate function of type <code>T=&gt;Boolean</code></li> <li><code>l.span(fun)</code><ul> <li>return a tuple <code>(l.takeWhile(fun), l.dropWhile(fun))</code></li> </ul> </li> </ul>"},{"location":"programming/programming-languages/scala/summary/collections/#map","title":"map","text":"<ul> <li>apply a function to whole list and return it</li> </ul> <pre><code>val add10: Int =&gt; Int = _ + 10 // A function taking an Int and returning an Int\nList(1, 2, 3) map add10 // List(11, 12, 13) - add10 is applied to each element\n</code></pre>"},{"location":"programming/programming-languages/scala/summary/collections/#foreach","title":"foreach","text":"<ul> <li><code>l</code> - a list of type <code>T</code></li> <li><code>fun</code> - a predicate function of type <code>T=&gt;Unit</code></li> <li><code>l.foreach(fun)</code> - run <code>fun</code> for every value in the list</li> </ul> <p>e.g.</p> <pre><code>val aListOfNumbers = List(1, 2, 3, 4, 10, 20, 100)\naListOfNumbers foreach (x =&gt; println(x))\naListOfNumbers foreach println\n</code></pre>"},{"location":"programming/programming-languages/scala/summary/collections/#tuples","title":"tuples","text":"<p>e.g.</p> <ul> <li><code>(1, 2)</code></li> <li><code>(4, 3, 2)</code></li> <li><code>(1, 2, \"three\")</code></li> <li><code>(a, 2, \"three\")</code></li> <li><code>val divideInts = (x: Int, y: Int) =&gt; (x / y, x % y)</code> - function returning a tuple</li> </ul> <p><code>_._n</code> - access n element of the tuple, <code>1</code> based index</p> <pre><code>val d = divideInts(10, 3)    // (Int, Int) = (3,1)\nd._1    // Int = 3\nd._2    // Int = 1\n</code></pre> <p>also use multiple variable assignment</p> <pre><code>val (div, mod) = divideInts(10, 3)\ndiv     // Int = 3\nmod     // Int = 1\n</code></pre>"},{"location":"programming/programming-languages/scala/summary/collections/#option","title":"option","text":"<ul> <li>Scala <code>Option[T]</code> is a container for zero or one element of a given type.</li> <li>An <code>Option[T]</code> can be either <code>Some[T]</code> or <code>None</code> object, which represents a missing value.</li> </ul>"},{"location":"programming/programming-languages/scala/summary/collections/#ranges","title":"ranges","text":"<ul> <li><code>x to y by z</code> =  <code>x until (y+1) by z</code></li> <li><code>val range = 0 until 10</code> give <code>Range(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</code><ul> <li>start = 0</li> <li>end = 9 // not 10 but 9</li> <li>step = 1</li> </ul> </li> <li><code>(0 to 10) by 5</code> gives <code>Range(0, 5, 10)</code>,<ul> <li>start = 0</li> <li>end = 10</li> <li>step = 5</li> </ul> </li> <li><code>by</code> is used to set the step size</li> </ul>"},{"location":"programming/programming-languages/scala/summary/collections/#set","title":"set","text":"<ul> <li>unordered elements, implements using hashing</li> <li>cannot retrieve nth element as it is unordered</li> </ul> <p>~</p> <ul> <li><code>val colors = Set(\"red\", \"green\", \"blue\")</code></li> <li>adding new elements - <code>colors + \"yellow\"</code></li> <li>removing elements - <code>colors - \"green\"</code></li> <li>union elements - <code>colors ++ Set(\"black\", \"white\")</code></li> <li>difference of set - <code>colors -- Set(\"red\", \"green\")</code></li> </ul> <p>~</p> <ul> <li><code>s.head</code></li> <li><code>s.tail</code></li> <li><code>s.isEmpty</code></li> <li><code>s.min</code></li> <li><code>s.max</code></li> <li><code>s.intersect(s2)</code></li> <li><code>s.contains(ele)</code></li> </ul>"},{"location":"programming/programming-languages/scala/summary/collections/#maps","title":"maps","text":"<ul> <li>like look up tables</li> <li>stored as key, value</li> <li><code>val ordinals = Map(0 -&gt; \"zero\", 1 -&gt; \"one\", 2 -&gt; \"two\")</code></li> <li>access element <code>ordinals(2)</code> gives <code>\"two\"</code></li> </ul> <p>~</p> <ul> <li><code>s.keys</code> return iterable containing keys</li> <li><code>s.values</code> return iterable containing values</li> <li><code>s.isEmpty</code></li> <li><code>s.get(key)</code> get value associated with key</li> <li><code>s.contains(key)</code> check if key is present</li> </ul>"},{"location":"programming/programming-languages/scala/summary/oop-scala/","title":"OOP in Scala","text":""},{"location":"programming/programming-languages/scala/summary/oop-scala/#classes","title":"Classes","text":"<pre><code>class Point(xc: Int, yc: Int) {\n  var x: Int = xc\n  var y: Int = yc\n  def move(dx: Int, dy: Int) {\n    x = x + dx\n    y = y + dy\n    println (\"Point x location : \" + x);\n    println (\"Point y location : \" + y);\n  }\n}\n</code></pre> <pre><code>class Point(val xc: Int, val yc: Int) {\n  var x: Int = xc\n  var y: Int = yc\n\n  def move(dx: Int, dy: Int) {\n    x = x + dx\n    y = y + dy\n    println(\"Point x location : \" + x);\n    println(\"Point y location : \" + y);\n  }\n}\n\nclass Location(override val xc: Int, override val yc: Int, val zc: Int)\n    extends Point(xc, yc) {\n  var z: Int = zc\n\n  def move(dx: Int, dy: Int, dz: Int) {\n    x = x + dx\n    y = y + dy\n    z = z + dz\n    println(\"Point x location : \" + x);\n    println(\"Point y location : \" + y);\n    println(\"Point z location : \" + z);\n  }\n}\n\nobject Demo {\n  def main(args: Array[String]) {\n    val loc = new Location(10, 20, 15);\n    // Move to a new location\n    loc.move(10, 10, 5);\n  }\n}\n</code></pre>"},{"location":"programming/programming-languages/scala/summary/oop-scala/#objects","title":"Objects","text":""},{"location":"programming/programming-languages/scala/summary/oop-scala/#singleton-objects","title":"<code>Singleton Objects</code>","text":"<ul> <li>A singleton is a class that can have only one instance, i.e., Object.</li> <li>You create singleton using the keyword object instead of class keyword.</li> <li>Since you can't instantiate a singleton object, you can't pass parameters to the primary constructor.</li> <li>it is a design pattern where you make constructor private</li> </ul> <p>e.g. here <code>Demo</code> is a singleton object</p> <pre><code>class Point(val xc: Int, val yc: Int) {\n  var x: Int = xc\n  var y: Int = yc\n  def move(dx: Int, dy: Int): Unit = {\n    x = x + dx\n    y = y + dy\n  }\n}\n\nobject Demo {\n  def main(args: Array[String]): Unit = {\n    val point = new Point(10, 20)\n    printPoint()\n    def printPoint {\n      println(\"Point x location : \" + point.x);\n      println(\"Point y location : \" + point.y);\n    }\n  }\n}\n</code></pre>"},{"location":"programming/programming-languages/scala/summary/oop-scala/#access-modifiers","title":"Access Modifiers","text":""},{"location":"programming/programming-languages/scala/summary/oop-scala/#private","title":"private","text":"<ul> <li>A private member is visible only inside the class or object that contains the member definition</li> </ul> <pre><code>class Outer {\n  class Inner {\n    private def f():Unit = { println(\"f\") }\n    class InnerMost {\n        f() // OK\n    }\n  }\n  new Inner.f() // Error: f is not accessible\n}\n</code></pre>"},{"location":"programming/programming-languages/scala/summary/oop-scala/#protected","title":"protected","text":"<ul> <li>A protected member is only accessible from subclasses of the class in which the member is defined</li> </ul>"},{"location":"programming/programming-languages/scala/summary/oop-scala/#public","title":"public","text":"<ul> <li>Unlike private and protected members, it is not required to specify Public keyword for Public members.</li> <li>There is no explicit modifier for public members.</li> <li>Such members can be accessed from anywhere.</li> </ul>"},{"location":"programming/programming-languages/scala/summary/oop-scala/#scope-of-protection","title":"scope of protection","text":"<ul> <li>Access modifiers in Scala can be augmented with qualifiers.</li> <li>A modifier of the form <code>private[X]</code> or <code>protected[X]</code> means</li> <li>that access is private or protected \"up to\" <code>X</code>,</li> <li>where <code>X</code> designates some enclosing package, class or singleton object.</li> </ul> <pre><code>package society {\n  package professional {\n    class Executive {\n      private[professional] var workDetails = null\n      private[society] var friends = null\n      private[this] var secrets = null\n\n      def help(another: Executive) = {\n        println(another.workDetails)\n        println(another.secrets) //ERROR\n      }\n    }\n  }\n}\n</code></pre> <ul> <li><code>workDetails</code> will be accessible to any class within the enclosing package professional.</li> <li><code>friends</code> will be accessible to any class within the enclosing package society.</li> <li><code>secrets</code> will be accessible only on the implicit object within instance methods (this).</li> </ul>"},{"location":"programming/programming-languages/scala/summary/oop-scala/#traits","title":"Traits","text":"<ul> <li>like interfaces in java</li> <li>encapsulate methods and field definition</li> <li>which can then be reused by mixing them into classes</li> <li>unlike inheritance, where only one class can be inherited</li> <li>no of traits can be mixed in one class</li> <li>traits can be partially implemented, have no constructors</li> </ul> <pre><code>trait Equal{\n  def isEqual(x:Any):Boolean\n  def isNotEqual(x:Any):Boolean = !isEqual(x)\n}\n</code></pre> <p>using trait</p> <pre><code>class Point(xc:Int, yc:Int) extends Equal{\n  var x:Int = xc;\n  var y:Int = yc;\n  def isEqual(obj:Any) = {\n    obj.isInstanceOf[Point] &amp;&amp; obj.asInstanceOf[Point].x == y\n  }\n}\n\nobject Demo{\n  def main(args: Array[String]):Unit = {\n    val p1 = new Point(2, 3)\n    val p2 = new Point(2, 4)\n    val p3 = new Point(3, 3)\n    println(p1.isNotEqual(p2))\n    println(p1.isNotEqual(p3))\n    println(p1.isNotEqual(2))\n  }\n}\n</code></pre> <ul> <li>multiple traits, <code>extends</code> and then <code>with</code></li> </ul> <pre><code>trait Bark {\n    def bark: String = \"Woof\"\n}\ntrait Dog {\n    def breed: String\n    def color: String\n}\nclass SaintBernard extends Dog with Bark {\n    val breed = \"Saint Bernard\"\n    val color = \"brown\"\n}\n</code></pre>"},{"location":"programming/programming-paradigms/","title":"Programming Paradigms","text":"<ul> <li>Imperative - how to do?<ul> <li>Object Oriented</li> <li>Procedural</li> <li>Structured</li> </ul> </li> <li>Declarative - what to do?<ul> <li>Reactive</li> <li>Functional</li> <li>Logic</li> </ul> </li> </ul>"},{"location":"programming/programming-paradigms/functional-programming/","title":"Functional Programming","text":""},{"location":"programming/programming-paradigms/functional-programming/#purely-functional","title":"Purely Functional","text":"<ul> <li>only use functions, can't be used for anything</li> </ul>"},{"location":"programming/programming-paradigms/functional-programming/#closures","title":"Closures","text":"<ul> <li>remember it's scope</li> <li>data encapsulation</li> </ul>"},{"location":"programming/programming-paradigms/functional-programming/#higher-order-functions","title":"Higher Order Functions","text":"<ul> <li><code>filter</code></li> <li><code>sort</code></li> <li><code>map</code></li> </ul>"},{"location":"programming/programming-paradigms/functional-programming/#immutability","title":"Immutability","text":""},{"location":"programming/programming-paradigms/functional-programming/#sideeffects","title":"Sideeffects","text":""},{"location":"programming/programming-paradigms/functional-programming/#currying","title":"Currying","text":""},{"location":"programming/programming-paradigms/functional-programming/#monads","title":"Monads","text":""},{"location":"programming/programming-paradigms/object-oriented-programming/","title":"Object Oriented Programming","text":""},{"location":"softwares/","title":"Softwares","text":""},{"location":"softwares/adb/","title":"Android Debugger - <code>adb</code>","text":"<ul> <li>Install adb <code>sudo apt-get install android-tools-adb android-tools-fastboot</code></li> <li>Check Version <code>adb version</code></li> <li>Start adb server <code>sudo adb start-server</code></li> <li>Stop adb server <code>sudo adb kill-server</code></li> <li>See all device connected <code>adb devices</code></li> </ul>"},{"location":"softwares/bundle/","title":"bundle","text":"<ul> <li><code>bundle exec jekyll serve</code></li> <li><code>bundle exec jekyll serve --port 5000</code></li> <li><code>bundle exec just-the-docs rake search:init</code></li> <li><code>bundle init</code></li> <li><code>bundle install</code></li> <li><code>bundle list</code></li> <li><code>bundle update github-pages</code></li> </ul>"},{"location":"softwares/ffmpeg/","title":"ffmpeg","text":"<ul> <li>Convert one format to another (basic)<ul> <li><code>ffmpeg -i [file.[input-extension]] [file.[output-extension]]</code><ul> <li>Source</li> </ul> </li> </ul> </li> <li>Join audio and video together<ul> <li><code>ffmpeg -i [video] -i [audio] -c:v copy aac [output]</code><ul> <li>Source</li> </ul> </li> </ul> </li> <li>Remove audio stream from the video<ul> <li><code>ffmpeg -i video.mkd -c copy -an video_without_audo.mkv</code></li> </ul> </li> <li> <p>Join audio video, no encoding and decoding</p> <ul> <li><code>ffmpeg -i video.mkv -i audio.mp3 -c output.mkv</code></li> </ul> </li> <li> <p>get certain part of the video file</p> <ul> <li><code>ffmpeg [input] -ss 00:00:00 -to 00:00:60 -c:v copy -c:a copy [output]</code></li> </ul> </li> <li> <p>loop for conversion</p> </li> </ul> <pre><code>for f in *.avi; do \n    ffmpeg \\\n        -i \"$f\" \\\n        -c:v libx264 \\\n        -crf 23 \\\n        -preset medium \\\n        -c:a aac \\\n        -b:a 128k \\\n        -movflags +faststart \\\n        -vf scale=-2:720,format=yuv420p \\\n        \"${f%.avi}.mp4\"; \ndone\n</code></pre>"},{"location":"softwares/ffmpeg/#codecs","title":"Codecs","text":"<ul> <li><code>-c</code> means codecs</li> <li>convert and use the same codecs<ul> <li><code>ffmpeg -i [input-file] -c copy [output-file]</code></li> </ul> </li> <li>convert and change video codec and audio codec<ul> <li><code>ffmpeg -i [input-file] -c:v [video-codec] -c:a [audio-codec] [output-file]</code></li> <li>use <code>copy</code> as codec if you want to keep the current codec</li> <li>video<ul> <li><code>H.268</code> - <code>libx268</code></li> <li><code>h.264</code> - lossless - <code>libx264 -crf 0</code></li> </ul> </li> <li>audio<ul> <li><code>AAC</code> - <code>aac</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"softwares/ffmpeg/#fastest-way-to-convert-videos","title":"Fastest way to convert videos","text":"<p>https://askubuntu.com/questions/352920/fastest-way-to-convert-videos-batch-or-single/353282#353282</p>"},{"location":"softwares/ffmpeg/#mp4","title":"MP4","text":"<pre><code>ffmpeg \\\n    -i input \\\n    -c:v libx264 \\\n    -crf 23 \\\n    -preset medium \\\n    -c:a aac \\\n    -b:a 128k \\\n    -movflags \\\n    +faststart \\\n    -vf scale=-2:720,format=yuv420p \\\n    output.mp4\n</code></pre> <ul> <li><code>-crf</code><ul> <li>Quality. Range is logarithmic 0 (lossless) to 51 (worst quality). Default is 23. Subjective   sane range is ~18-28 or so. Use the highest value that still gives you an acceptable quality.   If you are re-encoding impractically large inputs to upload to YouTube or similar then try a   value of 17 or 18 since these video services will re-encode anyway.</li> </ul> </li> <li><code>-preset</code><ul> <li>Encoding speed. A slower preset provides better compression (quality per file size) but is   slower. Use the slowest that you have patience for: ultrafast, superfast, veryfast, faster,   fast, medium (the default), slow, slower, veryslow.</li> </ul> </li> </ul>"},{"location":"softwares/ffmpeg/#resources","title":"Resources","text":"<ul> <li>https://trac.ffmpeg.org/wiki/Encode/AAC</li> <li>https://trac.ffmpeg.org/wiki/Encode/H.264</li> <li>http://blog.pkh.me/p/13-the-ffmpeg-libav-situation.html</li> </ul>"},{"location":"softwares/imagemagik/","title":"imagemagik","text":"<ul> <li><code>convert [input] -paint [no] [output]</code><ul> <li>converts the image into a painting, higher the <code>no</code> the more it looks like painting</li> </ul> </li> <li><code>convert [input] -swirl [no] [output]</code><ul> <li>swirl the image</li> </ul> </li> <li><code>convert [image1] [image2] -composite -matte [output]</code><ul> <li>superimpose <code>image2</code> on <code>image1</code></li> </ul> </li> <li> <p><code>convert [image1] [image2] -composite -matte [output]</code></p> <ul> <li>superimpose centered <code>image2</code> on <code>image1</code></li> </ul> </li> <li> <p><code>convert -size [length]x[width] canvas:[color] [output]</code></p> <ul> <li>create a canvas</li> </ul> </li> <li><code>convert [input] -resize [length]x[width] [output]</code><ul> <li>if you leave either length or width, the image is automatically resized maintaining aspect ratio</li> </ul> </li> <li><code>convert [input] -resize 75% [output]</code><ul> <li>resize the image size by 75%</li> </ul> </li> <li><code>convert [input] -brightness-contrast +10+0 -o [output]</code><ul> <li>increase brightness by 10 and contrast by 0 percent</li> </ul> </li> </ul>"},{"location":"softwares/imagemagik/#examples","title":"Examples","text":"<ul> <li><code>convert 0000.png -brightness-contrast 20 000.png</code></li> <li><code>convert big.png -resize 70% dpsmall.png</code></li> <li><code>convert -brightness-contrast +10+0 000.png</code></li> </ul>"},{"location":"softwares/imagemagik/#resources","title":"Resources","text":"<ul> <li>https://imagemagick.org/Usage/basics/</li> </ul>"},{"location":"softwares/imagemagik/#legacy-resources","title":"Legacy Resources","text":"<ul> <li>https://legacy.imagemagick.org/script/command-line-processing.php</li> <li>https://legacy.imagemagick.org/Usage/compose/</li> <li>http://www.imagemagick.org/discourse-server/ old forum</li> </ul>"},{"location":"softwares/inkscape/","title":"inkscape","text":"<ul> <li>convert svg to png</li> </ul> <pre><code>inkscape \\\n    --export-type=\"png\" \\\n    [input-file] \\\n    --export-filename=[output-file].png \\\n    --export-width=400 \\\n    --export-background-opacity=0\n</code></pre>"},{"location":"softwares/libreoffice/","title":"libreoffice","text":"<ul> <li> <p><code>libreoffice --headless --convert-to pdf [file-name]</code></p> <ul> <li>export as pdf</li> </ul> </li> <li> <p><code>libreoffice --writer</code></p> <ul> <li>open libreoffice writer</li> </ul> </li> </ul>"},{"location":"softwares/mpv/","title":"mpv","text":"<ul> <li><code>mpv /dev/video0</code> - play camera stream</li> </ul>"},{"location":"softwares/pandoc/","title":"pandoc","text":"<ul> <li>universal document converter</li> <li>made using haskell</li> <li>https://pandoc.org/MANUAL.html</li> </ul>"},{"location":"softwares/pandoc/#basics","title":"Basics","text":"<ul> <li><code>pandoc -o output.html input.txt</code></li> <li>By default, pandoc produces a document fragment.<ul> <li><code>pandoc -s -o output.html input.txt</code></li> <li>for standalone file</li> </ul> </li> <li>you can add options as <code>-theme</code> flags or you can add them in the front matter</li> <li>front matter is added to the head of the document and is like this</li> </ul> <pre><code>---\ntitle: pandoc-help\nauthor: totoro\n---\n</code></pre> <ul> <li>there are pandoc templates which can be used to change the look of the document</li> <li>filters can also be used to change some structure</li> <li>to add tabes of contents add this to the option <code>--toc</code></li> </ul>"},{"location":"softwares/pandoc/#markdown-to-pdf","title":"markdown to pdf","text":"<ul> <li>https://tex.stackexchange.com/questions/234786/how-to-set-a-font-family-with-pandoc - change pdf font</li> <li>https://stackoverflow.com/questions/58866818/pandoc-conversion-to-pdf-not-providing-colored-hyptertext-links - add colour/color to links</li> </ul>"},{"location":"softwares/pandoc/#markdown-to-css","title":"markdown to css","text":"<ul> <li>apply css template - <code>pandoc i.md -o o.html --css=somecss.css</code></li> <li>include the css in the html file - <code>pandoc i.md -o -o.html --self-contained --css=somecss.css</code></li> </ul>"},{"location":"softwares/pandoc/#cheatsheet","title":"cheatsheet","text":"<ul> <li><code>pandoc assignment1.md -o assignment1.pdf</code><ul> <li>convert <code>assignment.md</code> to <code>assignment.pdf</code></li> </ul> </li> <li><code>pandoc --version</code> - get pandoc version</li> <li><code>pandoc first.md -o first.pdf --template eisvogel</code><ul> <li>use a template</li> </ul> </li> <li><code>pandoc first.md --pdf-engine=xelatex -o first.pdf</code><ul> <li>use another engine</li> </ul> </li> <li><code>pandoc scala.md -o scala.pdf --toc</code><ul> <li>create a table of contents too</li> </ul> </li> <li><code>pandoc hi.md --toc -o hi.html --css pandoc.css --template=./template.html</code><ul> <li>use a custom template and custom css together for a webpage</li> </ul> </li> <li>convert <code>README.md</code> to <code>readme.pdf</code> with custom title, author, fontsize.   This can be included in the front matter too.</li> </ul> <pre><code>pandoc README.md -o readme.pdf --toc \\\n  -v title:\"Scala\" \\\n  -v author:\"Shivanshi\" \\\n  -v geometry:\"left=2cm,right=2cm,top=1cm,bottom=2cm\" \\\n  -v fontsize:\"12pt\"\n</code></pre> <ul> <li><code>pandoc --print-highlight-style pygments &gt; my.theme</code> - get   the highlight config of pygments</li> <li><code>pandoc --list-highlight-styles</code> - list all highlight styles</li> <li><code>pandoc -D css &gt; i.css</code> - get default css template</li> <li> <p><code>pandoc -D html &gt; template.html</code> - get default html template</p> </li> <li> <p><code>pandoc --pdf-engine=xelatex --variable urlcolor=blue inputfile.md -o outputfilename.pdf</code></p> <ul> <li>converts a markdown file to pdf</li> </ul> </li> </ul>"},{"location":"softwares/pandoc/#color-highlighting-theme","title":"color highlighting theme","text":"<ul> <li>default styles</li> </ul> <pre><code>  &lt;style&gt;\n    $styles.html()$\n  &lt;/style&gt;\n</code></pre> <ul> <li>highting<ul> <li>https://invent.kde.org/frameworks/syntax-highlighting/-/blob/master/data/themes</li> <li>here is the list of themes</li> </ul> </li> </ul>"},{"location":"softwares/pandoc/#templates","title":"templates","text":"<ul> <li>https://github.com/Wandmalfarbe/pandoc-latex-template</li> </ul>"},{"location":"softwares/rclone/","title":"rclone","text":"<p>Swiss army of cloud technologies</p> <ul> <li>https://rclone.org/commands/</li> <li> <p><code>rclone config</code></p> </li> <li> <p><code>rclone sync -i SOURCE remote:DESTINATION</code></p> <ul> <li>make SOURCE, DESTINATION identical, modifying DESTINATION only</li> </ul> </li> <li> <p><code>rclone mount</code> - Mount the remote as file system on a mountpoint.</p> </li> <li><code>rclone move</code> - Move files from source to dest.</li> <li><code>rclone copy notes remote:notes</code> - Copy files from source to dest, skipping identical files.</li> <li><code>rclone bisync</code> - Perform bidirectional synchronization between two paths.</li> </ul>"},{"location":"softwares/rclone/#cloud-drives","title":"Cloud drives","text":"<ul> <li>https://rclone.org/drive/</li> </ul>"},{"location":"softwares/stardict/","title":"StarDict","text":"<ul> <li>there are many dictionaries on linux</li> <li>so dictionaries program interact with data files, which store   words and their meanings</li> <li>data files have extension <code>.dz</code></li> <li><code>sdcv</code> is a console version of StarDict program</li> </ul> <p>I use this function in my config to search words or get random words.</p> <pre><code>getWord(){\n    if [ ! -z \"$@\" ]; then\n        sdcv \"$@\"\n    else\n        local WORD_MEANING\n        local WORD\n        local MEANING\n        D=$RANDOM\n        WORD_MEANING=$(sed -n $((1 + $RANDOM % 36667))p $HOME/.dictonary/oxford_english_dict.txt)\n        WORD=$(echo $WORD_MEANING | awk -F'  ' '{print $1}')\n        MEANING=$(echo $WORD_MEANING | awk -F'  ' '{print $2}')\n        echo \"\\033[4;31m$WORD\"\n        echo \"\\033[0;34m$MEANING\"\n    fi\n}\n</code></pre>"},{"location":"softwares/stardict/#links-to-download-dictionary-data-files","title":"links to download dictionary data files","text":"<ul> <li>http://download.huzheng.org/bigdict/</li> <li>https://web.archive.org/web/20140917131745/http://abloz.com/huzheng/stardict-dic/dict.org/</li> <li>https://sites.google.com/site/gtonguedict/home/stardict-dictionaries</li> <li>http://foldoc.org/</li> <li>http://catb.org/jargon/html/online-preface.html</li> </ul>"},{"location":"softwares/ssh/scp/","title":"scp - secure copy","text":"<ul> <li><code>scp foo.txt ubuntu@hostname:/home/ubuntu</code> - Copy foo.txt into the specified remote directory</li> <li><code>scp ubuntu@hostname:/home/ubuntu/foo.txt /C:\\Users\\Admin</code> - Copy foo.txt from the specified remote directory</li> </ul>"},{"location":"softwares/ssh/ssh/","title":"ssh","text":"<ul> <li><code>ssh hostname</code> Connect to hostname using your current user name over the default SSH port 22</li> <li><code>ssh -i foo.pem hostname</code> Connect to hostname using the identity file</li> <li><code>ssh user@hostname</code> Connect to hostname using the user over the default SSH port 22</li> <li><code>ssh user@hostname -p 8765</code> Connect to hostname using the user over a custom port</li> <li><code>ssh ssh://user@hostname:8765</code> Connect to hostname using the user over a custom port</li> </ul> <p>Set default user and port in <code>~/.ssh/config</code>, so you can just enter the name next time:</p> <pre><code>$ cat ~/.ssh/config\nHost name\n  User foo\n  Hostname 127.0.0.1\n  Port 8765\n$ ssh name\n</code></pre>"},{"location":"softwares/ssh/ssh/#setting-up-a-host-using-ssh","title":"Setting up a host using ssh","text":"<pre><code># generate keys\nssh-keygen -t rsa -b 2048\n\n# copy public keys to server (here it is on local network)\nssh-copy-id -i mint_shivanshu shivanshu@192.168.122.194\n\n# try to connect with keys\nssh 'shivanshu@192.168.122.194' -i ./mint_shivanshu\n\n# add this to ssh config file, ~/.ssh/config\nHost vm-mint\n    Hostname 192.168.122.194\n    IdentityFile ~/Documents/keys/vm/mint_shivanshu\n    User shivanshu\n    IndentitiesOnly yes\n\n# now connect\nssh vm-mint\n</code></pre>"},{"location":"softwares/ssh/ssh_man/","title":"SSH - Secure Shell","text":"<p>Setting up an SSH server involves several steps, including installing the SSH server software, configuring it, and ensuring secure access. Here's a step-by-step guide to set up an SSH server on a Linux-based system:</p>"},{"location":"softwares/ssh/ssh_man/#install-ssh-server","title":"Install SSH Server","text":"<p>The specific command to install the SSH server may vary depending on your Linux distribution. Here are commands for some popular distributions:</p> <ul> <li>Ubuntu/Debian:</li> </ul> <pre><code>sudo apt update\nsudo apt install openssh-server\n</code></pre> <ul> <li>CentOS/RHEL:</li> </ul> <p>For CentOS 7 and RHEL 7:</p> <pre><code>sudo yum install openssh-server\n</code></pre> <p>For CentOS 8 and RHEL 8:</p> <pre><code>sudo dnf install openssh-server\n</code></pre> <ul> <li>Arch Linux:</li> </ul> <pre><code>sudo pacman -S openssh\n</code></pre> <ul> <li>Fedora:</li> </ul> <pre><code>sudo dnf install openssh-server\n</code></pre> <ul> <li>OpenSUSE:</li> </ul> <pre><code>sudo zypper install openssh\n</code></pre>"},{"location":"softwares/ssh/ssh_man/#start-and-enable-ssh-service","title":"Start and Enable SSH Service","text":"<p>After installation, start the SSH service and enable it to start on boot:</p> <pre><code>sudo systemctl start sshd\nsudo systemctl enable sshd\n</code></pre>"},{"location":"softwares/ssh/ssh_man/#configuring-ssh-optional-step","title":"Configuring SSH (optional step)","text":"<p>By default, SSH is secure, but you can further enhance security by modifying its configuration. The SSH server configuration file is usually located at <code>/etc/ssh/sshd_config</code>. You can edit it with a text editor like <code>nano</code> or <code>vim</code>.</p> <pre><code>sudo nano /etc/ssh/sshd_config\n</code></pre> <p>Some common configuration changes include:</p> <ul> <li>Changing the SSH port (recommended for security):</li> </ul> <pre><code>Port 2222\n</code></pre> <ul> <li>Disabling root login (recommended):</li> </ul> <pre><code>PermitRootLogin no\n</code></pre> <ul> <li>Allowing only specific users to log in:</li> </ul> <pre><code>AllowUsers yourusername\n</code></pre> <p>Make your desired changes and save the file. After making changes, restart the SSH service:</p> <pre><code>sudo systemctl restart sshd\n</code></pre>"},{"location":"softwares/ssh/ssh_man/#firewall-configuration","title":"Firewall Configuration","text":"<p>If you have a firewall enabled (e.g., <code>ufw</code> for Ubuntu), you'll need to allow SSH traffic. The default SSH port is 22, so you should allow traffic on this port.</p> <p>For <code>ufw</code> on Ubuntu:</p> <pre><code>sudo ufw allow 2222/tcp   # Allow your custom SSH port (if changed)\nsudo ufw enable\n</code></pre> <p>For <code>firewalld</code> on CentOS/RHEL:</p> <pre><code>sudo firewall-cmd --add-service=ssh --permanent\nsudo firewall-cmd --reload\n</code></pre>"},{"location":"softwares/ssh/ssh_man/#accessing-the-ssh-server","title":"Accessing the SSH Server","text":"<p>You can now access your SSH server from another machine using an SSH client. Use the following command:</p> <pre><code>ssh username@server_ip_or_hostname -p 2222  # Use your custom SSH port (if changed)\n</code></pre> <p>Replace <code>username</code> with your server username, <code>server_ip_or_hostname</code> with your server's IP address or hostname, and <code>-p 2222</code> with the custom SSH port if you changed it.</p>"},{"location":"softwares/ssh/ssh_man/#ssh-key-authentication-optional","title":"SSH Key Authentication (Optional)","text":"<p>For added security, consider setting up SSH key authentication. This eliminates the need for password-based authentication. Setting up SSH key authentication involves generating an SSH key pair on your local machine and then configuring your remote server to recognize your public key for authentication. Here's a step-by-step guide to set up SSH keys:</p>"},{"location":"softwares/ssh/ssh_man/#generate-ssh-key-pair-on-your-local-machine","title":"Generate SSH Key Pair (on your local machine)","text":"<p>You can generate an SSH key pair using the <code>ssh-keygen</code> command. Open a terminal on your local machine and run the following command:</p> <pre><code>ssh-keygen -t rsa -b 4096\n</code></pre> <ul> <li><code>-t rsa</code> specifies that you want to generate an RSA key.</li> <li><code>-b 4096</code> specifies the key length. 4096 bits is a good choice for strong security.</li> </ul> <p>You'll be prompted to choose a location to save the key pair. By default, they are usually saved in <code>~/.ssh/id_rsa</code> for the private key and <code>~/.ssh/id_rsa.pub</code> for the public key. Press Enter to accept the default location.</p> <p>You can also provide a passphrase to further secure your private key. This is optional but recommended for additional security.</p>"},{"location":"softwares/ssh/ssh_man/#copy-the-public-key-to-the-remote-server","title":"Copy the Public Key to the Remote Server","text":"<p>Next, you need to copy your public key to the remote server. You can use the <code>ssh-copy-id</code> command for this. Replace <code>username</code> and <code>server_ip_or_hostname</code> with your server's username and address:</p> <pre><code>ssh-copy-id username@server_ip_or_hostname\n</code></pre> <p>You'll be prompted to enter your server password. After successfully entering your password, your public key will be added to the <code>~/.ssh/authorized_keys</code> file on the remote server.</p> <p>If you don't have <code>ssh-copy-id</code> available, you can manually copy the public key by running:</p> <pre><code>cat ~/.ssh/id_rsa.pub | ssh username@server_ip_or_hostname \"mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys\"\n</code></pre>"},{"location":"softwares/ssh/ssh_man/#test-ssh-key-authentication","title":"Test SSH Key Authentication","text":"<p>Now, you can test SSH key authentication by attempting to SSH into your remote server without providing a password. Run the following command:</p> <pre><code>ssh username@server_ip_or_hostname\n</code></pre> <p>If you set a passphrase for your SSH key, you'll be prompted to enter it. Otherwise, you should be logged in without a password.</p>"},{"location":"softwares/ssh/ssh_man/#disable-password-authentication-optional-but-recommended","title":"Disable Password Authentication (Optional, but recommended)","text":"<p>For enhanced security, you can disable password authentication on your SSH server, allowing only key-based authentication. To do this, edit the SSH server configuration file on your server (typically located at <code>/etc/ssh/sshd_config</code>) and set the following options:</p> <pre><code>PasswordAuthentication no\nChallengeResponseAuthentication no\n</code></pre> <p>Save the file and then restart the SSH server:</p> <pre><code>sudo systemctl restart sshd\n</code></pre> <p>With password authentication disabled, you can only log in using your SSH key.</p> <p>SSH key authentication is a more secure and convenient way to access your remote server compared to password authentication. Be sure to keep your private key secure, as anyone with access to it can log in to your server.</p>"},{"location":"tools/search-engines/","title":"Search Engines","text":"<ul> <li>https://en.wikipedia.org/wiki/List_of_search_engines</li> </ul>"},{"location":"tools/latex/","title":"LaTeX","text":"<p>LaTeX is a software system for document preparation. A TeX distribution such as Tex Live or MiKTeX is used to produce output file (such as PDF or DVI) suitable for printing or digital distribution.</p> <p>LaTeX is intended to provide a high-level, descriptive markup language that accesses the power of TeX in an easier way for writers. In essence, TeX handles the layout side, while LaTeX handles the content side for document processing. LaTeX comprises a collection of TeX macros and a program to process LaTeX documents, and because the plain TeX formatting commands are elementary, it provides authors with ready-made commands for formatting and layout requirements such as chapter headings, footnotes, cross-references and bibliographies.</p>"},{"location":"tools/latex/#resources","title":"Resources","text":"<ul> <li>https://en.wikipedia.org/wiki/LaTeX</li> <li>https://latexdraw.com/ - how to draw illustrations in latex</li> <li>DVI - https://en.wikipedia.org/wiki/Device_independent_file_format</li> <li>PDF - https://en.wikipedia.org/wiki/PDF</li> <li>https://en.wikibooks.org/wiki/LaTeX</li> </ul>"},{"location":"tools/latex/bibliographies/","title":"Bibliographies","text":"<p><code>bibliography.bib</code></p> <pre><code>@book{test,\n    author = \"totoro, totoro\",\n    title = \"this is a research\",\n    year = \"2014\",\n    publisher = \"shivnashu\"\n}\n</code></pre> <ul> <li>use <code>biber</code> package for bibliography management</li> </ul> <pre><code>\\usepackage[backend=biber]{biblatex}\n% \\usepackage[backend=biber, style=author,year-icomp]{biblatex}\n\\addbibersource{bibliography.bib}\n\n\\begin{document}\n\\section{demo}\nThis is a reference \\textcite{test}\n\\parencite{test}\n\\printbibliography\n\\end{document}\n</code></pre> <ul> <li><code>pdflatex filename</code></li> <li><code>biber filename</code></li> </ul>"},{"location":"tools/latex/label-and-references/","title":"Labels and References","text":"<pre><code>Check out this section \\ref{list}\n\\section{Lists\\label{list}}\n</code></pre>"},{"location":"tools/social-media/blogging/","title":"Blogging","text":"<p>Some services present in internet are:</p> <ul> <li>hashnode<ul> <li>free</li> </ul> </li> <li>medium<ul> <li>pay walled</li> </ul> </li> <li>ghost<ul> <li>self hosted</li> </ul> </li> <li>wordpress<ul> <li>self hosted</li> </ul> </li> <li>dev.to<ul> <li>big community</li> <li>https://dev.to/</li> </ul> </li> </ul>"},{"location":"tools/social-media/fediverse/","title":"fediverse","text":"<ul> <li>https://matrix.org/</li> </ul> <p>![img/fediverse.png]</p> <ul> <li>matrix<ul> <li>not part of fediverse</li> <li>This is communication protocol</li> </ul> </li> <li>activity pub<ul> <li>services which use this can communicate between each other</li> </ul> </li> <li>https://bookwyrm.social/<ul> <li>Talk about books, track your reading, and find out what your friends are reading, on your own terms.</li> </ul> </li> <li>https://funkwhale.audio/<ul> <li>Funkwhale is a community-driven project that lets you listen and share music and audio within a decentralized, open network.</li> </ul> </li> <li>https://joinplu.me/ plume<ul> <li>A federated blogging application</li> </ul> </li> <li>bonfire https://bonfirenetworks.org/<ul> <li>Bonfire is a federated social networking toolkit to customise and host your own online space and control your experience at the most granular level.</li> </ul> </li> </ul>"},{"location":"tools/vim/","title":"Vim","text":"<p>Vim is a text editor, with modal editing. But this site is not only about vim it is about all modal editing software.</p> <ul> <li>Vim</li> <li>Neovim</li> <li>Emacs</li> </ul>"},{"location":"tools/vim/#resource","title":"Resource","text":"<ul> <li>Official vim site - https://www.vim.org</li> <li>Vim Tips - https://vim.fandom.com/wiki/Vim_Tips_Wiki</li> <li>HTML version of vim help - https://vimhelp.org/</li> <li>Video of using vim - https://vimeo.com/user1690209</li> <li>Solve vim challenges https://www.vimgolf.com/</li> <li>vim-galore https://github.com/mhinz/vim-galore</li> </ul>"},{"location":"tools/vim/my-stuff/clipboard/","title":"Copying to clipboard","text":"<ul> <li>https://stackoverflow.com/questions/3961859/how-to-copy-to-clipboard-in-vim</li> </ul> <p>First install gvim, after that you can copy to system clipboard using <code>\"+y</code></p>"},{"location":"tools/vim/my-stuff/external-command/","title":"External commands","text":"<ul> <li>vim is a single threaded program</li> <li><code>!</code> - use this to start a job e.g. <code>!ls</code>, <code>:!ls -1 | sort | tail -n5</code></li> </ul>"},{"location":"tools/vim/my-stuff/find-replace/","title":"find and replace","text":""},{"location":"tools/vim/my-stuff/find-replace/#find","title":"find","text":"<ul> <li><code>/findthis</code> - will find the occurrences of <code>findthis</code></li> <li><code>n</code> - will take you to the next occurrence</li> <li><code>b</code> - will take you to the previous occurrence</li> </ul>"},{"location":"tools/vim/my-stuff/find-replace/#replace","title":"replace","text":"<ul> <li><code>[range]s/{pattern}/{string}/[flags] [count]</code> will replace pattern with string, in the given range, and will use the given flags</li> <li> </li> </ul>"},{"location":"tools/vim/my-stuff/find-replace/#g-flag-means-global","title":"<code>g</code> flag means global","text":""},{"location":"tools/vim/my-stuff/line_number/","title":"Line Numbers","text":"<ul> <li>show absolute line numbers - <code>set number</code> <code>set nu</code></li> <li>hide absolute line number - <code>set nonumber</code> <code>set nu!</code></li> <li>show relative line number - <code>set relativenumber</code> <code>set rnu</code></li> <li>hide relative line number - <code>set norelativenumber</code> <code>ser rnu!</code></li> <li>show hybrid line number - <code>set number realtivenumber</code></li> <li>hide hybrid line number - <code>set nonumber norealativenumber</code></li> </ul>"},{"location":"tools/vim/my-stuff/macros/","title":"macros","text":"<ul> <li>Start recording by typing q followed by the register, e.g. q. (The command-line will signify this via \"recording @q\".)</li> <li>Stop recording by hitting q once again.</li> <li>Execute the macro via [count]@q.</li> <li>Repeat the last used macro via [count]@@.</li> </ul>"},{"location":"tools/vim/my-stuff/renaming/","title":"bulk renaming","text":"<ul> <li><code>:r !ls dir_name</code></li> <li><code>:%s/.*/mv &amp; &amp;/</code> - add mv to every line</li> <li><code>:w !sh</code> - execute the mv command</li> </ul>"},{"location":"tools/vim/my-stuff/spell/","title":"Spell Check","text":"<p>To turn it on</p> <pre><code>:set spell spelllang=en_us\n</code></pre> <ul> <li><code>]s</code> - next misspelled word</li> <li><code>[s</code> - previous misspelled word</li> <li><code>z=</code> - (on the incorrect word) show the correct spelling recommendations</li> <li><code>zg</code> - add the word to the dictionary</li> <li><code>zw</code> - mark a word as incorrect</li> </ul>"}]}